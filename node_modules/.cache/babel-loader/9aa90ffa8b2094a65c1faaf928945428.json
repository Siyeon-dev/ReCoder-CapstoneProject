{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"SVGStringList\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = (value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(`${context} is not of type 'SVGStringList'.`);\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  const ctor = globalObject[ctorRegistrySymbol][\"SVGStringList\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor SVGStringList is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper = new Proxy(wrapper, proxyHandler);\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = globalObject => {\n  let wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper = new Proxy(wrapper, proxyHandler);\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  class SVGStringList {\n    constructor() {\n      throw new TypeError(\"Illegal constructor\");\n    }\n\n    clear() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol].clear();\n    }\n\n    initialize(newItem) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'initialize' on 'SVGStringList': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'initialize' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].initialize(...args);\n    }\n\n    getItem(index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'getItem' on 'SVGStringList': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'getItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].getItem(...args);\n    }\n\n    insertItemBefore(newItem, index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'insertItemBefore' on 'SVGStringList': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'insertItemBefore' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'insertItemBefore' on 'SVGStringList': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].insertItemBefore(...args);\n    }\n\n    replaceItem(newItem, index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\"Failed to execute 'replaceItem' on 'SVGStringList': 2 arguments required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'replaceItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'replaceItem' on 'SVGStringList': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].replaceItem(...args);\n    }\n\n    removeItem(index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'removeItem' on 'SVGStringList': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'removeItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].removeItem(...args);\n    }\n\n    appendItem(newItem) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'appendItem' on 'SVGStringList': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'appendItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].appendItem(...args);\n    }\n\n    get length() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"length\"];\n    }\n\n    get numberOfItems() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"numberOfItems\"];\n    }\n\n  }\n\n  Object.defineProperties(SVGStringList.prototype, {\n    clear: {\n      enumerable: true\n    },\n    initialize: {\n      enumerable: true\n    },\n    getItem: {\n      enumerable: true\n    },\n    insertItemBefore: {\n      enumerable: true\n    },\n    replaceItem: {\n      enumerable: true\n    },\n    removeItem: {\n      enumerable: true\n    },\n    appendItem: {\n      enumerable: true\n    },\n    length: {\n      enumerable: true\n    },\n    numberOfItems: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"SVGStringList\",\n      configurable: true\n    },\n    [Symbol.iterator]: {\n      value: Array.prototype[Symbol.iterator],\n      configurable: true,\n      writable: true\n    }\n  });\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = SVGStringList;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: SVGStringList\n  });\n};\n\nconst proxyHandler = {\n  get(target, P, receiver) {\n    if (typeof P === \"symbol\") {\n      return Reflect.get(target, P, receiver);\n    }\n\n    const desc = this.getOwnPropertyDescriptor(target, P);\n\n    if (desc === undefined) {\n      const parent = Object.getPrototypeOf(target);\n\n      if (parent === null) {\n        return undefined;\n      }\n\n      return Reflect.get(target, P, receiver);\n    }\n\n    if (!desc.get && !desc.set) {\n      return desc.value;\n    }\n\n    const getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return Reflect.apply(getter, receiver, []);\n  },\n\n  has(target, P) {\n    if (typeof P === \"symbol\") {\n      return Reflect.has(target, P);\n    }\n\n    const desc = this.getOwnPropertyDescriptor(target, P);\n\n    if (desc !== undefined) {\n      return true;\n    }\n\n    const parent = Object.getPrototypeOf(target);\n\n    if (parent !== null) {\n      return Reflect.has(parent, P);\n    }\n\n    return false;\n  },\n\n  ownKeys(target) {\n    const keys = new Set();\n\n    for (const key of target[implSymbol][utils.supportedPropertyIndices]) {\n      keys.add(`${key}`);\n    }\n\n    for (const key of Reflect.ownKeys(target)) {\n      keys.add(key);\n    }\n\n    return [...keys];\n  },\n\n  getOwnPropertyDescriptor(target, P) {\n    if (typeof P === \"symbol\") {\n      return Reflect.getOwnPropertyDescriptor(target, P);\n    }\n\n    let ignoreNamedProps = false;\n\n    if (utils.isArrayIndexPropName(P)) {\n      const index = P >>> 0;\n\n      if (target[implSymbol][utils.supportsPropertyIndex](index)) {\n        const indexedValue = target[implSymbol].getItem(index);\n        return {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: utils.tryWrapperForImpl(indexedValue)\n        };\n      }\n\n      ignoreNamedProps = true;\n    }\n\n    return Reflect.getOwnPropertyDescriptor(target, P);\n  },\n\n  set(target, P, V, receiver) {\n    if (typeof P === \"symbol\") {\n      return Reflect.set(target, P, V, receiver);\n    }\n\n    if (target === receiver) {\n      if (utils.isArrayIndexPropName(P)) {\n        const index = P >>> 0;\n        let indexedValue = V;\n        indexedValue = conversions[\"DOMString\"](indexedValue, {\n          context: \"Failed to set the \" + index + \" property on 'SVGStringList': The provided value\"\n        });\n        const creating = !target[implSymbol][utils.supportsPropertyIndex](index);\n\n        if (creating) {\n          target[implSymbol][utils.indexedSetNew](index, indexedValue);\n        } else {\n          target[implSymbol][utils.indexedSetExisting](index, indexedValue);\n        }\n\n        return true;\n      }\n    }\n\n    let ownDesc;\n\n    if (utils.isArrayIndexPropName(P)) {\n      const index = P >>> 0;\n\n      if (target[implSymbol][utils.supportsPropertyIndex](index)) {\n        const indexedValue = target[implSymbol].getItem(index);\n        ownDesc = {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: utils.tryWrapperForImpl(indexedValue)\n        };\n      }\n    }\n\n    if (ownDesc === undefined) {\n      ownDesc = Reflect.getOwnPropertyDescriptor(target, P);\n    }\n\n    if (ownDesc === undefined) {\n      const parent = Reflect.getPrototypeOf(target);\n\n      if (parent !== null) {\n        return Reflect.set(parent, P, V, receiver);\n      }\n\n      ownDesc = {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: undefined\n      };\n    }\n\n    if (!ownDesc.writable) {\n      return false;\n    }\n\n    if (!utils.isObject(receiver)) {\n      return false;\n    }\n\n    const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);\n    let valueDesc;\n\n    if (existingDesc !== undefined) {\n      if (existingDesc.get || existingDesc.set) {\n        return false;\n      }\n\n      if (!existingDesc.writable) {\n        return false;\n      }\n\n      valueDesc = {\n        value: V\n      };\n    } else {\n      valueDesc = {\n        writable: true,\n        enumerable: true,\n        configurable: true,\n        value: V\n      };\n    }\n\n    return Reflect.defineProperty(receiver, P, valueDesc);\n  },\n\n  defineProperty(target, P, desc) {\n    if (typeof P === \"symbol\") {\n      return Reflect.defineProperty(target, P, desc);\n    }\n\n    if (utils.isArrayIndexPropName(P)) {\n      if (desc.get || desc.set) {\n        return false;\n      }\n\n      const index = P >>> 0;\n      let indexedValue = desc.value;\n      indexedValue = conversions[\"DOMString\"](indexedValue, {\n        context: \"Failed to set the \" + index + \" property on 'SVGStringList': The provided value\"\n      });\n      const creating = !target[implSymbol][utils.supportsPropertyIndex](index);\n\n      if (creating) {\n        target[implSymbol][utils.indexedSetNew](index, indexedValue);\n      } else {\n        target[implSymbol][utils.indexedSetExisting](index, indexedValue);\n      }\n\n      return true;\n    }\n\n    return Reflect.defineProperty(target, P, desc);\n  },\n\n  deleteProperty(target, P) {\n    if (typeof P === \"symbol\") {\n      return Reflect.deleteProperty(target, P);\n    }\n\n    if (utils.isArrayIndexPropName(P)) {\n      const index = P >>> 0;\n      return !target[implSymbol][utils.supportsPropertyIndex](index);\n    }\n\n    return Reflect.deleteProperty(target, P);\n  },\n\n  preventExtensions() {\n    return false;\n  }\n\n};\n\nconst Impl = require(\"../svg/SVGStringList-impl.js\");","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/generated/SVGStringList.js"],"names":["conversions","require","utils","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","context","implForWrapper","TypeError","makeWrapper","globalObject","undefined","Error","ctor","Object","create","prototype","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","Proxy","proxyHandler","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","SVGStringList","constructor","clear","esValue","initialize","newItem","arguments","length","args","curArg","push","getItem","index","insertItemBefore","replaceItem","removeItem","appendItem","numberOfItems","defineProperties","enumerable","Symbol","toStringTag","iterator","Array","writable","get","target","P","receiver","Reflect","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","set","getter","apply","ownKeys","keys","key","supportedPropertyIndices","add","ignoreNamedProps","isArrayIndexPropName","supportsPropertyIndex","indexedValue","tryWrapperForImpl","V","creating","indexedSetNew","indexedSetExisting","ownDesc","existingDesc","valueDesc","deleteProperty","preventExtensions"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"SVGStringList\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new TypeError(`${context} is not of type 'SVGStringList'.`);\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  const ctor = globalObject[ctorRegistrySymbol][\"SVGStringList\"];\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor SVGStringList is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper = new Proxy(wrapper, proxyHandler);\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = globalObject => {\n  let wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper = new Proxy(wrapper, proxyHandler);\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  class SVGStringList {\n    constructor() {\n      throw new TypeError(\"Illegal constructor\");\n    }\n\n    clear() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol].clear();\n    }\n\n    initialize(newItem) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\n          \"Failed to execute 'initialize' on 'SVGStringList': 1 argument required, but only \" +\n            arguments.length +\n            \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'initialize' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].initialize(...args);\n    }\n\n    getItem(index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\n          \"Failed to execute 'getItem' on 'SVGStringList': 1 argument required, but only \" +\n            arguments.length +\n            \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'getItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].getItem(...args);\n    }\n\n    insertItemBefore(newItem, index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\n          \"Failed to execute 'insertItemBefore' on 'SVGStringList': 2 arguments required, but only \" +\n            arguments.length +\n            \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'insertItemBefore' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'insertItemBefore' on 'SVGStringList': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].insertItemBefore(...args);\n    }\n\n    replaceItem(newItem, index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 2) {\n        throw new TypeError(\n          \"Failed to execute 'replaceItem' on 'SVGStringList': 2 arguments required, but only \" +\n            arguments.length +\n            \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'replaceItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'replaceItem' on 'SVGStringList': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].replaceItem(...args);\n    }\n\n    removeItem(index) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\n          \"Failed to execute 'removeItem' on 'SVGStringList': 1 argument required, but only \" +\n            arguments.length +\n            \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'removeItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].removeItem(...args);\n    }\n\n    appendItem(newItem) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\n          \"Failed to execute 'appendItem' on 'SVGStringList': 1 argument required, but only \" +\n            arguments.length +\n            \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to execute 'appendItem' on 'SVGStringList': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].appendItem(...args);\n    }\n\n    get length() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"length\"];\n    }\n\n    get numberOfItems() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"numberOfItems\"];\n    }\n  }\n  Object.defineProperties(SVGStringList.prototype, {\n    clear: { enumerable: true },\n    initialize: { enumerable: true },\n    getItem: { enumerable: true },\n    insertItemBefore: { enumerable: true },\n    replaceItem: { enumerable: true },\n    removeItem: { enumerable: true },\n    appendItem: { enumerable: true },\n    length: { enumerable: true },\n    numberOfItems: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"SVGStringList\", configurable: true },\n    [Symbol.iterator]: { value: Array.prototype[Symbol.iterator], configurable: true, writable: true }\n  });\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n  globalObject[ctorRegistrySymbol][interfaceName] = SVGStringList;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: SVGStringList\n  });\n};\n\nconst proxyHandler = {\n  get(target, P, receiver) {\n    if (typeof P === \"symbol\") {\n      return Reflect.get(target, P, receiver);\n    }\n    const desc = this.getOwnPropertyDescriptor(target, P);\n    if (desc === undefined) {\n      const parent = Object.getPrototypeOf(target);\n      if (parent === null) {\n        return undefined;\n      }\n      return Reflect.get(target, P, receiver);\n    }\n    if (!desc.get && !desc.set) {\n      return desc.value;\n    }\n    const getter = desc.get;\n    if (getter === undefined) {\n      return undefined;\n    }\n    return Reflect.apply(getter, receiver, []);\n  },\n\n  has(target, P) {\n    if (typeof P === \"symbol\") {\n      return Reflect.has(target, P);\n    }\n    const desc = this.getOwnPropertyDescriptor(target, P);\n    if (desc !== undefined) {\n      return true;\n    }\n    const parent = Object.getPrototypeOf(target);\n    if (parent !== null) {\n      return Reflect.has(parent, P);\n    }\n    return false;\n  },\n\n  ownKeys(target) {\n    const keys = new Set();\n\n    for (const key of target[implSymbol][utils.supportedPropertyIndices]) {\n      keys.add(`${key}`);\n    }\n\n    for (const key of Reflect.ownKeys(target)) {\n      keys.add(key);\n    }\n    return [...keys];\n  },\n\n  getOwnPropertyDescriptor(target, P) {\n    if (typeof P === \"symbol\") {\n      return Reflect.getOwnPropertyDescriptor(target, P);\n    }\n    let ignoreNamedProps = false;\n\n    if (utils.isArrayIndexPropName(P)) {\n      const index = P >>> 0;\n\n      if (target[implSymbol][utils.supportsPropertyIndex](index)) {\n        const indexedValue = target[implSymbol].getItem(index);\n        return {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: utils.tryWrapperForImpl(indexedValue)\n        };\n      }\n      ignoreNamedProps = true;\n    }\n\n    return Reflect.getOwnPropertyDescriptor(target, P);\n  },\n\n  set(target, P, V, receiver) {\n    if (typeof P === \"symbol\") {\n      return Reflect.set(target, P, V, receiver);\n    }\n    if (target === receiver) {\n      if (utils.isArrayIndexPropName(P)) {\n        const index = P >>> 0;\n        let indexedValue = V;\n\n        indexedValue = conversions[\"DOMString\"](indexedValue, {\n          context: \"Failed to set the \" + index + \" property on 'SVGStringList': The provided value\"\n        });\n\n        const creating = !target[implSymbol][utils.supportsPropertyIndex](index);\n        if (creating) {\n          target[implSymbol][utils.indexedSetNew](index, indexedValue);\n        } else {\n          target[implSymbol][utils.indexedSetExisting](index, indexedValue);\n        }\n\n        return true;\n      }\n    }\n    let ownDesc;\n\n    if (utils.isArrayIndexPropName(P)) {\n      const index = P >>> 0;\n\n      if (target[implSymbol][utils.supportsPropertyIndex](index)) {\n        const indexedValue = target[implSymbol].getItem(index);\n        ownDesc = {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: utils.tryWrapperForImpl(indexedValue)\n        };\n      }\n    }\n\n    if (ownDesc === undefined) {\n      ownDesc = Reflect.getOwnPropertyDescriptor(target, P);\n    }\n    if (ownDesc === undefined) {\n      const parent = Reflect.getPrototypeOf(target);\n      if (parent !== null) {\n        return Reflect.set(parent, P, V, receiver);\n      }\n      ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };\n    }\n    if (!ownDesc.writable) {\n      return false;\n    }\n    if (!utils.isObject(receiver)) {\n      return false;\n    }\n    const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);\n    let valueDesc;\n    if (existingDesc !== undefined) {\n      if (existingDesc.get || existingDesc.set) {\n        return false;\n      }\n      if (!existingDesc.writable) {\n        return false;\n      }\n      valueDesc = { value: V };\n    } else {\n      valueDesc = { writable: true, enumerable: true, configurable: true, value: V };\n    }\n    return Reflect.defineProperty(receiver, P, valueDesc);\n  },\n\n  defineProperty(target, P, desc) {\n    if (typeof P === \"symbol\") {\n      return Reflect.defineProperty(target, P, desc);\n    }\n\n    if (utils.isArrayIndexPropName(P)) {\n      if (desc.get || desc.set) {\n        return false;\n      }\n\n      const index = P >>> 0;\n      let indexedValue = desc.value;\n\n      indexedValue = conversions[\"DOMString\"](indexedValue, {\n        context: \"Failed to set the \" + index + \" property on 'SVGStringList': The provided value\"\n      });\n\n      const creating = !target[implSymbol][utils.supportsPropertyIndex](index);\n      if (creating) {\n        target[implSymbol][utils.indexedSetNew](index, indexedValue);\n      } else {\n        target[implSymbol][utils.indexedSetExisting](index, indexedValue);\n      }\n\n      return true;\n    }\n\n    return Reflect.defineProperty(target, P, desc);\n  },\n\n  deleteProperty(target, P) {\n    if (typeof P === \"symbol\") {\n      return Reflect.deleteProperty(target, P);\n    }\n\n    if (utils.isArrayIndexPropName(P)) {\n      const index = P >>> 0;\n      return !target[implSymbol][utils.supportsPropertyIndex](index);\n    }\n\n    return Reflect.deleteProperty(target, P);\n  },\n\n  preventExtensions() {\n    return false;\n  }\n};\n\nconst Impl = require(\"../svg/SVGStringList-impl.js\");\n"]},"metadata":{},"sourceType":"script"}