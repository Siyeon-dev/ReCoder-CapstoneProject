{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  stripAndCollapseASCIIWhitespace\n} = require(\"../helpers/strings\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nconst {\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n\n    return select;\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n\n  set text(value) {\n    this.textContent = value;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n\n\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n\n    return this.text;\n  }\n\n  get value() {\n    return this._getValue();\n  }\n\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n\n    this._askForAReset();\n\n    this._modified();\n  }\n\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n\n    return this.text;\n  }\n\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js"],"names":["HTMLElementImpl","require","implementation","stripAndCollapseASCIIWhitespace","domSymbolTree","closest","formOwner","HTMLOptionElementImpl","constructor","globalObject","args","privateData","_selectedness","_dirtyness","_removeOtherSelectedness","select","_selectNode","hasAttributeNS","option","options","_askForAReset","_askedForAReset","_attrModified","name","apply","arguments","parent","nodeName","toUpperCase","form","text","textContent","value","_getValue","getAttributeNS","setAttributeNS","index","indexOf","selected","s","Boolean","_modified","label","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { stripAndCollapseASCIIWhitespace } = require(\"../helpers/strings\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { formOwner } = require(\"../helpers/form-controls\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n  set text(value) {\n    this.textContent = value;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n\n    return this.text;\n  }\n\n  get value() {\n    return this._getValue();\n  }\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n    this._modified();\n  }\n\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n\n    return this.text;\n  }\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}