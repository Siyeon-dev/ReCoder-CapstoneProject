{"ast":null,"code":"/* eslint-env browser */\n\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  parseURL,\n  serializeURL,\n  serializeURLOrigin\n} = require(\"whatwg-url\");\n\nconst {\n  setupForSimpleEventAccessors\n} = require(\"../helpers/create-event-accessor\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst Blob = require(\"../generated/Blob\");\n\nconst CloseEvent = require(\"../generated/CloseEvent\");\n\nconst MessageEvent = require(\"../generated/MessageEvent\");\n\nconst productions = {\n  // https://tools.ietf.org/html/rfc7230#section-3.2.6\n  token: /^[!#$%&'*+\\-.^_`|~\\dA-Za-z]+$/\n}; // https://tools.ietf.org/html/rfc6455#section-4.3\n// See Sec-WebSocket-Protocol-Client, which is for the syntax of an entire header value. This function checks if a\n// single header conforms to the rules.\n\nfunction verifySecWebSocketProtocol(str) {\n  return productions.token.test(str);\n}\n\nconst openSockets = new WeakMap();\n\nclass WebSocketImpl extends EventTargetImpl {\n  constructor(constructorArgs, privateData) {\n    super([], privateData);\n    const {\n      window\n    } = privateData;\n    this._ownerDocument = idlUtils.implForWrapper(window._document);\n    const url = constructorArgs[0];\n    let protocols = constructorArgs[1] !== undefined ? constructorArgs[1] : [];\n    const urlRecord = parseURL(url);\n\n    if (urlRecord === null) {\n      throw DOMException.create(this._globalObject, [`The URL '${url}' is invalid.`, \"SyntaxError\"]);\n    }\n\n    if (urlRecord.scheme !== \"ws\" && urlRecord.scheme !== \"wss\") {\n      throw DOMException.create(this._globalObject, [`The URL's scheme must be either 'ws' or 'wss'. '${urlRecord.scheme}' is not allowed.`, \"SyntaxError\"]);\n    }\n\n    if (urlRecord.fragment !== null) {\n      throw DOMException.create(this._globalObject, [`The URL contains a fragment identifier ('${urlRecord.fragment}'). Fragment identifiers ` + \"are not allowed in WebSocket URLs.\", \"SyntaxError\"]);\n    }\n\n    if (typeof protocols === \"string\") {\n      protocols = [protocols];\n    }\n\n    const protocolSet = new Set();\n\n    for (const protocol of protocols) {\n      if (!verifySecWebSocketProtocol(protocol)) {\n        throw DOMException.create(this._globalObject, [`The subprotocol '${protocol}' is invalid.`, \"SyntaxError\"]);\n      }\n\n      const lowered = protocol.toLowerCase();\n\n      if (protocolSet.has(lowered)) {\n        throw DOMException.create(this._globalObject, [`The subprotocol '${protocol}' is duplicated.`, \"SyntaxError\"]);\n      }\n\n      protocolSet.add(lowered);\n    }\n\n    this._urlRecord = urlRecord;\n    this.url = serializeURL(urlRecord);\n    this._ws = new WebSocket(this.url, protocols);\n\n    this._ws.onopen = () => {\n      fireAnEvent(\"open\", this);\n    };\n\n    this._ws.onerror = () => {\n      fireAnEvent(\"error\", this);\n    };\n\n    this._ws.onclose = event => {\n      fireAnEvent(\"close\", this, CloseEvent, {\n        wasClean: event.wasClean,\n        code: event.code,\n        reason: event.reason\n      });\n    };\n\n    this._ws.onmessage = event => {\n      fireAnEvent(\"message\", this, MessageEvent, {\n        data: event.data,\n        origin: serializeURLOrigin(this._urlRecord)\n      });\n    };\n\n    let openSocketsForWindow = openSockets.get(window._globalProxy);\n\n    if (openSocketsForWindow === undefined) {\n      openSocketsForWindow = new Set();\n      openSockets.set(window._globalProxy, openSocketsForWindow);\n    }\n\n    openSocketsForWindow.add(this);\n  } // https://html.spec.whatwg.org/multipage/web-sockets.html#make-disappear\n\n\n  _makeDisappear() {\n    this._eventListeners = Object.create(null);\n\n    this._ws.close(1001);\n  }\n\n  static cleanUpWindow(window) {\n    const openSocketsForWindow = openSockets.get(window._globalProxy);\n\n    if (openSocketsForWindow !== undefined) {\n      for (const ws of openSocketsForWindow) {\n        ws._makeDisappear();\n      }\n    }\n  }\n\n  get readyState() {\n    return this._ws.readyState;\n  }\n\n  get bufferedAmount() {\n    return this._ws.bufferedAmount;\n  }\n\n  get extensions() {\n    return this._ws.extensions;\n  }\n\n  get protocol() {\n    return this._ws.protocol;\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (code !== undefined && code !== 1000 && !(code >= 3000 && code <= 4999)) {\n      throw DOMException.create(this._globalObject, [`The code must be either 1000, or between 3000 and 4999. ${code} is neither.`, \"InvalidAccessError\"]);\n    }\n\n    if (reason !== undefined && Buffer.byteLength(reason, \"utf8\") > 123) {\n      throw DOMException.create(this._globalObject, [\"The message must not be greater than 123 bytes.\", \"SyntaxError\"]);\n    }\n\n    return this._ws.close(code, reason);\n  }\n\n  get binaryType() {\n    return this._ws.binaryType;\n  }\n\n  set binaryType(val) {\n    this._ws.binaryType = val;\n  }\n\n  send(data) {\n    if (Blob.isImpl(data)) {\n      data = data._buffer;\n    }\n\n    this._ws.send(data);\n  }\n\n}\n\nsetupForSimpleEventAccessors(WebSocketImpl.prototype, [\"open\", \"message\", \"error\", \"close\"]);\nexports.implementation = WebSocketImpl;","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/websockets/WebSocket-impl-browser.js"],"names":["DOMException","require","parseURL","serializeURL","serializeURLOrigin","setupForSimpleEventAccessors","fireAnEvent","EventTargetImpl","implementation","idlUtils","Blob","CloseEvent","MessageEvent","productions","token","verifySecWebSocketProtocol","str","test","openSockets","WeakMap","WebSocketImpl","constructor","constructorArgs","privateData","window","_ownerDocument","implForWrapper","_document","url","protocols","undefined","urlRecord","create","_globalObject","scheme","fragment","protocolSet","Set","protocol","lowered","toLowerCase","has","add","_urlRecord","_ws","WebSocket","onopen","onerror","onclose","event","wasClean","code","reason","onmessage","data","origin","openSocketsForWindow","get","_globalProxy","set","_makeDisappear","_eventListeners","Object","close","cleanUpWindow","ws","readyState","bufferedAmount","extensions","Buffer","byteLength","binaryType","val","send","isImpl","_buffer","prototype","exports"],"mappings":"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","sourcesContent":["/* eslint-env browser */\n\n\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { parseURL, serializeURL, serializeURLOrigin } = require(\"whatwg-url\");\n\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\nconst { fireAnEvent } = require(\"../helpers/events\");\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\nconst Blob = require(\"../generated/Blob\");\nconst CloseEvent = require(\"../generated/CloseEvent\");\nconst MessageEvent = require(\"../generated/MessageEvent\");\n\nconst productions = {\n  // https://tools.ietf.org/html/rfc7230#section-3.2.6\n  token: /^[!#$%&'*+\\-.^_`|~\\dA-Za-z]+$/\n};\n\n// https://tools.ietf.org/html/rfc6455#section-4.3\n// See Sec-WebSocket-Protocol-Client, which is for the syntax of an entire header value. This function checks if a\n// single header conforms to the rules.\nfunction verifySecWebSocketProtocol(str) {\n  return productions.token.test(str);\n}\n\nconst openSockets = new WeakMap();\n\nclass WebSocketImpl extends EventTargetImpl {\n  constructor(constructorArgs, privateData) {\n    super([], privateData);\n    const { window } = privateData;\n    this._ownerDocument = idlUtils.implForWrapper(window._document);\n\n    const url = constructorArgs[0];\n    let protocols = constructorArgs[1] !== undefined ? constructorArgs[1] : [];\n\n    const urlRecord = parseURL(url);\n    if (urlRecord === null) {\n      throw DOMException.create(this._globalObject, [`The URL '${url}' is invalid.`, \"SyntaxError\"]);\n    }\n    if (urlRecord.scheme !== \"ws\" && urlRecord.scheme !== \"wss\") {\n      throw DOMException.create(this._globalObject, [\n        `The URL's scheme must be either 'ws' or 'wss'. '${urlRecord.scheme}' is not allowed.`,\n        \"SyntaxError\"\n      ]);\n    }\n    if (urlRecord.fragment !== null) {\n      throw DOMException.create(this._globalObject, [\n        `The URL contains a fragment identifier ('${urlRecord.fragment}'). Fragment identifiers ` +\n        \"are not allowed in WebSocket URLs.\",\n        \"SyntaxError\"\n      ]);\n    }\n\n    if (typeof protocols === \"string\") {\n      protocols = [protocols];\n    }\n    const protocolSet = new Set();\n    for (const protocol of protocols) {\n      if (!verifySecWebSocketProtocol(protocol)) {\n        throw DOMException.create(this._globalObject, [`The subprotocol '${protocol}' is invalid.`, \"SyntaxError\"]);\n      }\n      const lowered = protocol.toLowerCase();\n      if (protocolSet.has(lowered)) {\n        throw DOMException.create(this._globalObject, [\n          `The subprotocol '${protocol}' is duplicated.`,\n          \"SyntaxError\"\n        ]);\n      }\n      protocolSet.add(lowered);\n    }\n\n    this._urlRecord = urlRecord;\n    this.url = serializeURL(urlRecord);\n\n    this._ws = new WebSocket(this.url, protocols);\n\n    this._ws.onopen = () => {\n      fireAnEvent(\"open\", this);\n    };\n    this._ws.onerror = () => {\n      fireAnEvent(\"error\", this);\n    };\n    this._ws.onclose = event => {\n      fireAnEvent(\"close\", this, CloseEvent, {\n        wasClean: event.wasClean,\n        code: event.code,\n        reason: event.reason\n      });\n    };\n    this._ws.onmessage = event => {\n      fireAnEvent(\"message\", this, MessageEvent, {\n        data: event.data,\n        origin: serializeURLOrigin(this._urlRecord)\n      });\n    };\n\n    let openSocketsForWindow = openSockets.get(window._globalProxy);\n    if (openSocketsForWindow === undefined) {\n      openSocketsForWindow = new Set();\n      openSockets.set(window._globalProxy, openSocketsForWindow);\n    }\n    openSocketsForWindow.add(this);\n  }\n\n  // https://html.spec.whatwg.org/multipage/web-sockets.html#make-disappear\n  _makeDisappear() {\n    this._eventListeners = Object.create(null);\n    this._ws.close(1001);\n  }\n\n  static cleanUpWindow(window) {\n    const openSocketsForWindow = openSockets.get(window._globalProxy);\n    if (openSocketsForWindow !== undefined) {\n      for (const ws of openSocketsForWindow) {\n        ws._makeDisappear();\n      }\n    }\n  }\n\n  get readyState() {\n    return this._ws.readyState;\n  }\n\n  get bufferedAmount() {\n    return this._ws.bufferedAmount;\n  }\n\n  get extensions() {\n    return this._ws.extensions;\n  }\n\n  get protocol() {\n    return this._ws.protocol;\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (code !== undefined && code !== 1000 && !(code >= 3000 && code <= 4999)) {\n      throw DOMException.create(this._globalObject, [\n        `The code must be either 1000, or between 3000 and 4999. ${code} is neither.`,\n        \"InvalidAccessError\"\n      ]);\n    }\n    if (reason !== undefined && Buffer.byteLength(reason, \"utf8\") > 123) {\n      throw DOMException.create(this._globalObject, [\n        \"The message must not be greater than 123 bytes.\",\n        \"SyntaxError\"\n      ]);\n    }\n    return this._ws.close(code, reason);\n  }\n\n  get binaryType() {\n    return this._ws.binaryType;\n  }\n\n  set binaryType(val) {\n    this._ws.binaryType = val;\n  }\n\n  send(data) {\n    if (Blob.isImpl(data)) {\n      data = data._buffer;\n    }\n    this._ws.send(data);\n  }\n}\n\nsetupForSimpleEventAccessors(WebSocketImpl.prototype, [\"open\", \"message\", \"error\", \"close\"]);\n\nexports.implementation = WebSocketImpl;\n"]},"metadata":{},"sourceType":"script"}