{"ast":null,"code":"\"use strict\";\n\nconst xnv = require(\"xml-name-validator\");\n\nconst {\n  NAMESPACES\n} = require(\"./constants\");\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  const generatedPrefix = \"ns\" + prefixIndex;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  const candidateList = map[ns];\n\n  if (!candidateList) {\n    return null;\n  }\n\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value\n/* , requireWellFormed*/\n) {\n  if (value === null) {\n    return \"\";\n  } // TODO: Check well-formedness\n\n\n  return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n}\n\nfunction serializeAttributes(element, map, localPrefixes, ignoreNamespaceDefAttr, requireWellFormed, refs) {\n  let result = \"\";\n  const namespaceLocalnames = Object.create(null);\n\n  for (const attr of element.attributes) {\n    if (requireWellFormed && namespaceLocalnames[attr.namespaceURI] && namespaceLocalnames[attr.namespaceURI].has(attr.localName)) {\n      throw new Error(\"Found duplicated attribute\");\n    }\n\n    if (!namespaceLocalnames[attr.namespaceURI]) {\n      namespaceLocalnames[attr.namespaceURI] = new Set();\n    }\n\n    namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n    const attributeNamespace = attr.namespaceURI;\n    let candidatePrefix = null;\n\n    if (attributeNamespace !== null) {\n      candidatePrefix = preferredPrefixString(map, attributeNamespace, attr.prefix);\n\n      if (attributeNamespace === NAMESPACES.XMLNS) {\n        if (attr.value === NAMESPACES.XML || attr.prefix === null && ignoreNamespaceDefAttr || attr.prefix !== null && localPrefixes[attr.localName] !== attr.value && map[attr.value].includes(attr.localName)) {\n          continue;\n        }\n\n        if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n          throw new Error(\"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\");\n        }\n\n        if (requireWellFormed && attr.value === \"\") {\n          throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace\");\n        }\n\n        if (attr.prefix === \"xmlns\") {\n          candidatePrefix = \"xmlns\";\n        }\n      } else if (candidatePrefix === null) {\n        candidatePrefix = generatePrefix(map, attributeNamespace, refs.prefixIndex++);\n        result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(attributeNamespace, requireWellFormed)}\"`;\n      }\n    }\n\n    result += \" \";\n\n    if (candidatePrefix !== null) {\n      result += candidatePrefix + \":\";\n    }\n\n    if (requireWellFormed && (attr.localName.includes(\":\") || !xnv.name(attr.localName) || attr.localName === \"xmlns\" && attributeNamespace === null)) {\n      throw new Error(\"Invalid attribute localName value\");\n    }\n\n    result += `${attr.localName}=\"${serializeAttributeValue(attr.value, requireWellFormed)}\"`;\n  }\n\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/w3c-xmlserializer/lib/attributes.js"],"names":["xnv","require","NAMESPACES","generatePrefix","map","newNamespace","prefixIndex","generatedPrefix","preferredPrefixString","ns","preferredPrefix","candidateList","includes","length","serializeAttributeValue","value","replace","serializeAttributes","element","localPrefixes","ignoreNamespaceDefAttr","requireWellFormed","refs","result","namespaceLocalnames","Object","create","attr","attributes","namespaceURI","has","localName","Error","Set","add","attributeNamespace","candidatePrefix","prefix","XMLNS","XML","name","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst xnv = require(\"xml-name-validator\");\n\nconst { NAMESPACES } = require(\"./constants\");\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  const generatedPrefix = \"ns\" + prefixIndex;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  const candidateList = map[ns];\n  if (!candidateList) {\n    return null;\n  }\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value/* , requireWellFormed*/) {\n  if (value === null) {\n    return \"\";\n  }\n  // TODO: Check well-formedness\n  return value\n    .replace(/&/g, \"&amp;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\\t/g, \"&#x9;\")\n    .replace(/\\n/g, \"&#xA;\")\n    .replace(/\\r/g, \"&#xD;\");\n}\n\nfunction serializeAttributes(\n  element,\n  map,\n  localPrefixes,\n  ignoreNamespaceDefAttr,\n  requireWellFormed,\n  refs\n) {\n  let result = \"\";\n  const namespaceLocalnames = Object.create(null);\n  for (const attr of element.attributes) {\n    if (\n      requireWellFormed &&\n      namespaceLocalnames[attr.namespaceURI] &&\n      namespaceLocalnames[attr.namespaceURI].has(attr.localName)\n    ) {\n      throw new Error(\"Found duplicated attribute\");\n    }\n    if (!namespaceLocalnames[attr.namespaceURI]) {\n      namespaceLocalnames[attr.namespaceURI] = new Set();\n    }\n    namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n    const attributeNamespace = attr.namespaceURI;\n    let candidatePrefix = null;\n    if (attributeNamespace !== null) {\n      candidatePrefix = preferredPrefixString(\n        map,\n        attributeNamespace,\n        attr.prefix\n      );\n      if (attributeNamespace === NAMESPACES.XMLNS) {\n        if (\n          attr.value === NAMESPACES.XML ||\n          (attr.prefix === null && ignoreNamespaceDefAttr) ||\n          (attr.prefix !== null &&\n            localPrefixes[attr.localName] !== attr.value &&\n            map[attr.value].includes(attr.localName))\n        ) {\n          continue;\n        }\n        if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n          throw new Error(\n            \"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\"\n          );\n        }\n        if (requireWellFormed && attr.value === \"\") {\n          throw new Error(\n            \"Namespace prefix declarations cannot be used to undeclare a namespace\"\n          );\n        }\n        if (attr.prefix === \"xmlns\") {\n          candidatePrefix = \"xmlns\";\n        }\n      } else if (candidatePrefix === null) {\n        candidatePrefix = generatePrefix(\n          map,\n          attributeNamespace,\n          refs.prefixIndex++\n        );\n        result += ` xmlns:${candidatePrefix}=\"${serializeAttributeValue(\n          attributeNamespace,\n          requireWellFormed\n        )}\"`;\n      }\n    }\n\n    result += \" \";\n    if (candidatePrefix !== null) {\n      result += candidatePrefix + \":\";\n    }\n    if (\n      requireWellFormed &&\n      (attr.localName.includes(\":\") ||\n        !xnv.name(attr.localName) ||\n        (attr.localName === \"xmlns\" && attributeNamespace === null))\n    ) {\n      throw new Error(\"Invalid attribute localName value\");\n    }\n    result += `${attr.localName}=\"${serializeAttributeValue(\n      attr.value,\n      requireWellFormed\n    )}\"`;\n  }\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;\n"]},"metadata":{},"sourceType":"script"}