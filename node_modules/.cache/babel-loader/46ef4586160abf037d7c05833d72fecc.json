{"ast":null,"code":"/*********************************************************************\n * These are commonly used parsers for CSS Values they take a string *\n * to parse and return a string after it's been converted, if needed *\n ********************************************************************/\n'use strict';\n\nconst namedColors = require('./named_colors.json');\n\nconst {\n  hslToRgb\n} = require('./utils/colorSpace');\n\nexports.TYPES = {\n  INTEGER: 1,\n  NUMBER: 2,\n  LENGTH: 3,\n  PERCENT: 4,\n  URL: 5,\n  COLOR: 6,\n  STRING: 7,\n  ANGLE: 8,\n  KEYWORD: 9,\n  NULL_OR_EMPTY_STR: 10,\n  CALC: 11\n}; // rough regular expressions\n\nvar integerRegEx = /^[-+]?[0-9]+$/;\nvar numberRegEx = /^[-+]?[0-9]*\\.?[0-9]+$/;\nvar lengthRegEx = /^(0|[-+]?[0-9]*\\.?[0-9]+(in|cm|em|mm|pt|pc|px|ex|rem|vh|vw|ch))$/;\nvar percentRegEx = /^[-+]?[0-9]*\\.?[0-9]+%$/;\nvar urlRegEx = /^url\\(\\s*([^)]*)\\s*\\)$/;\nvar stringRegEx = /^(\"[^\"]*\"|'[^']*')$/;\nvar colorRegEx1 = /^#([0-9a-fA-F]{3,4}){1,2}$/;\nvar colorRegEx2 = /^rgb\\(([^)]*)\\)$/;\nvar colorRegEx3 = /^rgba\\(([^)]*)\\)$/;\nvar calcRegEx = /^calc\\(([^)]*)\\)$/;\nvar colorRegEx4 = /^hsla?\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*(,\\s*(-?\\d+|-?\\d*.\\d+)\\s*)?\\)/;\nvar angleRegEx = /^([-+]?[0-9]*\\.?[0-9]+)(deg|grad|rad)$/; // This will return one of the above types based on the passed in string\n\nexports.valueType = function valueType(val) {\n  if (val === '' || val === null) {\n    return exports.TYPES.NULL_OR_EMPTY_STR;\n  }\n\n  if (typeof val === 'number') {\n    val = val.toString();\n  }\n\n  if (typeof val !== 'string') {\n    return undefined;\n  }\n\n  if (integerRegEx.test(val)) {\n    return exports.TYPES.INTEGER;\n  }\n\n  if (numberRegEx.test(val)) {\n    return exports.TYPES.NUMBER;\n  }\n\n  if (lengthRegEx.test(val)) {\n    return exports.TYPES.LENGTH;\n  }\n\n  if (percentRegEx.test(val)) {\n    return exports.TYPES.PERCENT;\n  }\n\n  if (urlRegEx.test(val)) {\n    return exports.TYPES.URL;\n  }\n\n  if (calcRegEx.test(val)) {\n    return exports.TYPES.CALC;\n  }\n\n  if (stringRegEx.test(val)) {\n    return exports.TYPES.STRING;\n  }\n\n  if (angleRegEx.test(val)) {\n    return exports.TYPES.ANGLE;\n  }\n\n  if (colorRegEx1.test(val)) {\n    return exports.TYPES.COLOR;\n  }\n\n  var res = colorRegEx2.exec(val);\n  var parts;\n\n  if (res !== null) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 3) {\n      return undefined;\n    }\n\n    if (parts.every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {\n      return exports.TYPES.COLOR;\n    }\n\n    return undefined;\n  }\n\n  res = colorRegEx3.exec(val);\n\n  if (res !== null) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 4) {\n      return undefined;\n    }\n\n    if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx)) || parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {\n      if (numberRegEx.test(parts[3])) {\n        return exports.TYPES.COLOR;\n      }\n    }\n\n    return undefined;\n  }\n\n  if (colorRegEx4.test(val)) {\n    return exports.TYPES.COLOR;\n  } // could still be a color, one of the standard keyword colors\n\n\n  val = val.toLowerCase();\n\n  if (namedColors.includes(val)) {\n    return exports.TYPES.COLOR;\n  }\n\n  switch (val) {\n    // the following are deprecated in CSS3\n    case 'activeborder':\n    case 'activecaption':\n    case 'appworkspace':\n    case 'background':\n    case 'buttonface':\n    case 'buttonhighlight':\n    case 'buttonshadow':\n    case 'buttontext':\n    case 'captiontext':\n    case 'graytext':\n    case 'highlight':\n    case 'highlighttext':\n    case 'inactiveborder':\n    case 'inactivecaption':\n    case 'inactivecaptiontext':\n    case 'infobackground':\n    case 'infotext':\n    case 'menu':\n    case 'menutext':\n    case 'scrollbar':\n    case 'threeddarkshadow':\n    case 'threedface':\n    case 'threedhighlight':\n    case 'threedlightshadow':\n    case 'threedshadow':\n    case 'window':\n    case 'windowframe':\n    case 'windowtext':\n      return exports.TYPES.COLOR;\n\n    default:\n      return exports.TYPES.KEYWORD;\n  }\n};\n\nexports.parseInteger = function parseInteger(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.INTEGER) {\n    return undefined;\n  }\n\n  return String(parseInt(val, 10));\n};\n\nexports.parseNumber = function parseNumber(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.NUMBER && type !== exports.TYPES.INTEGER) {\n    return undefined;\n  }\n\n  return String(parseFloat(val));\n};\n\nexports.parseLength = function parseLength(val) {\n  if (val === 0 || val === '0') {\n    return '0px';\n  }\n\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.LENGTH) {\n    return undefined;\n  }\n\n  return val;\n};\n\nexports.parsePercent = function parsePercent(val) {\n  if (val === 0 || val === '0') {\n    return '0%';\n  }\n\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.PERCENT) {\n    return undefined;\n  }\n\n  return val;\n}; // either a length or a percent\n\n\nexports.parseMeasurement = function parseMeasurement(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.CALC) {\n    return val;\n  }\n\n  var length = exports.parseLength(val);\n\n  if (length !== undefined) {\n    return length;\n  }\n\n  return exports.parsePercent(val);\n};\n\nexports.parseUrl = function parseUrl(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  var res = urlRegEx.exec(val); // does it match the regex?\n\n  if (!res) {\n    return undefined;\n  }\n\n  var str = res[1]; // if it starts with single or double quotes, does it end with the same?\n\n  if ((str[0] === '\"' || str[0] === \"'\") && str[0] !== str[str.length - 1]) {\n    return undefined;\n  }\n\n  if (str[0] === '\"' || str[0] === \"'\") {\n    str = str.substr(1, str.length - 2);\n  }\n\n  var i;\n\n  for (i = 0; i < str.length; i++) {\n    switch (str[i]) {\n      case '(':\n      case ')':\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case \"'\":\n      case '\"':\n        return undefined;\n\n      case '\\\\':\n        i++;\n        break;\n    }\n  }\n\n  return 'url(' + str + ')';\n};\n\nexports.parseString = function parseString(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.STRING) {\n    return undefined;\n  }\n\n  var i;\n\n  for (i = 1; i < val.length - 1; i++) {\n    switch (val[i]) {\n      case val[0]:\n        return undefined;\n\n      case '\\\\':\n        i++;\n\n        while (i < val.length - 1 && /[0-9A-Fa-f]/.test(val[i])) {\n          i++;\n        }\n\n        break;\n    }\n  }\n\n  if (i >= val.length) {\n    return undefined;\n  }\n\n  return val;\n};\n\nexports.parseColor = function parseColor(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  var red,\n      green,\n      blue,\n      hue,\n      saturation,\n      lightness,\n      alpha = 1;\n  var parts;\n  var res = colorRegEx1.exec(val); // is it #aaa, #ababab, #aaaa, #abababaa\n\n  if (res) {\n    var defaultHex = val.substr(1);\n    var hex = val.substr(1);\n\n    if (hex.length === 3 || hex.length === 4) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\n      if (defaultHex.length === 4) {\n        hex = hex + defaultHex[3] + defaultHex[3];\n      }\n    }\n\n    red = parseInt(hex.substr(0, 2), 16);\n    green = parseInt(hex.substr(2, 2), 16);\n    blue = parseInt(hex.substr(4, 2), 16);\n\n    if (hex.length === 8) {\n      var hexAlpha = hex.substr(6, 2);\n      var hexAlphaToRgbaAlpha = Number((parseInt(hexAlpha, 16) / 255).toFixed(3));\n      return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + hexAlphaToRgbaAlpha + ')';\n    }\n\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n  }\n\n  res = colorRegEx2.exec(val);\n\n  if (res) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 3) {\n      return undefined;\n    }\n\n    if (parts.every(percentRegEx.test.bind(percentRegEx))) {\n      red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);\n      green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);\n      blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);\n    } else if (parts.every(integerRegEx.test.bind(integerRegEx))) {\n      red = parseInt(parts[0], 10);\n      green = parseInt(parts[1], 10);\n      blue = parseInt(parts[2], 10);\n    } else {\n      return undefined;\n    }\n\n    red = Math.min(255, Math.max(0, red));\n    green = Math.min(255, Math.max(0, green));\n    blue = Math.min(255, Math.max(0, blue));\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n  }\n\n  res = colorRegEx3.exec(val);\n\n  if (res) {\n    parts = res[1].split(/\\s*,\\s*/);\n\n    if (parts.length !== 4) {\n      return undefined;\n    }\n\n    if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx))) {\n      red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);\n      green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);\n      blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);\n      alpha = parseFloat(parts[3]);\n    } else if (parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {\n      red = parseInt(parts[0], 10);\n      green = parseInt(parts[1], 10);\n      blue = parseInt(parts[2], 10);\n      alpha = parseFloat(parts[3]);\n    } else {\n      return undefined;\n    }\n\n    if (isNaN(alpha)) {\n      alpha = 1;\n    }\n\n    red = Math.min(255, Math.max(0, red));\n    green = Math.min(255, Math.max(0, green));\n    blue = Math.min(255, Math.max(0, blue));\n    alpha = Math.min(1, Math.max(0, alpha));\n\n    if (alpha === 1) {\n      return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n    }\n\n    return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';\n  }\n\n  res = colorRegEx4.exec(val);\n\n  if (res) {\n    const [, _hue, _saturation, _lightness, _alphaString = ''] = res;\n\n    const _alpha = parseFloat(_alphaString.replace(',', '').trim());\n\n    if (!_hue || !_saturation || !_lightness) {\n      return undefined;\n    }\n\n    hue = parseFloat(_hue);\n    saturation = parseInt(_saturation, 10);\n    lightness = parseInt(_lightness, 10);\n\n    if (_alpha && numberRegEx.test(_alpha)) {\n      alpha = parseFloat(_alpha);\n    }\n\n    const [r, g, b] = hslToRgb(hue, saturation / 100, lightness / 100);\n\n    if (!_alphaString || alpha === 1) {\n      return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n    }\n\n    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';\n  }\n\n  if (type === exports.TYPES.COLOR) {\n    return val;\n  }\n\n  return undefined;\n};\n\nexports.parseAngle = function parseAngle(val) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.ANGLE) {\n    return undefined;\n  }\n\n  var res = angleRegEx.exec(val);\n  var flt = parseFloat(res[1]);\n\n  if (res[2] === 'rad') {\n    flt *= 180 / Math.PI;\n  } else if (res[2] === 'grad') {\n    flt *= 360 / 400;\n  }\n\n  while (flt < 0) {\n    flt += 360;\n  }\n\n  while (flt > 360) {\n    flt -= 360;\n  }\n\n  return flt + 'deg';\n};\n\nexports.parseKeyword = function parseKeyword(val, valid_keywords) {\n  var type = exports.valueType(val);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n\n  if (type !== exports.TYPES.KEYWORD) {\n    return undefined;\n  }\n\n  val = val.toString().toLowerCase();\n  var i;\n\n  for (i = 0; i < valid_keywords.length; i++) {\n    if (valid_keywords[i].toLowerCase() === val) {\n      return valid_keywords[i];\n    }\n  }\n\n  return undefined;\n}; // utility to translate from border-width to borderWidth\n\n\nvar dashedToCamelCase = function (dashed) {\n  var i;\n  var camel = '';\n  var nextCap = false;\n\n  for (i = 0; i < dashed.length; i++) {\n    if (dashed[i] !== '-') {\n      camel += nextCap ? dashed[i].toUpperCase() : dashed[i];\n      nextCap = false;\n    } else {\n      nextCap = true;\n    }\n  }\n\n  return camel;\n};\n\nexports.dashedToCamelCase = dashedToCamelCase;\nvar is_space = /\\s/;\nvar opening_deliminators = ['\"', \"'\", '('];\nvar closing_deliminators = ['\"', \"'\", ')']; // this splits on whitespace, but keeps quoted and parened parts together\n\nvar getParts = function (str) {\n  var deliminator_stack = [];\n  var length = str.length;\n  var i;\n  var parts = [];\n  var current_part = '';\n  var opening_index;\n  var closing_index;\n\n  for (i = 0; i < length; i++) {\n    opening_index = opening_deliminators.indexOf(str[i]);\n    closing_index = closing_deliminators.indexOf(str[i]);\n\n    if (is_space.test(str[i])) {\n      if (deliminator_stack.length === 0) {\n        if (current_part !== '') {\n          parts.push(current_part);\n        }\n\n        current_part = '';\n      } else {\n        current_part += str[i];\n      }\n    } else {\n      if (str[i] === '\\\\') {\n        i++;\n        current_part += str[i];\n      } else {\n        current_part += str[i];\n\n        if (closing_index !== -1 && closing_index === deliminator_stack[deliminator_stack.length - 1]) {\n          deliminator_stack.pop();\n        } else if (opening_index !== -1) {\n          deliminator_stack.push(opening_index);\n        }\n      }\n    }\n  }\n\n  if (current_part !== '') {\n    parts.push(current_part);\n  }\n\n  return parts;\n};\n/*\n * this either returns undefined meaning that it isn't valid\n * or returns an object where the keys are dashed short\n * hand properties and the values are the values to set\n * on them\n */\n\n\nexports.shorthandParser = function parse(v, shorthand_for) {\n  var obj = {};\n  var type = exports.valueType(v);\n\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    Object.keys(shorthand_for).forEach(function (property) {\n      obj[property] = '';\n    });\n    return obj;\n  }\n\n  if (typeof v === 'number') {\n    v = v.toString();\n  }\n\n  if (typeof v !== 'string') {\n    return undefined;\n  }\n\n  if (v.toLowerCase() === 'inherit') {\n    return {};\n  }\n\n  var parts = getParts(v);\n  var valid = true;\n  parts.forEach(function (part, i) {\n    var part_valid = false;\n    Object.keys(shorthand_for).forEach(function (property) {\n      if (shorthand_for[property].isValid(part, i)) {\n        part_valid = true;\n        obj[property] = part;\n      }\n    });\n    valid = valid && part_valid;\n  });\n\n  if (!valid) {\n    return undefined;\n  }\n\n  return obj;\n};\n\nexports.shorthandSetter = function (property, shorthand_for) {\n  return function (v) {\n    var obj = exports.shorthandParser(v, shorthand_for);\n\n    if (obj === undefined) {\n      return;\n    } //console.log('shorthandSetter for:', property, 'obj:', obj);\n\n\n    Object.keys(obj).forEach(function (subprop) {\n      // in case subprop is an implicit property, this will clear\n      // *its* subpropertiesX\n      var camel = dashedToCamelCase(subprop);\n      this[camel] = obj[subprop]; // in case it gets translated into something else (0 -> 0px)\n\n      obj[subprop] = this[camel];\n      this.removeProperty(subprop); // don't add in empty properties\n\n      if (obj[subprop] !== '') {\n        this._values[subprop] = obj[subprop];\n      }\n    }, this);\n    Object.keys(shorthand_for).forEach(function (subprop) {\n      if (!obj.hasOwnProperty(subprop)) {\n        this.removeProperty(subprop);\n        delete this._values[subprop];\n      }\n    }, this); // in case the value is something like 'none' that removes all values,\n    // check that the generated one is not empty, first remove the property\n    // if it already exists, then call the shorthandGetter, if it's an empty\n    // string, don't set the property\n\n    this.removeProperty(property);\n    var calculated = exports.shorthandGetter(property, shorthand_for).call(this);\n\n    if (calculated !== '') {\n      this._setProperty(property, calculated);\n    }\n  };\n};\n\nexports.shorthandGetter = function (property, shorthand_for) {\n  return function () {\n    if (this._values[property] !== undefined) {\n      return this.getPropertyValue(property);\n    }\n\n    return Object.keys(shorthand_for).map(function (subprop) {\n      return this.getPropertyValue(subprop);\n    }, this).filter(function (value) {\n      return value !== '';\n    }).join(' ');\n  };\n}; // isValid(){1,4} | inherit\n// if one, it applies to all\n// if two, the first applies to the top and bottom, and the second to left and right\n// if three, the first applies to the top, the second to left and right, the third bottom\n// if four, top, right, bottom, left\n\n\nexports.implicitSetter = function (property_before, property_after, isValid, parser) {\n  property_after = property_after || '';\n\n  if (property_after !== '') {\n    property_after = '-' + property_after;\n  }\n\n  var part_names = ['top', 'right', 'bottom', 'left'];\n  return function (v) {\n    if (typeof v === 'number') {\n      v = v.toString();\n    }\n\n    if (typeof v !== 'string') {\n      return undefined;\n    }\n\n    var parts;\n\n    if (v.toLowerCase() === 'inherit' || v === '') {\n      parts = [v];\n    } else {\n      parts = getParts(v);\n    }\n\n    if (parts.length < 1 || parts.length > 4) {\n      return undefined;\n    }\n\n    if (!parts.every(isValid)) {\n      return undefined;\n    }\n\n    parts = parts.map(function (part) {\n      return parser(part);\n    });\n\n    this._setProperty(property_before + property_after, parts.join(' '));\n\n    if (parts.length === 1) {\n      parts[1] = parts[0];\n    }\n\n    if (parts.length === 2) {\n      parts[2] = parts[0];\n    }\n\n    if (parts.length === 3) {\n      parts[3] = parts[1];\n    }\n\n    for (var i = 0; i < 4; i++) {\n      var property = property_before + '-' + part_names[i] + property_after;\n      this.removeProperty(property);\n\n      if (parts[i] !== '') {\n        this._values[property] = parts[i];\n      }\n    }\n\n    return v;\n  };\n}; //\n//  Companion to implicitSetter, but for the individual parts.\n//  This sets the individual value, and checks to see if all four\n//  sub-parts are set.  If so, it sets the shorthand version and removes\n//  the individual parts from the cssText.\n//\n\n\nexports.subImplicitSetter = function (prefix, part, isValid, parser) {\n  var property = prefix + '-' + part;\n  var subparts = [prefix + '-top', prefix + '-right', prefix + '-bottom', prefix + '-left'];\n  return function (v) {\n    if (typeof v === 'number') {\n      v = v.toString();\n    }\n\n    if (typeof v !== 'string') {\n      return undefined;\n    }\n\n    if (!isValid(v)) {\n      return undefined;\n    }\n\n    v = parser(v);\n\n    this._setProperty(property, v);\n\n    var parts = [];\n\n    for (var i = 0; i < 4; i++) {\n      if (this._values[subparts[i]] == null || this._values[subparts[i]] === '') {\n        break;\n      }\n\n      parts.push(this._values[subparts[i]]);\n    }\n\n    if (parts.length === 4) {\n      for (i = 0; i < 4; i++) {\n        this.removeProperty(subparts[i]);\n        this._values[subparts[i]] = parts[i];\n      }\n\n      this._setProperty(prefix, parts.join(' '));\n    }\n\n    return v;\n  };\n};\n\nvar camel_to_dashed = /[A-Z]/g;\nvar first_segment = /^\\([^-]\\)-/;\nvar vendor_prefixes = ['o', 'moz', 'ms', 'webkit'];\n\nexports.camelToDashed = function (camel_case) {\n  var match;\n  var dashed = camel_case.replace(camel_to_dashed, '-$&').toLowerCase();\n  match = dashed.match(first_segment);\n\n  if (match && vendor_prefixes.indexOf(match[1]) !== -1) {\n    dashed = '-' + dashed;\n  }\n\n  return dashed;\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/cssstyle/lib/parsers.js"],"names":["namedColors","require","hslToRgb","exports","TYPES","INTEGER","NUMBER","LENGTH","PERCENT","URL","COLOR","STRING","ANGLE","KEYWORD","NULL_OR_EMPTY_STR","CALC","integerRegEx","numberRegEx","lengthRegEx","percentRegEx","urlRegEx","stringRegEx","colorRegEx1","colorRegEx2","colorRegEx3","calcRegEx","colorRegEx4","angleRegEx","valueType","val","toString","undefined","test","res","exec","parts","split","length","every","bind","slice","toLowerCase","includes","parseInteger","type","String","parseInt","parseNumber","parseFloat","parseLength","parsePercent","parseMeasurement","parseUrl","str","substr","i","parseString","parseColor","red","green","blue","hue","saturation","lightness","alpha","defaultHex","hex","hexAlpha","hexAlphaToRgbaAlpha","Number","toFixed","Math","floor","min","max","isNaN","_hue","_saturation","_lightness","_alphaString","_alpha","replace","trim","r","g","b","parseAngle","flt","PI","parseKeyword","valid_keywords","dashedToCamelCase","dashed","camel","nextCap","toUpperCase","is_space","opening_deliminators","closing_deliminators","getParts","deliminator_stack","current_part","opening_index","closing_index","indexOf","push","pop","shorthandParser","parse","v","shorthand_for","obj","Object","keys","forEach","property","valid","part","part_valid","isValid","shorthandSetter","subprop","removeProperty","_values","hasOwnProperty","calculated","shorthandGetter","call","_setProperty","getPropertyValue","map","filter","value","join","implicitSetter","property_before","property_after","parser","part_names","subImplicitSetter","prefix","subparts","camel_to_dashed","first_segment","vendor_prefixes","camelToDashed","camel_case","match"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,oBAAD,CAA5B;;AAEAE,OAAO,CAACC,KAAR,GAAgB;AACdC,EAAAA,OAAO,EAAE,CADK;AAEdC,EAAAA,MAAM,EAAE,CAFM;AAGdC,EAAAA,MAAM,EAAE,CAHM;AAIdC,EAAAA,OAAO,EAAE,CAJK;AAKdC,EAAAA,GAAG,EAAE,CALS;AAMdC,EAAAA,KAAK,EAAE,CANO;AAOdC,EAAAA,MAAM,EAAE,CAPM;AAQdC,EAAAA,KAAK,EAAE,CARO;AASdC,EAAAA,OAAO,EAAE,CATK;AAUdC,EAAAA,iBAAiB,EAAE,EAVL;AAWdC,EAAAA,IAAI,EAAE;AAXQ,CAAhB,C,CAcA;;AACA,IAAIC,YAAY,GAAG,eAAnB;AACA,IAAIC,WAAW,GAAG,wBAAlB;AACA,IAAIC,WAAW,GAAG,kEAAlB;AACA,IAAIC,YAAY,GAAG,yBAAnB;AACA,IAAIC,QAAQ,GAAG,wBAAf;AACA,IAAIC,WAAW,GAAG,qBAAlB;AACA,IAAIC,WAAW,GAAG,4BAAlB;AACA,IAAIC,WAAW,GAAG,kBAAlB;AACA,IAAIC,WAAW,GAAG,mBAAlB;AACA,IAAIC,SAAS,GAAG,mBAAhB;AACA,IAAIC,WAAW,GAAG,gHAAlB;AACA,IAAIC,UAAU,GAAG,wCAAjB,C,CAEA;;AACAxB,OAAO,CAACyB,SAAR,GAAoB,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AAC1C,MAAIA,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAK,IAA1B,EAAgC;AAC9B,WAAO1B,OAAO,CAACC,KAAR,CAAcU,iBAArB;AACD;;AACD,MAAI,OAAOe,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGA,GAAG,CAACC,QAAJ,EAAN;AACD;;AAED,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOE,SAAP;AACD;;AAED,MAAIf,YAAY,CAACgB,IAAb,CAAkBH,GAAlB,CAAJ,EAA4B;AAC1B,WAAO1B,OAAO,CAACC,KAAR,CAAcC,OAArB;AACD;;AACD,MAAIY,WAAW,CAACe,IAAZ,CAAiBH,GAAjB,CAAJ,EAA2B;AACzB,WAAO1B,OAAO,CAACC,KAAR,CAAcE,MAArB;AACD;;AACD,MAAIY,WAAW,CAACc,IAAZ,CAAiBH,GAAjB,CAAJ,EAA2B;AACzB,WAAO1B,OAAO,CAACC,KAAR,CAAcG,MAArB;AACD;;AACD,MAAIY,YAAY,CAACa,IAAb,CAAkBH,GAAlB,CAAJ,EAA4B;AAC1B,WAAO1B,OAAO,CAACC,KAAR,CAAcI,OAArB;AACD;;AACD,MAAIY,QAAQ,CAACY,IAAT,CAAcH,GAAd,CAAJ,EAAwB;AACtB,WAAO1B,OAAO,CAACC,KAAR,CAAcK,GAArB;AACD;;AACD,MAAIgB,SAAS,CAACO,IAAV,CAAeH,GAAf,CAAJ,EAAyB;AACvB,WAAO1B,OAAO,CAACC,KAAR,CAAcW,IAArB;AACD;;AACD,MAAIM,WAAW,CAACW,IAAZ,CAAiBH,GAAjB,CAAJ,EAA2B;AACzB,WAAO1B,OAAO,CAACC,KAAR,CAAcO,MAArB;AACD;;AACD,MAAIgB,UAAU,CAACK,IAAX,CAAgBH,GAAhB,CAAJ,EAA0B;AACxB,WAAO1B,OAAO,CAACC,KAAR,CAAcQ,KAArB;AACD;;AACD,MAAIU,WAAW,CAACU,IAAZ,CAAiBH,GAAjB,CAAJ,EAA2B;AACzB,WAAO1B,OAAO,CAACC,KAAR,CAAcM,KAArB;AACD;;AAED,MAAIuB,GAAG,GAAGV,WAAW,CAACW,IAAZ,CAAiBL,GAAjB,CAAV;AACA,MAAIM,KAAJ;;AACA,MAAIF,GAAG,KAAK,IAAZ,EAAkB;AAChBE,IAAAA,KAAK,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,CAAR;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAON,SAAP;AACD;;AACD,QACEI,KAAK,CAACG,KAAN,CAAYnB,YAAY,CAACa,IAAb,CAAkBO,IAAlB,CAAuBpB,YAAvB,CAAZ,KACAgB,KAAK,CAACG,KAAN,CAAYtB,YAAY,CAACgB,IAAb,CAAkBO,IAAlB,CAAuBvB,YAAvB,CAAZ,CAFF,EAGE;AACA,aAAOb,OAAO,CAACC,KAAR,CAAcM,KAArB;AACD;;AACD,WAAOqB,SAAP;AACD;;AACDE,EAAAA,GAAG,GAAGT,WAAW,CAACU,IAAZ,CAAiBL,GAAjB,CAAN;;AACA,MAAII,GAAG,KAAK,IAAZ,EAAkB;AAChBE,IAAAA,KAAK,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,CAAR;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAON,SAAP;AACD;;AACD,QACEI,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBF,KAAlB,CAAwBnB,YAAY,CAACa,IAAb,CAAkBO,IAAlB,CAAuBpB,YAAvB,CAAxB,KACAgB,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBF,KAAlB,CAAwBtB,YAAY,CAACgB,IAAb,CAAkBO,IAAlB,CAAuBvB,YAAvB,CAAxB,CAFF,EAGE;AACA,UAAIC,WAAW,CAACe,IAAZ,CAAiBG,KAAK,CAAC,CAAD,CAAtB,CAAJ,EAAgC;AAC9B,eAAOhC,OAAO,CAACC,KAAR,CAAcM,KAArB;AACD;AACF;;AACD,WAAOqB,SAAP;AACD;;AAED,MAAIL,WAAW,CAACM,IAAZ,CAAiBH,GAAjB,CAAJ,EAA2B;AACzB,WAAO1B,OAAO,CAACC,KAAR,CAAcM,KAArB;AACD,GA1EyC,CA4E1C;;;AACAmB,EAAAA,GAAG,GAAGA,GAAG,CAACY,WAAJ,EAAN;;AAEA,MAAIzC,WAAW,CAAC0C,QAAZ,CAAqBb,GAArB,CAAJ,EAA+B;AAC7B,WAAO1B,OAAO,CAACC,KAAR,CAAcM,KAArB;AACD;;AAED,UAAQmB,GAAR;AACE;AACA,SAAK,cAAL;AACA,SAAK,eAAL;AACA,SAAK,cAAL;AACA,SAAK,YAAL;AACA,SAAK,YAAL;AACA,SAAK,iBAAL;AACA,SAAK,cAAL;AACA,SAAK,YAAL;AACA,SAAK,aAAL;AACA,SAAK,UAAL;AACA,SAAK,WAAL;AACA,SAAK,eAAL;AACA,SAAK,gBAAL;AACA,SAAK,iBAAL;AACA,SAAK,qBAAL;AACA,SAAK,gBAAL;AACA,SAAK,UAAL;AACA,SAAK,MAAL;AACA,SAAK,UAAL;AACA,SAAK,WAAL;AACA,SAAK,kBAAL;AACA,SAAK,YAAL;AACA,SAAK,iBAAL;AACA,SAAK,mBAAL;AACA,SAAK,cAAL;AACA,SAAK,QAAL;AACA,SAAK,aAAL;AACA,SAAK,YAAL;AACE,aAAO1B,OAAO,CAACC,KAAR,CAAcM,KAArB;;AACF;AACE,aAAOP,OAAO,CAACC,KAAR,CAAcS,OAArB;AAhCJ;AAkCD,CArHD;;AAuHAV,OAAO,CAACwC,YAAR,GAAuB,SAASA,YAAT,CAAsBd,GAAtB,EAA2B;AAChD,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcC,OAA3B,EAAoC;AAClC,WAAO0B,SAAP;AACD;;AACD,SAAOc,MAAM,CAACC,QAAQ,CAACjB,GAAD,EAAM,EAAN,CAAT,CAAb;AACD,CATD;;AAWA1B,OAAO,CAAC4C,WAAR,GAAsB,SAASA,WAAT,CAAqBlB,GAArB,EAA0B;AAC9C,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcE,MAAvB,IAAiCsC,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcC,OAA5D,EAAqE;AACnE,WAAO0B,SAAP;AACD;;AACD,SAAOc,MAAM,CAACG,UAAU,CAACnB,GAAD,CAAX,CAAb;AACD,CATD;;AAWA1B,OAAO,CAAC8C,WAAR,GAAsB,SAASA,WAAT,CAAqBpB,GAArB,EAA0B;AAC9C,MAAIA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,GAAzB,EAA8B;AAC5B,WAAO,KAAP;AACD;;AACD,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcG,MAA3B,EAAmC;AACjC,WAAOwB,SAAP;AACD;;AACD,SAAOF,GAAP;AACD,CAZD;;AAcA1B,OAAO,CAAC+C,YAAR,GAAuB,SAASA,YAAT,CAAsBrB,GAAtB,EAA2B;AAChD,MAAIA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,GAAzB,EAA8B;AAC5B,WAAO,IAAP;AACD;;AACD,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcI,OAA3B,EAAoC;AAClC,WAAOuB,SAAP;AACD;;AACD,SAAOF,GAAP;AACD,CAZD,C,CAcA;;;AACA1B,OAAO,CAACgD,gBAAR,GAA2B,SAASA,gBAAT,CAA0BtB,GAA1B,EAA+B;AACxD,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcW,IAA3B,EAAiC;AAC/B,WAAOc,GAAP;AACD;;AAED,MAAIQ,MAAM,GAAGlC,OAAO,CAAC8C,WAAR,CAAoBpB,GAApB,CAAb;;AACA,MAAIQ,MAAM,KAAKN,SAAf,EAA0B;AACxB,WAAOM,MAAP;AACD;;AACD,SAAOlC,OAAO,CAAC+C,YAAR,CAAqBrB,GAArB,CAAP;AACD,CAXD;;AAaA1B,OAAO,CAACiD,QAAR,GAAmB,SAASA,QAAT,CAAkBvB,GAAlB,EAAuB;AACxC,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAII,GAAG,GAAGb,QAAQ,CAACc,IAAT,CAAcL,GAAd,CAAV,CALwC,CAMxC;;AACA,MAAI,CAACI,GAAL,EAAU;AACR,WAAOF,SAAP;AACD;;AACD,MAAIsB,GAAG,GAAGpB,GAAG,CAAC,CAAD,CAAb,CAVwC,CAWxC;;AACA,MAAI,CAACoB,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAA9B,KAAsCA,GAAG,CAAC,CAAD,CAAH,KAAWA,GAAG,CAACA,GAAG,CAAChB,MAAJ,GAAa,CAAd,CAAxD,EAA0E;AACxE,WAAON,SAAP;AACD;;AACD,MAAIsB,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAjC,EAAsC;AACpCA,IAAAA,GAAG,GAAGA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcD,GAAG,CAAChB,MAAJ,GAAa,CAA3B,CAAN;AACD;;AAED,MAAIkB,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,GAAG,CAAChB,MAApB,EAA4BkB,CAAC,EAA7B,EAAiC;AAC/B,YAAQF,GAAG,CAACE,CAAD,CAAX;AACE,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,GAAL;AACA,WAAK,GAAL;AACE,eAAOxB,SAAP;;AACF,WAAK,IAAL;AACEwB,QAAAA,CAAC;AACD;AAXJ;AAaD;;AAED,SAAO,SAASF,GAAT,GAAe,GAAtB;AACD,CArCD;;AAuCAlD,OAAO,CAACqD,WAAR,GAAsB,SAASA,WAAT,CAAqB3B,GAArB,EAA0B;AAC9C,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcO,MAA3B,EAAmC;AACjC,WAAOoB,SAAP;AACD;;AACD,MAAIwB,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG1B,GAAG,CAACQ,MAAJ,GAAa,CAA7B,EAAgCkB,CAAC,EAAjC,EAAqC;AACnC,YAAQ1B,GAAG,CAAC0B,CAAD,CAAX;AACE,WAAK1B,GAAG,CAAC,CAAD,CAAR;AACE,eAAOE,SAAP;;AACF,WAAK,IAAL;AACEwB,QAAAA,CAAC;;AACD,eAAOA,CAAC,GAAG1B,GAAG,CAACQ,MAAJ,GAAa,CAAjB,IAAsB,cAAcL,IAAd,CAAmBH,GAAG,CAAC0B,CAAD,CAAtB,CAA7B,EAAyD;AACvDA,UAAAA,CAAC;AACF;;AACD;AARJ;AAUD;;AACD,MAAIA,CAAC,IAAI1B,GAAG,CAACQ,MAAb,EAAqB;AACnB,WAAON,SAAP;AACD;;AACD,SAAOF,GAAP;AACD,CAzBD;;AA2BA1B,OAAO,CAACsD,UAAR,GAAqB,SAASA,UAAT,CAAoB5B,GAApB,EAAyB;AAC5C,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAI6B,GAAJ;AAAA,MACEC,KADF;AAAA,MAEEC,IAFF;AAAA,MAGEC,GAHF;AAAA,MAIEC,UAJF;AAAA,MAKEC,SALF;AAAA,MAMEC,KAAK,GAAG,CANV;AAOA,MAAI7B,KAAJ;AACA,MAAIF,GAAG,GAAGX,WAAW,CAACY,IAAZ,CAAiBL,GAAjB,CAAV,CAb4C,CAc5C;;AACA,MAAII,GAAJ,EAAS;AACP,QAAIgC,UAAU,GAAGpC,GAAG,CAACyB,MAAJ,CAAW,CAAX,CAAjB;AACA,QAAIY,GAAG,GAAGrC,GAAG,CAACyB,MAAJ,CAAW,CAAX,CAAV;;AACA,QAAIY,GAAG,CAAC7B,MAAJ,KAAe,CAAf,IAAoB6B,GAAG,CAAC7B,MAAJ,KAAe,CAAvC,EAA0C;AACxC6B,MAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ,GAAkBA,GAAG,CAAC,CAAD,CAArB,GAA2BA,GAAG,CAAC,CAAD,CAA9B,GAAoCA,GAAG,CAAC,CAAD,CAAvC,GAA6CA,GAAG,CAAC,CAAD,CAAtD;;AAEA,UAAID,UAAU,CAAC5B,MAAX,KAAsB,CAA1B,EAA6B;AAC3B6B,QAAAA,GAAG,GAAGA,GAAG,GAAGD,UAAU,CAAC,CAAD,CAAhB,GAAsBA,UAAU,CAAC,CAAD,CAAtC;AACD;AACF;;AACDP,IAAAA,GAAG,GAAGZ,QAAQ,CAACoB,GAAG,CAACZ,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAd;AACAK,IAAAA,KAAK,GAAGb,QAAQ,CAACoB,GAAG,CAACZ,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAhB;AACAM,IAAAA,IAAI,GAAGd,QAAQ,CAACoB,GAAG,CAACZ,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAf;;AACA,QAAIY,GAAG,CAAC7B,MAAJ,KAAe,CAAnB,EAAsB;AACpB,UAAI8B,QAAQ,GAAGD,GAAG,CAACZ,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAf;AACA,UAAIc,mBAAmB,GAAGC,MAAM,CAAC,CAACvB,QAAQ,CAACqB,QAAD,EAAW,EAAX,CAAR,GAAyB,GAA1B,EAA+BG,OAA/B,CAAuC,CAAvC,CAAD,CAAhC;AAEA,aAAO,UAAUZ,GAAV,GAAgB,IAAhB,GAAuBC,KAAvB,GAA+B,IAA/B,GAAsCC,IAAtC,GAA6C,IAA7C,GAAoDQ,mBAApD,GAA0E,GAAjF;AACD;;AACD,WAAO,SAASV,GAAT,GAAe,IAAf,GAAsBC,KAAtB,GAA8B,IAA9B,GAAqCC,IAArC,GAA4C,GAAnD;AACD;;AAED3B,EAAAA,GAAG,GAAGV,WAAW,CAACW,IAAZ,CAAiBL,GAAjB,CAAN;;AACA,MAAII,GAAJ,EAAS;AACPE,IAAAA,KAAK,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,CAAR;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAON,SAAP;AACD;;AACD,QAAII,KAAK,CAACG,KAAN,CAAYnB,YAAY,CAACa,IAAb,CAAkBO,IAAlB,CAAuBpB,YAAvB,CAAZ,CAAJ,EAAuD;AACrDuC,MAAAA,GAAG,GAAGa,IAAI,CAACC,KAAL,CAAYxB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAD,CAAV,GAAoC,GAArC,GAA4C,GAAvD,CAAN;AACAmB,MAAAA,KAAK,GAAGY,IAAI,CAACC,KAAL,CAAYxB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAD,CAAV,GAAoC,GAArC,GAA4C,GAAvD,CAAR;AACAoB,MAAAA,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAYxB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAD,CAAV,GAAoC,GAArC,GAA4C,GAAvD,CAAP;AACD,KAJD,MAIO,IAAIL,KAAK,CAACG,KAAN,CAAYtB,YAAY,CAACgB,IAAb,CAAkBO,IAAlB,CAAuBvB,YAAvB,CAAZ,CAAJ,EAAuD;AAC5D0C,MAAAA,GAAG,GAAGZ,QAAQ,CAACX,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAd;AACAwB,MAAAA,KAAK,GAAGb,QAAQ,CAACX,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAhB;AACAyB,MAAAA,IAAI,GAAGd,QAAQ,CAACX,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAf;AACD,KAJM,MAIA;AACL,aAAOJ,SAAP;AACD;;AACD2B,IAAAA,GAAG,GAAGa,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYhB,GAAZ,CAAd,CAAN;AACAC,IAAAA,KAAK,GAAGY,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYf,KAAZ,CAAd,CAAR;AACAC,IAAAA,IAAI,GAAGW,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYd,IAAZ,CAAd,CAAP;AACA,WAAO,SAASF,GAAT,GAAe,IAAf,GAAsBC,KAAtB,GAA8B,IAA9B,GAAqCC,IAArC,GAA4C,GAAnD;AACD;;AAED3B,EAAAA,GAAG,GAAGT,WAAW,CAACU,IAAZ,CAAiBL,GAAjB,CAAN;;AACA,MAAII,GAAJ,EAAS;AACPE,IAAAA,KAAK,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,CAAR;;AACA,QAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAON,SAAP;AACD;;AACD,QAAII,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBF,KAAlB,CAAwBnB,YAAY,CAACa,IAAb,CAAkBO,IAAlB,CAAuBpB,YAAvB,CAAxB,CAAJ,EAAmE;AACjEuC,MAAAA,GAAG,GAAGa,IAAI,CAACC,KAAL,CAAYxB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAD,CAAV,GAAoC,GAArC,GAA4C,GAAvD,CAAN;AACAmB,MAAAA,KAAK,GAAGY,IAAI,CAACC,KAAL,CAAYxB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAD,CAAV,GAAoC,GAArC,GAA4C,GAAvD,CAAR;AACAoB,MAAAA,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAYxB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAD,CAAV,GAAoC,GAArC,GAA4C,GAAvD,CAAP;AACAwB,MAAAA,KAAK,GAAGhB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAN,CAAlB;AACD,KALD,MAKO,IAAIA,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBF,KAAlB,CAAwBtB,YAAY,CAACgB,IAAb,CAAkBO,IAAlB,CAAuBvB,YAAvB,CAAxB,CAAJ,EAAmE;AACxE0C,MAAAA,GAAG,GAAGZ,QAAQ,CAACX,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAd;AACAwB,MAAAA,KAAK,GAAGb,QAAQ,CAACX,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAhB;AACAyB,MAAAA,IAAI,GAAGd,QAAQ,CAACX,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAf;AACA6B,MAAAA,KAAK,GAAGhB,UAAU,CAACb,KAAK,CAAC,CAAD,CAAN,CAAlB;AACD,KALM,MAKA;AACL,aAAOJ,SAAP;AACD;;AACD,QAAI4C,KAAK,CAACX,KAAD,CAAT,EAAkB;AAChBA,MAAAA,KAAK,GAAG,CAAR;AACD;;AACDN,IAAAA,GAAG,GAAGa,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYhB,GAAZ,CAAd,CAAN;AACAC,IAAAA,KAAK,GAAGY,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYf,KAAZ,CAAd,CAAR;AACAC,IAAAA,IAAI,GAAGW,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYd,IAAZ,CAAd,CAAP;AACAI,IAAAA,KAAK,GAAGO,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYF,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYV,KAAZ,CAAZ,CAAR;;AACA,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO,SAASN,GAAT,GAAe,IAAf,GAAsBC,KAAtB,GAA8B,IAA9B,GAAqCC,IAArC,GAA4C,GAAnD;AACD;;AACD,WAAO,UAAUF,GAAV,GAAgB,IAAhB,GAAuBC,KAAvB,GAA+B,IAA/B,GAAsCC,IAAtC,GAA6C,IAA7C,GAAoDI,KAApD,GAA4D,GAAnE;AACD;;AAED/B,EAAAA,GAAG,GAAGP,WAAW,CAACQ,IAAZ,CAAiBL,GAAjB,CAAN;;AACA,MAAII,GAAJ,EAAS;AACP,UAAM,GAAG2C,IAAH,EAASC,WAAT,EAAsBC,UAAtB,EAAkCC,YAAY,GAAG,EAAjD,IAAuD9C,GAA7D;;AACA,UAAM+C,MAAM,GAAGhC,UAAU,CAAC+B,YAAY,CAACE,OAAb,CAAqB,GAArB,EAA0B,EAA1B,EAA8BC,IAA9B,EAAD,CAAzB;;AACA,QAAI,CAACN,IAAD,IAAS,CAACC,WAAV,IAAyB,CAACC,UAA9B,EAA0C;AACxC,aAAO/C,SAAP;AACD;;AACD8B,IAAAA,GAAG,GAAGb,UAAU,CAAC4B,IAAD,CAAhB;AACAd,IAAAA,UAAU,GAAGhB,QAAQ,CAAC+B,WAAD,EAAc,EAAd,CAArB;AACAd,IAAAA,SAAS,GAAGjB,QAAQ,CAACgC,UAAD,EAAa,EAAb,CAApB;;AACA,QAAIE,MAAM,IAAI/D,WAAW,CAACe,IAAZ,CAAiBgD,MAAjB,CAAd,EAAwC;AACtChB,MAAAA,KAAK,GAAGhB,UAAU,CAACgC,MAAD,CAAlB;AACD;;AAED,UAAM,CAACG,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYnF,QAAQ,CAAC2D,GAAD,EAAMC,UAAU,GAAG,GAAnB,EAAwBC,SAAS,GAAG,GAApC,CAA1B;;AACA,QAAI,CAACgB,YAAD,IAAiBf,KAAK,KAAK,CAA/B,EAAkC;AAChC,aAAO,SAASmB,CAAT,GAAa,IAAb,GAAoBC,CAApB,GAAwB,IAAxB,GAA+BC,CAA/B,GAAmC,GAA1C;AACD;;AACD,WAAO,UAAUF,CAAV,GAAc,IAAd,GAAqBC,CAArB,GAAyB,IAAzB,GAAgCC,CAAhC,GAAoC,IAApC,GAA2CrB,KAA3C,GAAmD,GAA1D;AACD;;AAED,MAAIpB,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcM,KAA3B,EAAkC;AAChC,WAAOmB,GAAP;AACD;;AACD,SAAOE,SAAP;AACD,CArHD;;AAuHA5B,OAAO,CAACmF,UAAR,GAAqB,SAASA,UAAT,CAAoBzD,GAApB,EAAyB;AAC5C,MAAIe,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcQ,KAA3B,EAAkC;AAChC,WAAOmB,SAAP;AACD;;AACD,MAAIE,GAAG,GAAGN,UAAU,CAACO,IAAX,CAAgBL,GAAhB,CAAV;AACA,MAAI0D,GAAG,GAAGvC,UAAU,CAACf,GAAG,CAAC,CAAD,CAAJ,CAApB;;AACA,MAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,KAAf,EAAsB;AACpBsD,IAAAA,GAAG,IAAI,MAAMhB,IAAI,CAACiB,EAAlB;AACD,GAFD,MAEO,IAAIvD,GAAG,CAAC,CAAD,CAAH,KAAW,MAAf,EAAuB;AAC5BsD,IAAAA,GAAG,IAAI,MAAM,GAAb;AACD;;AAED,SAAOA,GAAG,GAAG,CAAb,EAAgB;AACdA,IAAAA,GAAG,IAAI,GAAP;AACD;;AACD,SAAOA,GAAG,GAAG,GAAb,EAAkB;AAChBA,IAAAA,GAAG,IAAI,GAAP;AACD;;AACD,SAAOA,GAAG,GAAG,KAAb;AACD,CAvBD;;AAyBApF,OAAO,CAACsF,YAAR,GAAuB,SAASA,YAAT,CAAsB5D,GAAtB,EAA2B6D,cAA3B,EAA2C;AAChE,MAAI9C,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBC,GAAlB,CAAX;;AACA,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5C,WAAOe,GAAP;AACD;;AACD,MAAIe,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcS,OAA3B,EAAoC;AAClC,WAAOkB,SAAP;AACD;;AACDF,EAAAA,GAAG,GAAGA,GAAG,CAACC,QAAJ,GAAeW,WAAf,EAAN;AACA,MAAIc,CAAJ;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGmC,cAAc,CAACrD,MAA/B,EAAuCkB,CAAC,EAAxC,EAA4C;AAC1C,QAAImC,cAAc,CAACnC,CAAD,CAAd,CAAkBd,WAAlB,OAAoCZ,GAAxC,EAA6C;AAC3C,aAAO6D,cAAc,CAACnC,CAAD,CAArB;AACD;AACF;;AACD,SAAOxB,SAAP;AACD,CAhBD,C,CAkBA;;;AACA,IAAI4D,iBAAiB,GAAG,UAASC,MAAT,EAAiB;AACvC,MAAIrC,CAAJ;AACA,MAAIsC,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAG,KAAd;;AACA,OAAKvC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGqC,MAAM,CAACvD,MAAvB,EAA+BkB,CAAC,EAAhC,EAAoC;AAClC,QAAIqC,MAAM,CAACrC,CAAD,CAAN,KAAc,GAAlB,EAAuB;AACrBsC,MAAAA,KAAK,IAAIC,OAAO,GAAGF,MAAM,CAACrC,CAAD,CAAN,CAAUwC,WAAV,EAAH,GAA6BH,MAAM,CAACrC,CAAD,CAAnD;AACAuC,MAAAA,OAAO,GAAG,KAAV;AACD,KAHD,MAGO;AACLA,MAAAA,OAAO,GAAG,IAAV;AACD;AACF;;AACD,SAAOD,KAAP;AACD,CAbD;;AAcA1F,OAAO,CAACwF,iBAAR,GAA4BA,iBAA5B;AAEA,IAAIK,QAAQ,GAAG,IAAf;AACA,IAAIC,oBAAoB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA3B;AACA,IAAIC,oBAAoB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA3B,C,CACA;;AACA,IAAIC,QAAQ,GAAG,UAAS9C,GAAT,EAAc;AAC3B,MAAI+C,iBAAiB,GAAG,EAAxB;AACA,MAAI/D,MAAM,GAAGgB,GAAG,CAAChB,MAAjB;AACA,MAAIkB,CAAJ;AACA,MAAIpB,KAAK,GAAG,EAAZ;AACA,MAAIkE,YAAY,GAAG,EAAnB;AACA,MAAIC,aAAJ;AACA,MAAIC,aAAJ;;AACA,OAAKhD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlB,MAAhB,EAAwBkB,CAAC,EAAzB,EAA6B;AAC3B+C,IAAAA,aAAa,GAAGL,oBAAoB,CAACO,OAArB,CAA6BnD,GAAG,CAACE,CAAD,CAAhC,CAAhB;AACAgD,IAAAA,aAAa,GAAGL,oBAAoB,CAACM,OAArB,CAA6BnD,GAAG,CAACE,CAAD,CAAhC,CAAhB;;AACA,QAAIyC,QAAQ,CAAChE,IAAT,CAAcqB,GAAG,CAACE,CAAD,CAAjB,CAAJ,EAA2B;AACzB,UAAI6C,iBAAiB,CAAC/D,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,YAAIgE,YAAY,KAAK,EAArB,EAAyB;AACvBlE,UAAAA,KAAK,CAACsE,IAAN,CAAWJ,YAAX;AACD;;AACDA,QAAAA,YAAY,GAAG,EAAf;AACD,OALD,MAKO;AACLA,QAAAA,YAAY,IAAIhD,GAAG,CAACE,CAAD,CAAnB;AACD;AACF,KATD,MASO;AACL,UAAIF,GAAG,CAACE,CAAD,CAAH,KAAW,IAAf,EAAqB;AACnBA,QAAAA,CAAC;AACD8C,QAAAA,YAAY,IAAIhD,GAAG,CAACE,CAAD,CAAnB;AACD,OAHD,MAGO;AACL8C,QAAAA,YAAY,IAAIhD,GAAG,CAACE,CAAD,CAAnB;;AACA,YACEgD,aAAa,KAAK,CAAC,CAAnB,IACAA,aAAa,KAAKH,iBAAiB,CAACA,iBAAiB,CAAC/D,MAAlB,GAA2B,CAA5B,CAFrC,EAGE;AACA+D,UAAAA,iBAAiB,CAACM,GAAlB;AACD,SALD,MAKO,IAAIJ,aAAa,KAAK,CAAC,CAAvB,EAA0B;AAC/BF,UAAAA,iBAAiB,CAACK,IAAlB,CAAuBH,aAAvB;AACD;AACF;AACF;AACF;;AACD,MAAID,YAAY,KAAK,EAArB,EAAyB;AACvBlE,IAAAA,KAAK,CAACsE,IAAN,CAAWJ,YAAX;AACD;;AACD,SAAOlE,KAAP;AACD,CAzCD;AA2CA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,OAAO,CAACwG,eAAR,GAA0B,SAASC,KAAT,CAAeC,CAAf,EAAkBC,aAAlB,EAAiC;AACzD,MAAIC,GAAG,GAAG,EAAV;AACA,MAAInE,IAAI,GAAGzC,OAAO,CAACyB,SAAR,CAAkBiF,CAAlB,CAAX;;AACA,MAAIjE,IAAI,KAAKzC,OAAO,CAACC,KAAR,CAAcU,iBAA3B,EAA8C;AAC5CkG,IAAAA,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,OAA3B,CAAmC,UAASC,QAAT,EAAmB;AACpDJ,MAAAA,GAAG,CAACI,QAAD,CAAH,GAAgB,EAAhB;AACD,KAFD;AAGA,WAAOJ,GAAP;AACD;;AAED,MAAI,OAAOF,CAAP,KAAa,QAAjB,EAA2B;AACzBA,IAAAA,CAAC,GAAGA,CAAC,CAAC/E,QAAF,EAAJ;AACD;;AAED,MAAI,OAAO+E,CAAP,KAAa,QAAjB,EAA2B;AACzB,WAAO9E,SAAP;AACD;;AAED,MAAI8E,CAAC,CAACpE,WAAF,OAAoB,SAAxB,EAAmC;AACjC,WAAO,EAAP;AACD;;AACD,MAAIN,KAAK,GAAGgE,QAAQ,CAACU,CAAD,CAApB;AACA,MAAIO,KAAK,GAAG,IAAZ;AACAjF,EAAAA,KAAK,CAAC+E,OAAN,CAAc,UAASG,IAAT,EAAe9D,CAAf,EAAkB;AAC9B,QAAI+D,UAAU,GAAG,KAAjB;AACAN,IAAAA,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,OAA3B,CAAmC,UAASC,QAAT,EAAmB;AACpD,UAAIL,aAAa,CAACK,QAAD,CAAb,CAAwBI,OAAxB,CAAgCF,IAAhC,EAAsC9D,CAAtC,CAAJ,EAA8C;AAC5C+D,QAAAA,UAAU,GAAG,IAAb;AACAP,QAAAA,GAAG,CAACI,QAAD,CAAH,GAAgBE,IAAhB;AACD;AACF,KALD;AAMAD,IAAAA,KAAK,GAAGA,KAAK,IAAIE,UAAjB;AACD,GATD;;AAUA,MAAI,CAACF,KAAL,EAAY;AACV,WAAOrF,SAAP;AACD;;AACD,SAAOgF,GAAP;AACD,CArCD;;AAuCA5G,OAAO,CAACqH,eAAR,GAA0B,UAASL,QAAT,EAAmBL,aAAnB,EAAkC;AAC1D,SAAO,UAASD,CAAT,EAAY;AACjB,QAAIE,GAAG,GAAG5G,OAAO,CAACwG,eAAR,CAAwBE,CAAxB,EAA2BC,aAA3B,CAAV;;AACA,QAAIC,GAAG,KAAKhF,SAAZ,EAAuB;AACrB;AACD,KAJgB,CAKjB;;;AACAiF,IAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,UAASO,OAAT,EAAkB;AACzC;AACA;AACA,UAAI5B,KAAK,GAAGF,iBAAiB,CAAC8B,OAAD,CAA7B;AACA,WAAK5B,KAAL,IAAckB,GAAG,CAACU,OAAD,CAAjB,CAJyC,CAKzC;;AACAV,MAAAA,GAAG,CAACU,OAAD,CAAH,GAAe,KAAK5B,KAAL,CAAf;AACA,WAAK6B,cAAL,CAAoBD,OAApB,EAPyC,CAQzC;;AACA,UAAIV,GAAG,CAACU,OAAD,CAAH,KAAiB,EAArB,EAAyB;AACvB,aAAKE,OAAL,CAAaF,OAAb,IAAwBV,GAAG,CAACU,OAAD,CAA3B;AACD;AACF,KAZD,EAYG,IAZH;AAaAT,IAAAA,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BI,OAA3B,CAAmC,UAASO,OAAT,EAAkB;AACnD,UAAI,CAACV,GAAG,CAACa,cAAJ,CAAmBH,OAAnB,CAAL,EAAkC;AAChC,aAAKC,cAAL,CAAoBD,OAApB;AACA,eAAO,KAAKE,OAAL,CAAaF,OAAb,CAAP;AACD;AACF,KALD,EAKG,IALH,EAnBiB,CAyBjB;AACA;AACA;AACA;;AACA,SAAKC,cAAL,CAAoBP,QAApB;AACA,QAAIU,UAAU,GAAG1H,OAAO,CAAC2H,eAAR,CAAwBX,QAAxB,EAAkCL,aAAlC,EAAiDiB,IAAjD,CAAsD,IAAtD,CAAjB;;AACA,QAAIF,UAAU,KAAK,EAAnB,EAAuB;AACrB,WAAKG,YAAL,CAAkBb,QAAlB,EAA4BU,UAA5B;AACD;AACF,GAlCD;AAmCD,CApCD;;AAsCA1H,OAAO,CAAC2H,eAAR,GAA0B,UAASX,QAAT,EAAmBL,aAAnB,EAAkC;AAC1D,SAAO,YAAW;AAChB,QAAI,KAAKa,OAAL,CAAaR,QAAb,MAA2BpF,SAA/B,EAA0C;AACxC,aAAO,KAAKkG,gBAAL,CAAsBd,QAAtB,CAAP;AACD;;AACD,WAAOH,MAAM,CAACC,IAAP,CAAYH,aAAZ,EACJoB,GADI,CACA,UAAST,OAAT,EAAkB;AACrB,aAAO,KAAKQ,gBAAL,CAAsBR,OAAtB,CAAP;AACD,KAHI,EAGF,IAHE,EAIJU,MAJI,CAIG,UAASC,KAAT,EAAgB;AACtB,aAAOA,KAAK,KAAK,EAAjB;AACD,KANI,EAOJC,IAPI,CAOC,GAPD,CAAP;AAQD,GAZD;AAaD,CAdD,C,CAgBA;AACA;AACA;AACA;AACA;;;AACAlI,OAAO,CAACmI,cAAR,GAAyB,UAASC,eAAT,EAA0BC,cAA1B,EAA0CjB,OAA1C,EAAmDkB,MAAnD,EAA2D;AAClFD,EAAAA,cAAc,GAAGA,cAAc,IAAI,EAAnC;;AACA,MAAIA,cAAc,KAAK,EAAvB,EAA2B;AACzBA,IAAAA,cAAc,GAAG,MAAMA,cAAvB;AACD;;AACD,MAAIE,UAAU,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAjB;AAEA,SAAO,UAAS7B,CAAT,EAAY;AACjB,QAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzBA,MAAAA,CAAC,GAAGA,CAAC,CAAC/E,QAAF,EAAJ;AACD;;AACD,QAAI,OAAO+E,CAAP,KAAa,QAAjB,EAA2B;AACzB,aAAO9E,SAAP;AACD;;AACD,QAAII,KAAJ;;AACA,QAAI0E,CAAC,CAACpE,WAAF,OAAoB,SAApB,IAAiCoE,CAAC,KAAK,EAA3C,EAA+C;AAC7C1E,MAAAA,KAAK,GAAG,CAAC0E,CAAD,CAAR;AACD,KAFD,MAEO;AACL1E,MAAAA,KAAK,GAAGgE,QAAQ,CAACU,CAAD,CAAhB;AACD;;AACD,QAAI1E,KAAK,CAACE,MAAN,GAAe,CAAf,IAAoBF,KAAK,CAACE,MAAN,GAAe,CAAvC,EAA0C;AACxC,aAAON,SAAP;AACD;;AAED,QAAI,CAACI,KAAK,CAACG,KAAN,CAAYiF,OAAZ,CAAL,EAA2B;AACzB,aAAOxF,SAAP;AACD;;AAEDI,IAAAA,KAAK,GAAGA,KAAK,CAAC+F,GAAN,CAAU,UAASb,IAAT,EAAe;AAC/B,aAAOoB,MAAM,CAACpB,IAAD,CAAb;AACD,KAFO,CAAR;;AAGA,SAAKW,YAAL,CAAkBO,eAAe,GAAGC,cAApC,EAAoDrG,KAAK,CAACkG,IAAN,CAAW,GAAX,CAApD;;AACA,QAAIlG,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtBF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB;AACD;;AACD,QAAIA,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtBF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB;AACD;;AACD,QAAIA,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtBF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB;AACD;;AAED,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAI4D,QAAQ,GAAGoB,eAAe,GAAG,GAAlB,GAAwBG,UAAU,CAACnF,CAAD,CAAlC,GAAwCiF,cAAvD;AACA,WAAKd,cAAL,CAAoBP,QAApB;;AACA,UAAIhF,KAAK,CAACoB,CAAD,CAAL,KAAa,EAAjB,EAAqB;AACnB,aAAKoE,OAAL,CAAaR,QAAb,IAAyBhF,KAAK,CAACoB,CAAD,CAA9B;AACD;AACF;;AACD,WAAOsD,CAAP;AACD,GA3CD;AA4CD,CAnDD,C,CAqDA;AACA;AACA;AACA;AACA;AACA;;;AACA1G,OAAO,CAACwI,iBAAR,GAA4B,UAASC,MAAT,EAAiBvB,IAAjB,EAAuBE,OAAvB,EAAgCkB,MAAhC,EAAwC;AAClE,MAAItB,QAAQ,GAAGyB,MAAM,GAAG,GAAT,GAAevB,IAA9B;AACA,MAAIwB,QAAQ,GAAG,CAACD,MAAM,GAAG,MAAV,EAAkBA,MAAM,GAAG,QAA3B,EAAqCA,MAAM,GAAG,SAA9C,EAAyDA,MAAM,GAAG,OAAlE,CAAf;AAEA,SAAO,UAAS/B,CAAT,EAAY;AACjB,QAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzBA,MAAAA,CAAC,GAAGA,CAAC,CAAC/E,QAAF,EAAJ;AACD;;AACD,QAAI,OAAO+E,CAAP,KAAa,QAAjB,EAA2B;AACzB,aAAO9E,SAAP;AACD;;AACD,QAAI,CAACwF,OAAO,CAACV,CAAD,CAAZ,EAAiB;AACf,aAAO9E,SAAP;AACD;;AACD8E,IAAAA,CAAC,GAAG4B,MAAM,CAAC5B,CAAD,CAAV;;AACA,SAAKmB,YAAL,CAAkBb,QAAlB,EAA4BN,CAA5B;;AACA,QAAI1E,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAI,KAAKoE,OAAL,CAAakB,QAAQ,CAACtF,CAAD,CAArB,KAA6B,IAA7B,IAAqC,KAAKoE,OAAL,CAAakB,QAAQ,CAACtF,CAAD,CAArB,MAA8B,EAAvE,EAA2E;AACzE;AACD;;AACDpB,MAAAA,KAAK,CAACsE,IAAN,CAAW,KAAKkB,OAAL,CAAakB,QAAQ,CAACtF,CAAD,CAArB,CAAX;AACD;;AACD,QAAIpB,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAKkB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtB,aAAKmE,cAAL,CAAoBmB,QAAQ,CAACtF,CAAD,CAA5B;AACA,aAAKoE,OAAL,CAAakB,QAAQ,CAACtF,CAAD,CAArB,IAA4BpB,KAAK,CAACoB,CAAD,CAAjC;AACD;;AACD,WAAKyE,YAAL,CAAkBY,MAAlB,EAA0BzG,KAAK,CAACkG,IAAN,CAAW,GAAX,CAA1B;AACD;;AACD,WAAOxB,CAAP;AACD,GA3BD;AA4BD,CAhCD;;AAkCA,IAAIiC,eAAe,GAAG,QAAtB;AACA,IAAIC,aAAa,GAAG,YAApB;AACA,IAAIC,eAAe,GAAG,CAAC,GAAD,EAAM,KAAN,EAAa,IAAb,EAAmB,QAAnB,CAAtB;;AACA7I,OAAO,CAAC8I,aAAR,GAAwB,UAASC,UAAT,EAAqB;AAC3C,MAAIC,KAAJ;AACA,MAAIvD,MAAM,GAAGsD,UAAU,CAACjE,OAAX,CAAmB6D,eAAnB,EAAoC,KAApC,EAA2CrG,WAA3C,EAAb;AACA0G,EAAAA,KAAK,GAAGvD,MAAM,CAACuD,KAAP,CAAaJ,aAAb,CAAR;;AACA,MAAII,KAAK,IAAIH,eAAe,CAACxC,OAAhB,CAAwB2C,KAAK,CAAC,CAAD,CAA7B,MAAsC,CAAC,CAApD,EAAuD;AACrDvD,IAAAA,MAAM,GAAG,MAAMA,MAAf;AACD;;AACD,SAAOA,MAAP;AACD,CARD","sourcesContent":["/*********************************************************************\n * These are commonly used parsers for CSS Values they take a string *\n * to parse and return a string after it's been converted, if needed *\n ********************************************************************/\n'use strict';\n\nconst namedColors = require('./named_colors.json');\nconst { hslToRgb } = require('./utils/colorSpace');\n\nexports.TYPES = {\n  INTEGER: 1,\n  NUMBER: 2,\n  LENGTH: 3,\n  PERCENT: 4,\n  URL: 5,\n  COLOR: 6,\n  STRING: 7,\n  ANGLE: 8,\n  KEYWORD: 9,\n  NULL_OR_EMPTY_STR: 10,\n  CALC: 11,\n};\n\n// rough regular expressions\nvar integerRegEx = /^[-+]?[0-9]+$/;\nvar numberRegEx = /^[-+]?[0-9]*\\.?[0-9]+$/;\nvar lengthRegEx = /^(0|[-+]?[0-9]*\\.?[0-9]+(in|cm|em|mm|pt|pc|px|ex|rem|vh|vw|ch))$/;\nvar percentRegEx = /^[-+]?[0-9]*\\.?[0-9]+%$/;\nvar urlRegEx = /^url\\(\\s*([^)]*)\\s*\\)$/;\nvar stringRegEx = /^(\"[^\"]*\"|'[^']*')$/;\nvar colorRegEx1 = /^#([0-9a-fA-F]{3,4}){1,2}$/;\nvar colorRegEx2 = /^rgb\\(([^)]*)\\)$/;\nvar colorRegEx3 = /^rgba\\(([^)]*)\\)$/;\nvar calcRegEx = /^calc\\(([^)]*)\\)$/;\nvar colorRegEx4 = /^hsla?\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*(,\\s*(-?\\d+|-?\\d*.\\d+)\\s*)?\\)/;\nvar angleRegEx = /^([-+]?[0-9]*\\.?[0-9]+)(deg|grad|rad)$/;\n\n// This will return one of the above types based on the passed in string\nexports.valueType = function valueType(val) {\n  if (val === '' || val === null) {\n    return exports.TYPES.NULL_OR_EMPTY_STR;\n  }\n  if (typeof val === 'number') {\n    val = val.toString();\n  }\n\n  if (typeof val !== 'string') {\n    return undefined;\n  }\n\n  if (integerRegEx.test(val)) {\n    return exports.TYPES.INTEGER;\n  }\n  if (numberRegEx.test(val)) {\n    return exports.TYPES.NUMBER;\n  }\n  if (lengthRegEx.test(val)) {\n    return exports.TYPES.LENGTH;\n  }\n  if (percentRegEx.test(val)) {\n    return exports.TYPES.PERCENT;\n  }\n  if (urlRegEx.test(val)) {\n    return exports.TYPES.URL;\n  }\n  if (calcRegEx.test(val)) {\n    return exports.TYPES.CALC;\n  }\n  if (stringRegEx.test(val)) {\n    return exports.TYPES.STRING;\n  }\n  if (angleRegEx.test(val)) {\n    return exports.TYPES.ANGLE;\n  }\n  if (colorRegEx1.test(val)) {\n    return exports.TYPES.COLOR;\n  }\n\n  var res = colorRegEx2.exec(val);\n  var parts;\n  if (res !== null) {\n    parts = res[1].split(/\\s*,\\s*/);\n    if (parts.length !== 3) {\n      return undefined;\n    }\n    if (\n      parts.every(percentRegEx.test.bind(percentRegEx)) ||\n      parts.every(integerRegEx.test.bind(integerRegEx))\n    ) {\n      return exports.TYPES.COLOR;\n    }\n    return undefined;\n  }\n  res = colorRegEx3.exec(val);\n  if (res !== null) {\n    parts = res[1].split(/\\s*,\\s*/);\n    if (parts.length !== 4) {\n      return undefined;\n    }\n    if (\n      parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx)) ||\n      parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))\n    ) {\n      if (numberRegEx.test(parts[3])) {\n        return exports.TYPES.COLOR;\n      }\n    }\n    return undefined;\n  }\n\n  if (colorRegEx4.test(val)) {\n    return exports.TYPES.COLOR;\n  }\n\n  // could still be a color, one of the standard keyword colors\n  val = val.toLowerCase();\n\n  if (namedColors.includes(val)) {\n    return exports.TYPES.COLOR;\n  }\n\n  switch (val) {\n    // the following are deprecated in CSS3\n    case 'activeborder':\n    case 'activecaption':\n    case 'appworkspace':\n    case 'background':\n    case 'buttonface':\n    case 'buttonhighlight':\n    case 'buttonshadow':\n    case 'buttontext':\n    case 'captiontext':\n    case 'graytext':\n    case 'highlight':\n    case 'highlighttext':\n    case 'inactiveborder':\n    case 'inactivecaption':\n    case 'inactivecaptiontext':\n    case 'infobackground':\n    case 'infotext':\n    case 'menu':\n    case 'menutext':\n    case 'scrollbar':\n    case 'threeddarkshadow':\n    case 'threedface':\n    case 'threedhighlight':\n    case 'threedlightshadow':\n    case 'threedshadow':\n    case 'window':\n    case 'windowframe':\n    case 'windowtext':\n      return exports.TYPES.COLOR;\n    default:\n      return exports.TYPES.KEYWORD;\n  }\n};\n\nexports.parseInteger = function parseInteger(val) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  if (type !== exports.TYPES.INTEGER) {\n    return undefined;\n  }\n  return String(parseInt(val, 10));\n};\n\nexports.parseNumber = function parseNumber(val) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  if (type !== exports.TYPES.NUMBER && type !== exports.TYPES.INTEGER) {\n    return undefined;\n  }\n  return String(parseFloat(val));\n};\n\nexports.parseLength = function parseLength(val) {\n  if (val === 0 || val === '0') {\n    return '0px';\n  }\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  if (type !== exports.TYPES.LENGTH) {\n    return undefined;\n  }\n  return val;\n};\n\nexports.parsePercent = function parsePercent(val) {\n  if (val === 0 || val === '0') {\n    return '0%';\n  }\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  if (type !== exports.TYPES.PERCENT) {\n    return undefined;\n  }\n  return val;\n};\n\n// either a length or a percent\nexports.parseMeasurement = function parseMeasurement(val) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.CALC) {\n    return val;\n  }\n\n  var length = exports.parseLength(val);\n  if (length !== undefined) {\n    return length;\n  }\n  return exports.parsePercent(val);\n};\n\nexports.parseUrl = function parseUrl(val) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  var res = urlRegEx.exec(val);\n  // does it match the regex?\n  if (!res) {\n    return undefined;\n  }\n  var str = res[1];\n  // if it starts with single or double quotes, does it end with the same?\n  if ((str[0] === '\"' || str[0] === \"'\") && str[0] !== str[str.length - 1]) {\n    return undefined;\n  }\n  if (str[0] === '\"' || str[0] === \"'\") {\n    str = str.substr(1, str.length - 2);\n  }\n\n  var i;\n  for (i = 0; i < str.length; i++) {\n    switch (str[i]) {\n      case '(':\n      case ')':\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case \"'\":\n      case '\"':\n        return undefined;\n      case '\\\\':\n        i++;\n        break;\n    }\n  }\n\n  return 'url(' + str + ')';\n};\n\nexports.parseString = function parseString(val) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  if (type !== exports.TYPES.STRING) {\n    return undefined;\n  }\n  var i;\n  for (i = 1; i < val.length - 1; i++) {\n    switch (val[i]) {\n      case val[0]:\n        return undefined;\n      case '\\\\':\n        i++;\n        while (i < val.length - 1 && /[0-9A-Fa-f]/.test(val[i])) {\n          i++;\n        }\n        break;\n    }\n  }\n  if (i >= val.length) {\n    return undefined;\n  }\n  return val;\n};\n\nexports.parseColor = function parseColor(val) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  var red,\n    green,\n    blue,\n    hue,\n    saturation,\n    lightness,\n    alpha = 1;\n  var parts;\n  var res = colorRegEx1.exec(val);\n  // is it #aaa, #ababab, #aaaa, #abababaa\n  if (res) {\n    var defaultHex = val.substr(1);\n    var hex = val.substr(1);\n    if (hex.length === 3 || hex.length === 4) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\n      if (defaultHex.length === 4) {\n        hex = hex + defaultHex[3] + defaultHex[3];\n      }\n    }\n    red = parseInt(hex.substr(0, 2), 16);\n    green = parseInt(hex.substr(2, 2), 16);\n    blue = parseInt(hex.substr(4, 2), 16);\n    if (hex.length === 8) {\n      var hexAlpha = hex.substr(6, 2);\n      var hexAlphaToRgbaAlpha = Number((parseInt(hexAlpha, 16) / 255).toFixed(3));\n\n      return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + hexAlphaToRgbaAlpha + ')';\n    }\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n  }\n\n  res = colorRegEx2.exec(val);\n  if (res) {\n    parts = res[1].split(/\\s*,\\s*/);\n    if (parts.length !== 3) {\n      return undefined;\n    }\n    if (parts.every(percentRegEx.test.bind(percentRegEx))) {\n      red = Math.floor((parseFloat(parts[0].slice(0, -1)) * 255) / 100);\n      green = Math.floor((parseFloat(parts[1].slice(0, -1)) * 255) / 100);\n      blue = Math.floor((parseFloat(parts[2].slice(0, -1)) * 255) / 100);\n    } else if (parts.every(integerRegEx.test.bind(integerRegEx))) {\n      red = parseInt(parts[0], 10);\n      green = parseInt(parts[1], 10);\n      blue = parseInt(parts[2], 10);\n    } else {\n      return undefined;\n    }\n    red = Math.min(255, Math.max(0, red));\n    green = Math.min(255, Math.max(0, green));\n    blue = Math.min(255, Math.max(0, blue));\n    return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n  }\n\n  res = colorRegEx3.exec(val);\n  if (res) {\n    parts = res[1].split(/\\s*,\\s*/);\n    if (parts.length !== 4) {\n      return undefined;\n    }\n    if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx))) {\n      red = Math.floor((parseFloat(parts[0].slice(0, -1)) * 255) / 100);\n      green = Math.floor((parseFloat(parts[1].slice(0, -1)) * 255) / 100);\n      blue = Math.floor((parseFloat(parts[2].slice(0, -1)) * 255) / 100);\n      alpha = parseFloat(parts[3]);\n    } else if (parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {\n      red = parseInt(parts[0], 10);\n      green = parseInt(parts[1], 10);\n      blue = parseInt(parts[2], 10);\n      alpha = parseFloat(parts[3]);\n    } else {\n      return undefined;\n    }\n    if (isNaN(alpha)) {\n      alpha = 1;\n    }\n    red = Math.min(255, Math.max(0, red));\n    green = Math.min(255, Math.max(0, green));\n    blue = Math.min(255, Math.max(0, blue));\n    alpha = Math.min(1, Math.max(0, alpha));\n    if (alpha === 1) {\n      return 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n    }\n    return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';\n  }\n\n  res = colorRegEx4.exec(val);\n  if (res) {\n    const [, _hue, _saturation, _lightness, _alphaString = ''] = res;\n    const _alpha = parseFloat(_alphaString.replace(',', '').trim());\n    if (!_hue || !_saturation || !_lightness) {\n      return undefined;\n    }\n    hue = parseFloat(_hue);\n    saturation = parseInt(_saturation, 10);\n    lightness = parseInt(_lightness, 10);\n    if (_alpha && numberRegEx.test(_alpha)) {\n      alpha = parseFloat(_alpha);\n    }\n\n    const [r, g, b] = hslToRgb(hue, saturation / 100, lightness / 100);\n    if (!_alphaString || alpha === 1) {\n      return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n    }\n    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';\n  }\n\n  if (type === exports.TYPES.COLOR) {\n    return val;\n  }\n  return undefined;\n};\n\nexports.parseAngle = function parseAngle(val) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  if (type !== exports.TYPES.ANGLE) {\n    return undefined;\n  }\n  var res = angleRegEx.exec(val);\n  var flt = parseFloat(res[1]);\n  if (res[2] === 'rad') {\n    flt *= 180 / Math.PI;\n  } else if (res[2] === 'grad') {\n    flt *= 360 / 400;\n  }\n\n  while (flt < 0) {\n    flt += 360;\n  }\n  while (flt > 360) {\n    flt -= 360;\n  }\n  return flt + 'deg';\n};\n\nexports.parseKeyword = function parseKeyword(val, valid_keywords) {\n  var type = exports.valueType(val);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    return val;\n  }\n  if (type !== exports.TYPES.KEYWORD) {\n    return undefined;\n  }\n  val = val.toString().toLowerCase();\n  var i;\n  for (i = 0; i < valid_keywords.length; i++) {\n    if (valid_keywords[i].toLowerCase() === val) {\n      return valid_keywords[i];\n    }\n  }\n  return undefined;\n};\n\n// utility to translate from border-width to borderWidth\nvar dashedToCamelCase = function(dashed) {\n  var i;\n  var camel = '';\n  var nextCap = false;\n  for (i = 0; i < dashed.length; i++) {\n    if (dashed[i] !== '-') {\n      camel += nextCap ? dashed[i].toUpperCase() : dashed[i];\n      nextCap = false;\n    } else {\n      nextCap = true;\n    }\n  }\n  return camel;\n};\nexports.dashedToCamelCase = dashedToCamelCase;\n\nvar is_space = /\\s/;\nvar opening_deliminators = ['\"', \"'\", '('];\nvar closing_deliminators = ['\"', \"'\", ')'];\n// this splits on whitespace, but keeps quoted and parened parts together\nvar getParts = function(str) {\n  var deliminator_stack = [];\n  var length = str.length;\n  var i;\n  var parts = [];\n  var current_part = '';\n  var opening_index;\n  var closing_index;\n  for (i = 0; i < length; i++) {\n    opening_index = opening_deliminators.indexOf(str[i]);\n    closing_index = closing_deliminators.indexOf(str[i]);\n    if (is_space.test(str[i])) {\n      if (deliminator_stack.length === 0) {\n        if (current_part !== '') {\n          parts.push(current_part);\n        }\n        current_part = '';\n      } else {\n        current_part += str[i];\n      }\n    } else {\n      if (str[i] === '\\\\') {\n        i++;\n        current_part += str[i];\n      } else {\n        current_part += str[i];\n        if (\n          closing_index !== -1 &&\n          closing_index === deliminator_stack[deliminator_stack.length - 1]\n        ) {\n          deliminator_stack.pop();\n        } else if (opening_index !== -1) {\n          deliminator_stack.push(opening_index);\n        }\n      }\n    }\n  }\n  if (current_part !== '') {\n    parts.push(current_part);\n  }\n  return parts;\n};\n\n/*\n * this either returns undefined meaning that it isn't valid\n * or returns an object where the keys are dashed short\n * hand properties and the values are the values to set\n * on them\n */\nexports.shorthandParser = function parse(v, shorthand_for) {\n  var obj = {};\n  var type = exports.valueType(v);\n  if (type === exports.TYPES.NULL_OR_EMPTY_STR) {\n    Object.keys(shorthand_for).forEach(function(property) {\n      obj[property] = '';\n    });\n    return obj;\n  }\n\n  if (typeof v === 'number') {\n    v = v.toString();\n  }\n\n  if (typeof v !== 'string') {\n    return undefined;\n  }\n\n  if (v.toLowerCase() === 'inherit') {\n    return {};\n  }\n  var parts = getParts(v);\n  var valid = true;\n  parts.forEach(function(part, i) {\n    var part_valid = false;\n    Object.keys(shorthand_for).forEach(function(property) {\n      if (shorthand_for[property].isValid(part, i)) {\n        part_valid = true;\n        obj[property] = part;\n      }\n    });\n    valid = valid && part_valid;\n  });\n  if (!valid) {\n    return undefined;\n  }\n  return obj;\n};\n\nexports.shorthandSetter = function(property, shorthand_for) {\n  return function(v) {\n    var obj = exports.shorthandParser(v, shorthand_for);\n    if (obj === undefined) {\n      return;\n    }\n    //console.log('shorthandSetter for:', property, 'obj:', obj);\n    Object.keys(obj).forEach(function(subprop) {\n      // in case subprop is an implicit property, this will clear\n      // *its* subpropertiesX\n      var camel = dashedToCamelCase(subprop);\n      this[camel] = obj[subprop];\n      // in case it gets translated into something else (0 -> 0px)\n      obj[subprop] = this[camel];\n      this.removeProperty(subprop);\n      // don't add in empty properties\n      if (obj[subprop] !== '') {\n        this._values[subprop] = obj[subprop];\n      }\n    }, this);\n    Object.keys(shorthand_for).forEach(function(subprop) {\n      if (!obj.hasOwnProperty(subprop)) {\n        this.removeProperty(subprop);\n        delete this._values[subprop];\n      }\n    }, this);\n    // in case the value is something like 'none' that removes all values,\n    // check that the generated one is not empty, first remove the property\n    // if it already exists, then call the shorthandGetter, if it's an empty\n    // string, don't set the property\n    this.removeProperty(property);\n    var calculated = exports.shorthandGetter(property, shorthand_for).call(this);\n    if (calculated !== '') {\n      this._setProperty(property, calculated);\n    }\n  };\n};\n\nexports.shorthandGetter = function(property, shorthand_for) {\n  return function() {\n    if (this._values[property] !== undefined) {\n      return this.getPropertyValue(property);\n    }\n    return Object.keys(shorthand_for)\n      .map(function(subprop) {\n        return this.getPropertyValue(subprop);\n      }, this)\n      .filter(function(value) {\n        return value !== '';\n      })\n      .join(' ');\n  };\n};\n\n// isValid(){1,4} | inherit\n// if one, it applies to all\n// if two, the first applies to the top and bottom, and the second to left and right\n// if three, the first applies to the top, the second to left and right, the third bottom\n// if four, top, right, bottom, left\nexports.implicitSetter = function(property_before, property_after, isValid, parser) {\n  property_after = property_after || '';\n  if (property_after !== '') {\n    property_after = '-' + property_after;\n  }\n  var part_names = ['top', 'right', 'bottom', 'left'];\n\n  return function(v) {\n    if (typeof v === 'number') {\n      v = v.toString();\n    }\n    if (typeof v !== 'string') {\n      return undefined;\n    }\n    var parts;\n    if (v.toLowerCase() === 'inherit' || v === '') {\n      parts = [v];\n    } else {\n      parts = getParts(v);\n    }\n    if (parts.length < 1 || parts.length > 4) {\n      return undefined;\n    }\n\n    if (!parts.every(isValid)) {\n      return undefined;\n    }\n\n    parts = parts.map(function(part) {\n      return parser(part);\n    });\n    this._setProperty(property_before + property_after, parts.join(' '));\n    if (parts.length === 1) {\n      parts[1] = parts[0];\n    }\n    if (parts.length === 2) {\n      parts[2] = parts[0];\n    }\n    if (parts.length === 3) {\n      parts[3] = parts[1];\n    }\n\n    for (var i = 0; i < 4; i++) {\n      var property = property_before + '-' + part_names[i] + property_after;\n      this.removeProperty(property);\n      if (parts[i] !== '') {\n        this._values[property] = parts[i];\n      }\n    }\n    return v;\n  };\n};\n\n//\n//  Companion to implicitSetter, but for the individual parts.\n//  This sets the individual value, and checks to see if all four\n//  sub-parts are set.  If so, it sets the shorthand version and removes\n//  the individual parts from the cssText.\n//\nexports.subImplicitSetter = function(prefix, part, isValid, parser) {\n  var property = prefix + '-' + part;\n  var subparts = [prefix + '-top', prefix + '-right', prefix + '-bottom', prefix + '-left'];\n\n  return function(v) {\n    if (typeof v === 'number') {\n      v = v.toString();\n    }\n    if (typeof v !== 'string') {\n      return undefined;\n    }\n    if (!isValid(v)) {\n      return undefined;\n    }\n    v = parser(v);\n    this._setProperty(property, v);\n    var parts = [];\n    for (var i = 0; i < 4; i++) {\n      if (this._values[subparts[i]] == null || this._values[subparts[i]] === '') {\n        break;\n      }\n      parts.push(this._values[subparts[i]]);\n    }\n    if (parts.length === 4) {\n      for (i = 0; i < 4; i++) {\n        this.removeProperty(subparts[i]);\n        this._values[subparts[i]] = parts[i];\n      }\n      this._setProperty(prefix, parts.join(' '));\n    }\n    return v;\n  };\n};\n\nvar camel_to_dashed = /[A-Z]/g;\nvar first_segment = /^\\([^-]\\)-/;\nvar vendor_prefixes = ['o', 'moz', 'ms', 'webkit'];\nexports.camelToDashed = function(camel_case) {\n  var match;\n  var dashed = camel_case.replace(camel_to_dashed, '-$&').toLowerCase();\n  match = dashed.match(first_segment);\n  if (match && vendor_prefixes.indexOf(match[1]) !== -1) {\n    dashed = '-' + dashed;\n  }\n  return dashed;\n};\n"]},"metadata":{},"sourceType":"script"}