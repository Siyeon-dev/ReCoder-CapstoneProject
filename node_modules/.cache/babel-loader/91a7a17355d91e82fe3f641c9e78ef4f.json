{"ast":null,"code":"\"use strict\";\n\nconst SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst {\n  mixin\n} = require(\"../../utils\"); // https://dom.spec.whatwg.org/#text\n\n\nclass TextImpl extends CharacterDataImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, {\n      data: args[0],\n      ...privateData\n    });\n\n    this._initSlotableMixin();\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  } // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n\n\n  splitText(offset) {\n    const {\n      length\n    } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent._insert(newNode, this.nextSibling);\n\n      for (const range of this._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n\n        if (_start.node === this && _start.offset > offset) {\n          range._setLiveRangeStart(newNode, _start.offset - offset);\n        }\n\n        if (_end.node === this && _end.offset > offset) {\n          range._setLiveRangeEnd(newNode, _end.offset - offset);\n        }\n      }\n\n      const nodeIndex = domSymbolTree.index(this);\n\n      for (const range of parent._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n\n        if (_start.node === parent && _start.offset === nodeIndex + 1) {\n          range._setLiveRangeStart(parent, _start.offset + 1);\n        }\n\n        if (_end.node === parent && _end.offset === nodeIndex + 1) {\n          range._setLiveRangeEnd(parent, _end.offset + 1);\n        }\n      }\n    }\n\n    this.replaceData(offset, count, \"\");\n    return newNode;\n  } // https://dom.spec.whatwg.org/#dom-text-wholetext\n\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n\n    current = this;\n\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n\n    return wholeText;\n  }\n\n}\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\nmodule.exports = {\n  implementation: TextImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js"],"names":["SlotableMixinImpl","require","implementation","CharacterDataImpl","domSymbolTree","DOMException","NODE_TYPE","mixin","TextImpl","constructor","globalObject","args","privateData","data","_initSlotableMixin","nodeType","TEXT_NODE","splitText","offset","length","create","_globalObject","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","_insert","nextSibling","range","_referencedRanges","_start","_end","node","_setLiveRangeStart","_setLiveRangeEnd","nodeIndex","index","replaceData","wholeText","textContent","next","current","previousSibling","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { mixin } = require(\"../../utils\");\n\n// https://dom.spec.whatwg.org/#text\nclass TextImpl extends CharacterDataImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, {\n      data: args[0],\n      ...privateData\n    });\n\n    this._initSlotableMixin();\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n  splitText(offset) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent._insert(newNode, this.nextSibling);\n\n      for (const range of this._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.node === this && _start.offset > offset) {\n          range._setLiveRangeStart(newNode, _start.offset - offset);\n        }\n\n        if (_end.node === this && _end.offset > offset) {\n          range._setLiveRangeEnd(newNode, _end.offset - offset);\n        }\n      }\n\n      const nodeIndex = domSymbolTree.index(this);\n      for (const range of parent._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.node === parent && _start.offset === nodeIndex + 1) {\n          range._setLiveRangeStart(parent, _start.offset + 1);\n        }\n\n        if (_end.node === parent && _end.offset === nodeIndex + 1) {\n          range._setLiveRangeEnd(parent, _end.offset + 1);\n        }\n      }\n    }\n\n    this.replaceData(offset, count, \"\");\n\n    return newNode;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-wholetext\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\n\nmodule.exports = {\n  implementation: TextImpl\n};\n"]},"metadata":{},"sourceType":"script"}