{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  documentBaseURLSerialized,\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url.js\"); // https://html.spec.whatwg.org/#history-3\n\n\nexports.implementation = class HistoryImpl {\n  constructor(globalObject, args, privateData) {\n    this._window = privateData.window;\n    this._document = privateData.document;\n    this._actAsIfLocationReloadCalled = privateData.actAsIfLocationReloadCalled;\n    this._state = null;\n    this._globalObject = globalObject;\n  }\n\n  _guardAgainstInactiveDocuments() {\n    if (!this._window) {\n      throw DOMException.create(this._globalObject, [\"History object is associated with a document that is not fully active.\", \"SecurityError\"]);\n    }\n  }\n\n  get length() {\n    this._guardAgainstInactiveDocuments();\n\n    return this._window._sessionHistory.length;\n  }\n\n  get state() {\n    this._guardAgainstInactiveDocuments();\n\n    return this._state;\n  }\n\n  go(delta) {\n    this._guardAgainstInactiveDocuments();\n\n    if (delta === 0) {\n      // When the go(delta) method is invoked, if delta is zero, the user agent must act as\n      // if the location.reload() method was called instead.\n      this._actAsIfLocationReloadCalled();\n    } else {\n      // Otherwise, the user agent must traverse the history by a delta whose value is delta\n      this._window._sessionHistory.traverseByDelta(delta);\n    }\n  }\n\n  back() {\n    this.go(-1);\n  }\n\n  forward() {\n    this.go(+1);\n  }\n\n  pushState(data, title, url) {\n    this._sharedPushAndReplaceState(data, title, url, \"pushState\");\n  }\n\n  replaceState(data, title, url) {\n    this._sharedPushAndReplaceState(data, title, url, \"replaceState\");\n  } // https://html.spec.whatwg.org/#dom-history-pushstate\n\n\n  _sharedPushAndReplaceState(data, title, url, methodName) {\n    this._guardAgainstInactiveDocuments(); // TODO structured clone data\n\n\n    let newURL;\n\n    if (url !== null) {\n      // Not implemented: use of entry settings object's API base URL. Instead we just use the document base URL. The\n      // difference matters in the case of cross-frame calls.\n      newURL = parseURLToResultingURLRecord(url, this._document);\n\n      if (newURL === null) {\n        throw DOMException.create(this._globalObject, [`Could not parse url argument \"${url}\" to ${methodName} against base URL ` + `\"${documentBaseURLSerialized(this._document)}\".`, \"SecurityError\"]);\n      }\n\n      if (newURL.scheme !== this._document._URL.scheme || newURL.username !== this._document._URL.username || newURL.password !== this._document._URL.password || newURL.host !== this._document._URL.host || newURL.port !== this._document._URL.port || newURL.cannotBeABaseURL !== this._document._URL.cannotBeABaseURL) {\n        throw DOMException.create(this._globalObject, [`${methodName} cannot update history to a URL which differs in components other than in ` + `path, query, or fragment.`, \"SecurityError\"]);\n      } // Not implemented: origin check (seems to only apply to documents with weird origins, e.g. sandboxed ones)\n\n    } else {\n      newURL = this._window._sessionHistory.currentEntry.url;\n    }\n\n    if (methodName === \"pushState\") {\n      this._window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n\n      this._window._sessionHistory.clearHistoryTraversalTasks();\n\n      const newEntry = {\n        document: this._document,\n        stateObject: data,\n        title,\n        url: newURL\n      };\n\n      this._window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n\n      this._window._sessionHistory.updateCurrentEntry(newEntry);\n    } else {\n      const {\n        currentEntry\n      } = this._window._sessionHistory;\n      currentEntry.stateObject = data;\n      currentEntry.title = title;\n      currentEntry.url = newURL;\n    } // TODO: If the current entry in the session history represents a non-GET request\n    // (e.g. it was the result of a POST submission) then update it to instead represent\n    // a GET request.\n\n\n    this._document._URL = newURL; // arguably it's a bit odd that the state and latestEntry do not belong to the SessionHistory\n    // but the spec gives them to \"History\" and \"Document\" respecively.\n\n    this._state = data; // TODO clone again!! O_o\n\n    this._document._latestEntry = this._window._sessionHistory.currentEntry;\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/window/History-impl.js"],"names":["DOMException","require","documentBaseURLSerialized","parseURLToResultingURLRecord","exports","implementation","HistoryImpl","constructor","globalObject","args","privateData","_window","window","_document","document","_actAsIfLocationReloadCalled","actAsIfLocationReloadCalled","_state","_globalObject","_guardAgainstInactiveDocuments","create","length","_sessionHistory","state","go","delta","traverseByDelta","back","forward","pushState","data","title","url","_sharedPushAndReplaceState","replaceState","methodName","newURL","scheme","_URL","username","password","host","port","cannotBeABaseURL","currentEntry","removeAllEntriesAfterCurrentEntry","clearHistoryTraversalTasks","newEntry","stateObject","addEntryAfterCurrentEntry","updateCurrentEntry","_latestEntry"],"mappings":"AAAA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA,yBAAF;AAA6BC,EAAAA;AAA7B,IAA8DF,OAAO,CAAC,iCAAD,CAA3E,C,CAEA;;;AACAG,OAAO,CAACC,cAAR,GAAyB,MAAMC,WAAN,CAAkB;AACzCC,EAAAA,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;AAC3C,SAAKC,OAAL,GAAeD,WAAW,CAACE,MAA3B;AACA,SAAKC,SAAL,GAAiBH,WAAW,CAACI,QAA7B;AACA,SAAKC,4BAAL,GAAoCL,WAAW,CAACM,2BAAhD;AACA,SAAKC,MAAL,GAAc,IAAd;AAEA,SAAKC,aAAL,GAAqBV,YAArB;AACD;;AAEDW,EAAAA,8BAA8B,GAAG;AAC/B,QAAI,CAAC,KAAKR,OAAV,EAAmB;AACjB,YAAMX,YAAY,CAACoB,MAAb,CAAoB,KAAKF,aAAzB,EAAwC,CAC5C,wEAD4C,EAE5C,eAF4C,CAAxC,CAAN;AAID;AACF;;AAES,MAANG,MAAM,GAAG;AACX,SAAKF,8BAAL;;AAEA,WAAO,KAAKR,OAAL,CAAaW,eAAb,CAA6BD,MAApC;AACD;;AAEQ,MAALE,KAAK,GAAG;AACV,SAAKJ,8BAAL;;AAEA,WAAO,KAAKF,MAAZ;AACD;;AAEDO,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,SAAKN,8BAAL;;AAEA,QAAIM,KAAK,KAAK,CAAd,EAAiB;AACf;AACA;AACA,WAAKV,4BAAL;AACD,KAJD,MAIO;AACL;AACA,WAAKJ,OAAL,CAAaW,eAAb,CAA6BI,eAA7B,CAA6CD,KAA7C;AACD;AACF;;AAEDE,EAAAA,IAAI,GAAG;AACL,SAAKH,EAAL,CAAQ,CAAC,CAAT;AACD;;AAEDI,EAAAA,OAAO,GAAG;AACR,SAAKJ,EAAL,CAAQ,CAAC,CAAT;AACD;;AAEDK,EAAAA,SAAS,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAmB;AAC1B,SAAKC,0BAAL,CAAgCH,IAAhC,EAAsCC,KAAtC,EAA6CC,GAA7C,EAAkD,WAAlD;AACD;;AACDE,EAAAA,YAAY,CAACJ,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAmB;AAC7B,SAAKC,0BAAL,CAAgCH,IAAhC,EAAsCC,KAAtC,EAA6CC,GAA7C,EAAkD,cAAlD;AACD,GAzDwC,CA2DzC;;;AACAC,EAAAA,0BAA0B,CAACH,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAmBG,UAAnB,EAA+B;AACvD,SAAKhB,8BAAL,GADuD,CAGvD;;;AAEA,QAAIiB,MAAJ;;AACA,QAAIJ,GAAG,KAAK,IAAZ,EAAkB;AAChB;AACA;AACAI,MAAAA,MAAM,GAAGjC,4BAA4B,CAAC6B,GAAD,EAAM,KAAKnB,SAAX,CAArC;;AAEA,UAAIuB,MAAM,KAAK,IAAf,EAAqB;AACnB,cAAMpC,YAAY,CAACoB,MAAb,CAAoB,KAAKF,aAAzB,EAAwC,CAC3C,iCAAgCc,GAAI,QAAOG,UAAW,oBAAvD,GACC,IAAGjC,yBAAyB,CAAC,KAAKW,SAAN,CAAiB,IAFF,EAG5C,eAH4C,CAAxC,CAAN;AAKD;;AAED,UAAIuB,MAAM,CAACC,MAAP,KAAkB,KAAKxB,SAAL,CAAeyB,IAAf,CAAoBD,MAAtC,IACAD,MAAM,CAACG,QAAP,KAAoB,KAAK1B,SAAL,CAAeyB,IAAf,CAAoBC,QADxC,IAEAH,MAAM,CAACI,QAAP,KAAoB,KAAK3B,SAAL,CAAeyB,IAAf,CAAoBE,QAFxC,IAGAJ,MAAM,CAACK,IAAP,KAAgB,KAAK5B,SAAL,CAAeyB,IAAf,CAAoBG,IAHpC,IAIAL,MAAM,CAACM,IAAP,KAAgB,KAAK7B,SAAL,CAAeyB,IAAf,CAAoBI,IAJpC,IAKAN,MAAM,CAACO,gBAAP,KAA4B,KAAK9B,SAAL,CAAeyB,IAAf,CAAoBK,gBALpD,EAKsE;AACpE,cAAM3C,YAAY,CAACoB,MAAb,CAAoB,KAAKF,aAAzB,EAAwC,CAC3C,GAAEiB,UAAW,4EAAd,GACC,2BAF2C,EAG5C,eAH4C,CAAxC,CAAN;AAKD,OAxBe,CA0BhB;;AACD,KA3BD,MA2BO;AACLC,MAAAA,MAAM,GAAG,KAAKzB,OAAL,CAAaW,eAAb,CAA6BsB,YAA7B,CAA0CZ,GAAnD;AACD;;AAED,QAAIG,UAAU,KAAK,WAAnB,EAAgC;AAC9B,WAAKxB,OAAL,CAAaW,eAAb,CAA6BuB,iCAA7B;;AAEA,WAAKlC,OAAL,CAAaW,eAAb,CAA6BwB,0BAA7B;;AAEA,YAAMC,QAAQ,GAAG;AACfjC,QAAAA,QAAQ,EAAE,KAAKD,SADA;AAEfmC,QAAAA,WAAW,EAAElB,IAFE;AAGfC,QAAAA,KAHe;AAIfC,QAAAA,GAAG,EAAEI;AAJU,OAAjB;;AAMA,WAAKzB,OAAL,CAAaW,eAAb,CAA6B2B,yBAA7B,CAAuDF,QAAvD;;AACA,WAAKpC,OAAL,CAAaW,eAAb,CAA6B4B,kBAA7B,CAAgDH,QAAhD;AACD,KAbD,MAaO;AACL,YAAM;AAAEH,QAAAA;AAAF,UAAmB,KAAKjC,OAAL,CAAaW,eAAtC;AACAsB,MAAAA,YAAY,CAACI,WAAb,GAA2BlB,IAA3B;AACAc,MAAAA,YAAY,CAACb,KAAb,GAAqBA,KAArB;AACAa,MAAAA,YAAY,CAACZ,GAAb,GAAmBI,MAAnB;AACD,KAvDsD,CAyDvD;AACA;AACA;;;AAEA,SAAKvB,SAAL,CAAeyB,IAAf,GAAsBF,MAAtB,CA7DuD,CA+DvD;AACA;;AACA,SAAKnB,MAAL,GAAca,IAAd,CAjEuD,CAiEnC;;AACpB,SAAKjB,SAAL,CAAesC,YAAf,GAA8B,KAAKxC,OAAL,CAAaW,eAAb,CAA6BsB,YAA3D;AACD;;AA/HwC,CAA3C","sourcesContent":["\"use strict\";\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { documentBaseURLSerialized, parseURLToResultingURLRecord } = require(\"../helpers/document-base-url.js\");\n\n// https://html.spec.whatwg.org/#history-3\nexports.implementation = class HistoryImpl {\n  constructor(globalObject, args, privateData) {\n    this._window = privateData.window;\n    this._document = privateData.document;\n    this._actAsIfLocationReloadCalled = privateData.actAsIfLocationReloadCalled;\n    this._state = null;\n\n    this._globalObject = globalObject;\n  }\n\n  _guardAgainstInactiveDocuments() {\n    if (!this._window) {\n      throw DOMException.create(this._globalObject, [\n        \"History object is associated with a document that is not fully active.\",\n        \"SecurityError\"\n      ]);\n    }\n  }\n\n  get length() {\n    this._guardAgainstInactiveDocuments();\n\n    return this._window._sessionHistory.length;\n  }\n\n  get state() {\n    this._guardAgainstInactiveDocuments();\n\n    return this._state;\n  }\n\n  go(delta) {\n    this._guardAgainstInactiveDocuments();\n\n    if (delta === 0) {\n      // When the go(delta) method is invoked, if delta is zero, the user agent must act as\n      // if the location.reload() method was called instead.\n      this._actAsIfLocationReloadCalled();\n    } else {\n      // Otherwise, the user agent must traverse the history by a delta whose value is delta\n      this._window._sessionHistory.traverseByDelta(delta);\n    }\n  }\n\n  back() {\n    this.go(-1);\n  }\n\n  forward() {\n    this.go(+1);\n  }\n\n  pushState(data, title, url) {\n    this._sharedPushAndReplaceState(data, title, url, \"pushState\");\n  }\n  replaceState(data, title, url) {\n    this._sharedPushAndReplaceState(data, title, url, \"replaceState\");\n  }\n\n  // https://html.spec.whatwg.org/#dom-history-pushstate\n  _sharedPushAndReplaceState(data, title, url, methodName) {\n    this._guardAgainstInactiveDocuments();\n\n    // TODO structured clone data\n\n    let newURL;\n    if (url !== null) {\n      // Not implemented: use of entry settings object's API base URL. Instead we just use the document base URL. The\n      // difference matters in the case of cross-frame calls.\n      newURL = parseURLToResultingURLRecord(url, this._document);\n\n      if (newURL === null) {\n        throw DOMException.create(this._globalObject, [\n          `Could not parse url argument \"${url}\" to ${methodName} against base URL ` +\n          `\"${documentBaseURLSerialized(this._document)}\".`,\n          \"SecurityError\"\n        ]);\n      }\n\n      if (newURL.scheme !== this._document._URL.scheme ||\n          newURL.username !== this._document._URL.username ||\n          newURL.password !== this._document._URL.password ||\n          newURL.host !== this._document._URL.host ||\n          newURL.port !== this._document._URL.port ||\n          newURL.cannotBeABaseURL !== this._document._URL.cannotBeABaseURL) {\n        throw DOMException.create(this._globalObject, [\n          `${methodName} cannot update history to a URL which differs in components other than in ` +\n          `path, query, or fragment.`,\n          \"SecurityError\"\n        ]);\n      }\n\n      // Not implemented: origin check (seems to only apply to documents with weird origins, e.g. sandboxed ones)\n    } else {\n      newURL = this._window._sessionHistory.currentEntry.url;\n    }\n\n    if (methodName === \"pushState\") {\n      this._window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n\n      this._window._sessionHistory.clearHistoryTraversalTasks();\n\n      const newEntry = {\n        document: this._document,\n        stateObject: data,\n        title,\n        url: newURL\n      };\n      this._window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n      this._window._sessionHistory.updateCurrentEntry(newEntry);\n    } else {\n      const { currentEntry } = this._window._sessionHistory;\n      currentEntry.stateObject = data;\n      currentEntry.title = title;\n      currentEntry.url = newURL;\n    }\n\n    // TODO: If the current entry in the session history represents a non-GET request\n    // (e.g. it was the result of a POST submission) then update it to instead represent\n    // a GET request.\n\n    this._document._URL = newURL;\n\n    // arguably it's a bit odd that the state and latestEntry do not belong to the SessionHistory\n    // but the spec gives them to \"History\" and \"Document\" respecively.\n    this._state = data; // TODO clone again!! O_o\n    this._document._latestEntry = this._window._sessionHistory.currentEntry;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}