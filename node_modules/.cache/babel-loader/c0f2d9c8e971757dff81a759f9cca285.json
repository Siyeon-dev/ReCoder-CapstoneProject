{"ast":null,"code":"\"use strict\"; // This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\n\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n\n}\n\nexports.implementation = EventModifierMixinImpl;","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js"],"names":["EventModifierMixinImpl","getModifierState","keyArg","Boolean","exports","implementation"],"mappings":"AAAA,a,CAEA;AACA;;AAEA,MAAMA,sBAAN,CAA6B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACvB,WAAOC,OAAO,CAAC,KAAM,WAAUD,MAAO,EAAvB,CAAD,CAAd;AACD;;AAT0B;;AAY7BE,OAAO,CAACC,cAAR,GAAyBL,sBAAzB","sourcesContent":["\"use strict\";\n\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\n\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n}\n\nexports.implementation = EventModifierMixinImpl;\n"]},"metadata":{},"sourceType":"script"}