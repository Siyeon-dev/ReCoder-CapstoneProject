{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst BlobPropertyBag = require(\"./BlobPropertyBag.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"Blob\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = (value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(`${context} is not of type 'Blob'.`);\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  const ctor = globalObject[ctorRegistrySymbol][\"Blob\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor Blob is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = globalObject => {\n  const wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  class Blob {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          if (!utils.isObject(curArg)) {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 1\" + \" is not an iterable object.\");\n          } else {\n            const V = [];\n            const tmp = curArg;\n\n            for (let nextItem of tmp) {\n              if (exports.is(nextItem)) {\n                nextItem = utils.implForWrapper(nextItem);\n              } else if (utils.isArrayBuffer(nextItem)) {} else if (ArrayBuffer.isView(nextItem)) {} else {\n                nextItem = conversions[\"USVString\"](nextItem, {\n                  context: \"Failed to construct 'Blob': parameter 1\" + \"'s element\"\n                });\n              }\n\n              V.push(nextItem);\n            }\n\n            curArg = V;\n          }\n        }\n\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = BlobPropertyBag.convert(curArg, {\n          context: \"Failed to construct 'Blob': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    slice() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 1\",\n            clamp: true\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 2\",\n            clamp: true\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 3\"\n          });\n        }\n\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].slice(...args));\n    }\n\n    get size() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"size\"];\n    }\n\n    get type() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"type\"];\n    }\n\n  }\n\n  Object.defineProperties(Blob.prototype, {\n    slice: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    },\n    type: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"Blob\",\n      configurable: true\n    }\n  });\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = Blob;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Blob\n  });\n};\n\nconst Impl = require(\"../file-api/Blob-impl.js\");","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/generated/Blob.js"],"names":["conversions","require","utils","BlobPropertyBag","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","context","implForWrapper","TypeError","makeWrapper","globalObject","undefined","Error","ctor","Object","create","prototype","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","Blob","constructor","args","curArg","arguments","V","tmp","nextItem","isArrayBuffer","ArrayBuffer","isView","push","target","slice","esValue","clamp","tryWrapperForImpl","size","type","defineProperties","enumerable","Symbol","toStringTag","writable"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst BlobPropertyBag = require(\"./BlobPropertyBag.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"Blob\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new TypeError(`${context} is not of type 'Blob'.`);\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  const ctor = globalObject[ctorRegistrySymbol][\"Blob\"];\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor Blob is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = globalObject => {\n  const wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  class Blob {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          if (!utils.isObject(curArg)) {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 1\" + \" is not an iterable object.\");\n          } else {\n            const V = [];\n            const tmp = curArg;\n            for (let nextItem of tmp) {\n              if (exports.is(nextItem)) {\n                nextItem = utils.implForWrapper(nextItem);\n              } else if (utils.isArrayBuffer(nextItem)) {\n              } else if (ArrayBuffer.isView(nextItem)) {\n              } else {\n                nextItem = conversions[\"USVString\"](nextItem, {\n                  context: \"Failed to construct 'Blob': parameter 1\" + \"'s element\"\n                });\n              }\n              V.push(nextItem);\n            }\n            curArg = V;\n          }\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = BlobPropertyBag.convert(curArg, { context: \"Failed to construct 'Blob': parameter 2\" });\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    slice() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 1\",\n            clamp: true\n          });\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 2\",\n            clamp: true\n          });\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, { context: \"Failed to execute 'slice' on 'Blob': parameter 3\" });\n        }\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].slice(...args));\n    }\n\n    get size() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"size\"];\n    }\n\n    get type() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"type\"];\n    }\n  }\n  Object.defineProperties(Blob.prototype, {\n    slice: { enumerable: true },\n    size: { enumerable: true },\n    type: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"Blob\", configurable: true }\n  });\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n  globalObject[ctorRegistrySymbol][interfaceName] = Blob;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Blob\n  });\n};\n\nconst Impl = require(\"../file-api/Blob-impl.js\");\n"]},"metadata":{},"sourceType":"script"}