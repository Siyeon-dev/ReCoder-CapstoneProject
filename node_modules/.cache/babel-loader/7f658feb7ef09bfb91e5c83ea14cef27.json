{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst NodeImpl = require(\"./Node-impl\").implementation;\n\nconst ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\n\nconst NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nconst {\n  TEXT_NODE\n} = require(\"../node-type\");\n\nconst {\n  MUTATION_TYPE,\n  queueMutationRecord\n} = require(\"../helpers/mutation-observers\"); // https://dom.spec.whatwg.org/#characterdata\n\n\nclass CharacterDataImpl extends NodeImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._data = privateData.data;\n  } // https://dom.spec.whatwg.org/#dom-characterdata-data\n\n\n  get data() {\n    return this._data;\n  }\n\n  set data(data) {\n    this.replaceData(0, this.length, data);\n  } // https://dom.spec.whatwg.org/#dom-characterdata-length\n\n\n  get length() {\n    return this._data.length;\n  } // https://dom.spec.whatwg.org/#dom-characterdata-substringdata\n  // https://dom.spec.whatwg.org/#concept-cd-substring\n\n\n  substringData(offset, count) {\n    const {\n      length\n    } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    if (offset + count > length) {\n      return this._data.slice(offset);\n    }\n\n    return this._data.slice(offset, offset + count);\n  } // https://dom.spec.whatwg.org/#dom-characterdata-appenddata\n\n\n  appendData(data) {\n    this.replaceData(this.length, 0, data);\n  } // https://dom.spec.whatwg.org/#dom-characterdata-insertdata\n\n\n  insertData(offset, data) {\n    this.replaceData(offset, 0, data);\n  } // https://dom.spec.whatwg.org/#dom-characterdata-deletedata\n\n\n  deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  } // https://dom.spec.whatwg.org/#dom-characterdata-replacedata\n  // https://dom.spec.whatwg.org/#concept-cd-replace\n\n\n  replaceData(offset, count, data) {\n    const {\n      length\n    } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    if (offset + count > length) {\n      count = length - offset;\n    }\n\n    queueMutationRecord(MUTATION_TYPE.CHARACTER_DATA, this, null, null, this._data, [], [], null, null);\n\n    const start = this._data.slice(0, offset);\n\n    const end = this._data.slice(offset + count);\n\n    this._data = start + data + end;\n\n    for (const range of this._referencedRanges) {\n      const {\n        _start,\n        _end\n      } = range;\n\n      if (_start.offset > offset && _start.offset <= offset + count) {\n        range._setLiveRangeStart(this, offset);\n      }\n\n      if (_end.offset > offset && _end.offset <= offset + count) {\n        range._setLiveRangeEnd(this, offset);\n      }\n\n      if (_start.offset > offset + count) {\n        range._setLiveRangeStart(this, _start.offset + data.length - count);\n      }\n\n      if (_end.offset > offset + count) {\n        range._setLiveRangeEnd(this, _end.offset + data.length - count);\n      }\n    }\n\n    if (this.nodeType === TEXT_NODE && this.parentNode) {\n      this.parentNode._childTextContentChangeSteps();\n    }\n  }\n\n}\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\nmodule.exports = {\n  implementation: CharacterDataImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/CharacterData-impl.js"],"names":["DOMException","require","mixin","NodeImpl","implementation","ChildNodeImpl","NonDocumentTypeChildNodeImpl","TEXT_NODE","MUTATION_TYPE","queueMutationRecord","CharacterDataImpl","constructor","globalObject","args","privateData","_data","data","replaceData","length","substringData","offset","count","create","_globalObject","slice","appendData","insertData","deleteData","CHARACTER_DATA","start","end","range","_referencedRanges","_start","_end","_setLiveRangeStart","_setLiveRangeEnd","nodeType","parentNode","_childTextContentChangeSteps","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst { mixin } = require(\"../../utils\");\nconst NodeImpl = require(\"./Node-impl\").implementation;\nconst ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\nconst NonDocumentTypeChildNodeImpl = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nconst { TEXT_NODE } = require(\"../node-type\");\nconst { MUTATION_TYPE, queueMutationRecord } = require(\"../helpers/mutation-observers\");\n\n// https://dom.spec.whatwg.org/#characterdata\nclass CharacterDataImpl extends NodeImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this._data = privateData.data;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-characterdata-data\n  get data() {\n    return this._data;\n  }\n  set data(data) {\n    this.replaceData(0, this.length, data);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-characterdata-length\n  get length() {\n    return this._data.length;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-characterdata-substringdata\n  // https://dom.spec.whatwg.org/#concept-cd-substring\n  substringData(offset, count) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    if (offset + count > length) {\n      return this._data.slice(offset);\n    }\n\n    return this._data.slice(offset, offset + count);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-characterdata-appenddata\n  appendData(data) {\n    this.replaceData(this.length, 0, data);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-characterdata-insertdata\n  insertData(offset, data) {\n    this.replaceData(offset, 0, data);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-characterdata-deletedata\n  deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  }\n\n  // https://dom.spec.whatwg.org/#dom-characterdata-replacedata\n  // https://dom.spec.whatwg.org/#concept-cd-replace\n  replaceData(offset, count, data) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\n        \"The index is not in the allowed range.\",\n        \"IndexSizeError\"\n      ]);\n    }\n\n    if (offset + count > length) {\n      count = length - offset;\n    }\n\n    queueMutationRecord(MUTATION_TYPE.CHARACTER_DATA, this, null, null, this._data, [], [], null, null);\n\n    const start = this._data.slice(0, offset);\n    const end = this._data.slice(offset + count);\n    this._data = start + data + end;\n\n    for (const range of this._referencedRanges) {\n      const { _start, _end } = range;\n\n      if (_start.offset > offset && _start.offset <= offset + count) {\n        range._setLiveRangeStart(this, offset);\n      }\n\n      if (_end.offset > offset && _end.offset <= offset + count) {\n        range._setLiveRangeEnd(this, offset);\n      }\n\n      if (_start.offset > offset + count) {\n        range._setLiveRangeStart(this, _start.offset + data.length - count);\n      }\n\n      if (_end.offset > offset + count) {\n        range._setLiveRangeEnd(this, _end.offset + data.length - count);\n      }\n    }\n\n    if (this.nodeType === TEXT_NODE && this.parentNode) {\n      this.parentNode._childTextContentChangeSteps();\n    }\n  }\n}\n\nmixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);\nmixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);\n\nmodule.exports = {\n  implementation: CharacterDataImpl\n};\n"]},"metadata":{},"sourceType":"script"}