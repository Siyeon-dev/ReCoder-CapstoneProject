{"ast":null,"code":"\"use strict\";\n\nconst {\n  utf8Encode,\n  utf8DecodeWithoutBOM\n} = require(\"./encoding\");\n\nconst {\n  percentDecodeBytes,\n  utf8PercentEncodeString,\n  isURLEncodedPercentEncode\n} = require(\"./percent-encoding\"); // https://url.spec.whatwg.org/#concept-urlencoded-parser\n\n\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, 38);\n  const output = [];\n\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name;\n    let value;\n    const indexOfEqual = bytes.indexOf(61);\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = new Uint8Array(0);\n    }\n\n    name = replaceByteInByteSequence(name, 0x2B, 0x20);\n    value = replaceByteInByteSequence(value, 0x2B, 0x20);\n    const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n    const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n    output.push([nameString, valueString]);\n  }\n\n  return output;\n} // https://url.spec.whatwg.org/#concept-urlencoded-string-parser\n\n\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n} // https://url.spec.whatwg.org/#concept-urlencoded-serializer\n\n\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n\n  if (encodingOverride !== undefined) {\n    // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n    const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n    let value = tuple[1];\n\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n\n    value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n\n    if (i !== 0) {\n      output += \"&\";\n    }\n\n    output += `${name}=${value}`;\n  }\n\n  return output;\n}\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n\n  return buf;\n}\n\nmodule.exports = {\n  parseUrlencodedString,\n  serializeUrlencoded\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/whatwg-url/dist/urlencoded.js"],"names":["utf8Encode","utf8DecodeWithoutBOM","require","percentDecodeBytes","utf8PercentEncodeString","isURLEncodedPercentEncode","parseUrlencoded","input","sequences","strictlySplitByteSequence","output","bytes","length","name","value","indexOfEqual","indexOf","slice","Uint8Array","replaceByteInByteSequence","nameString","valueString","push","parseUrlencodedString","serializeUrlencoded","tuples","encodingOverride","undefined","encoding","i","tuple","entries","buf","cp","list","last","from","to","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { utf8Encode, utf8DecodeWithoutBOM } = require(\"./encoding\");\nconst { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = require(\"./percent-encoding\");\n\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, 38);\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name;\n    let value;\n    const indexOfEqual = bytes.indexOf(61);\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = new Uint8Array(0);\n    }\n\n    name = replaceByteInByteSequence(name, 0x2B, 0x20);\n    value = replaceByteInByteSequence(value, 0x2B, 0x20);\n\n    const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n    const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n\n    output.push([nameString, valueString]);\n  }\n  return output;\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n\n    const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n\n    let value = tuple[1];\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n\n    value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\n\nmodule.exports = {\n  parseUrlencodedString,\n  serializeUrlencoded\n};\n"]},"metadata":{},"sourceType":"script"}