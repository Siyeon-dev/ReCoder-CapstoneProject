{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  asciiLowercase,\n  parseNonNegativeInteger\n} = require(\"../helpers/strings\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n\n  const parsed = parseNonNegativeInteger(attrValue);\n\n  if (parsed === null) {\n    return defaultValue;\n  }\n\n  if (parsed < min) {\n    return min;\n  }\n\n  if (parsed > max) {\n    return max;\n  }\n\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttributeNS(null, \"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttributeNS(null, \"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttributeNS(null, \"scope\");\n\n    if (value === null) {\n      return \"\";\n    } // Enumerated attribute is matched ASCII-case-insensitively.\n\n\n    value = asciiLowercase(value);\n\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttributeNS(null, \"scope\", V);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement-impl.js"],"names":["HTMLElementImpl","require","implementation","asciiLowercase","parseNonNegativeInteger","closest","reflectedAttributeClampedToRange","attrValue","min","max","defaultValue","parsed","HTMLTableCellElementImpl","colSpan","getAttributeNS","V","setAttributeNS","String","rowSpan","cellIndex","tr","cells","indexOf","scope","value","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AAEA,MAAM;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,IAA8CH,OAAO,CAAC,oBAAD,CAA3D;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAcJ,OAAO,CAAC,sBAAD,CAA3B;;AAEA,SAASK,gCAAT,CAA0CC,SAA1C,EAAqDC,GAArD,EAA0DC,GAA1D,EAA+DC,YAAY,GAAG,CAA9E,EAAiF;AAC/E,MAAIH,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAOG,YAAP;AACD;;AACD,QAAMC,MAAM,GAAGP,uBAAuB,CAACG,SAAD,CAAtC;;AACA,MAAII,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAOD,YAAP;AACD;;AACD,MAAIC,MAAM,GAAGH,GAAb,EAAkB;AAChB,WAAOA,GAAP;AACD;;AACD,MAAIG,MAAM,GAAGF,GAAb,EAAkB;AAChB,WAAOA,GAAP;AACD;;AACD,SAAOE,MAAP;AACD;;AAED,MAAMC,wBAAN,SAAuCZ,eAAvC,CAAuD;AAC1C,MAAPa,OAAO,GAAG;AACZ,WAAOP,gCAAgC,CAAC,KAAKQ,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAAD,EAAuC,CAAvC,EAA0C,IAA1C,EAAgD,CAAhD,CAAvC;AACD;;AAEU,MAAPD,OAAO,CAACE,CAAD,EAAI;AACb,SAAKC,cAAL,CAAoB,IAApB,EAA0B,SAA1B,EAAqCC,MAAM,CAACF,CAAD,CAA3C;AACD;;AAEU,MAAPG,OAAO,GAAG;AACZ,WAAOZ,gCAAgC,CAAC,KAAKQ,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAAD,EAAuC,CAAvC,EAA0C,KAA1C,EAAiD,CAAjD,CAAvC;AACD;;AAEU,MAAPI,OAAO,CAACH,CAAD,EAAI;AACb,SAAKC,cAAL,CAAoB,IAApB,EAA0B,SAA1B,EAAqCC,MAAM,CAACF,CAAD,CAA3C;AACD;;AAEY,MAATI,SAAS,GAAG;AACd,UAAMC,EAAE,GAAGf,OAAO,CAAC,IAAD,EAAO,IAAP,CAAlB;;AACA,QAAIe,EAAE,KAAK,IAAX,EAAiB;AACf,aAAO,CAAC,CAAR;AACD;;AAED,WAAOA,EAAE,CAACC,KAAH,CAASC,OAAT,CAAiB,IAAjB,CAAP;AACD;;AAEQ,MAALC,KAAK,GAAG;AACV,QAAIC,KAAK,GAAG,KAAKV,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAZ;;AACA,QAAIU,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,EAAP;AACD,KAJS,CAMV;;;AACAA,IAAAA,KAAK,GAAGrB,cAAc,CAACqB,KAAD,CAAtB;;AACA,QAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,KAA7B,IAAsCA,KAAK,KAAK,UAAhD,IAA8DA,KAAK,KAAK,UAA5E,EAAwF;AACtF,aAAOA,KAAP;AACD;;AAED,WAAO,EAAP;AACD;;AAEQ,MAALD,KAAK,CAACR,CAAD,EAAI;AACX,SAAKC,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmCD,CAAnC;AACD;;AA3CoD;;AA8CvDU,MAAM,CAACC,OAAP,GAAiB;AACfxB,EAAAA,cAAc,EAAEU;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst { asciiLowercase, parseNonNegativeInteger } = require(\"../helpers/strings\");\nconst { closest } = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  const parsed = parseNonNegativeInteger(attrValue);\n  if (parsed === null) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttributeNS(null, \"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttributeNS(null, \"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttributeNS(null, \"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttributeNS(null, \"scope\", V);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}