{"ast":null,"code":"\"use strict\";\n\nconst {\n  solelyContainsHTTPTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = mimeType => {\n  let serialization = `${mimeType.type}/${mimeType.subtype}`;\n\n  if (mimeType.parameters.size === 0) {\n    return serialization;\n  }\n\n  for (let [name, value] of mimeType.parameters) {\n    serialization += \";\";\n    serialization += name;\n    serialization += \"=\";\n\n    if (!solelyContainsHTTPTokenCodePoints(value) || value.length === 0) {\n      value = value.replace(/([\"\\\\])/g, \"\\\\$1\");\n      value = `\"${value}\"`;\n    }\n\n    serialization += value;\n  }\n\n  return serialization;\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/whatwg-mimetype/lib/serializer.js"],"names":["solelyContainsHTTPTokenCodePoints","require","module","exports","mimeType","serialization","type","subtype","parameters","size","name","value","length","replace"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAwCC,OAAO,CAAC,YAAD,CAArD;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,IAAI;AAC3B,MAAIC,aAAa,GAAI,GAAED,QAAQ,CAACE,IAAK,IAAGF,QAAQ,CAACG,OAAQ,EAAzD;;AAEA,MAAIH,QAAQ,CAACI,UAAT,CAAoBC,IAApB,KAA6B,CAAjC,EAAoC;AAClC,WAAOJ,aAAP;AACD;;AAED,OAAK,IAAI,CAACK,IAAD,EAAOC,KAAP,CAAT,IAA0BP,QAAQ,CAACI,UAAnC,EAA+C;AAC7CH,IAAAA,aAAa,IAAI,GAAjB;AACAA,IAAAA,aAAa,IAAIK,IAAjB;AACAL,IAAAA,aAAa,IAAI,GAAjB;;AAEA,QAAI,CAACL,iCAAiC,CAACW,KAAD,CAAlC,IAA6CA,KAAK,CAACC,MAAN,KAAiB,CAAlE,EAAqE;AACnED,MAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,UAAd,EAA0B,MAA1B,CAAR;AACAF,MAAAA,KAAK,GAAI,IAAGA,KAAM,GAAlB;AACD;;AAEDN,IAAAA,aAAa,IAAIM,KAAjB;AACD;;AAED,SAAON,aAAP;AACD,CArBD","sourcesContent":["\"use strict\";\nconst { solelyContainsHTTPTokenCodePoints } = require(\"./utils.js\");\n\nmodule.exports = mimeType => {\n  let serialization = `${mimeType.type}/${mimeType.subtype}`;\n\n  if (mimeType.parameters.size === 0) {\n    return serialization;\n  }\n\n  for (let [name, value] of mimeType.parameters) {\n    serialization += \";\";\n    serialization += name;\n    serialization += \"=\";\n\n    if (!solelyContainsHTTPTokenCodePoints(value) || value.length === 0) {\n      value = value.replace(/([\"\\\\])/g, \"\\\\$1\");\n      value = `\"${value}\"`;\n    }\n\n    serialization += value;\n  }\n\n  return serialization;\n};\n"]},"metadata":{},"sourceType":"script"}