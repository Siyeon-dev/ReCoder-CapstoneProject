{"ast":null,"code":"'use strict';\n\nvar errors = require('./errors.js'),\n    isFunction = require('lodash/isFunction'),\n    isObjectLike = require('lodash/isObjectLike'),\n    isString = require('lodash/isString'),\n    isUndefined = require('lodash/isUndefined');\n\nmodule.exports = function (options) {\n  var errorText = 'Please verify options'; // For better minification because this string is repeating\n\n  if (!isObjectLike(options)) {\n    throw new TypeError(errorText);\n  }\n\n  if (!isFunction(options.PromiseImpl)) {\n    throw new TypeError(errorText + '.PromiseImpl');\n  }\n\n  if (!isUndefined(options.constructorMixin) && !isFunction(options.constructorMixin)) {\n    throw new TypeError(errorText + '.PromiseImpl');\n  }\n\n  var PromiseImpl = options.PromiseImpl;\n  var constructorMixin = options.constructorMixin;\n  var plumbing = {};\n\n  plumbing.init = function (requestOptions) {\n    var self = this;\n    self._rp_promise = new PromiseImpl(function (resolve, reject) {\n      self._rp_resolve = resolve;\n      self._rp_reject = reject;\n\n      if (constructorMixin) {\n        constructorMixin.apply(self, arguments); // Using arguments since specific Promise libraries may pass additional parameters\n      }\n    });\n    self._rp_callbackOrig = requestOptions.callback;\n\n    requestOptions.callback = self.callback = function RP$callback(err, response, body) {\n      plumbing.callback.call(self, err, response, body);\n    };\n\n    if (isString(requestOptions.method)) {\n      requestOptions.method = requestOptions.method.toUpperCase();\n    }\n\n    requestOptions.transform = requestOptions.transform || plumbing.defaultTransformations[requestOptions.method];\n    self._rp_options = requestOptions;\n    self._rp_options.simple = requestOptions.simple !== false;\n    self._rp_options.resolveWithFullResponse = requestOptions.resolveWithFullResponse === true;\n    self._rp_options.transform2xxOnly = requestOptions.transform2xxOnly === true;\n  };\n\n  plumbing.defaultTransformations = {\n    HEAD: function (body, response, resolveWithFullResponse) {\n      return resolveWithFullResponse ? response : response.headers;\n    }\n  };\n\n  plumbing.callback = function (err, response, body) {\n    var self = this;\n    var origCallbackThrewException = false,\n        thrownException = null;\n\n    if (isFunction(self._rp_callbackOrig)) {\n      try {\n        self._rp_callbackOrig.apply(self, arguments); // TODO: Apply to self mimics behavior of request@2. Is that also right for request@next?\n\n      } catch (e) {\n        origCallbackThrewException = true;\n        thrownException = e;\n      }\n    }\n\n    var is2xx = !err && /^2/.test('' + response.statusCode);\n\n    if (err) {\n      self._rp_reject(new errors.RequestError(err, self._rp_options, response));\n    } else if (self._rp_options.simple && !is2xx) {\n      if (isFunction(self._rp_options.transform) && self._rp_options.transform2xxOnly === false) {\n        new PromiseImpl(function (resolve) {\n          resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n        }).then(function (transformedResponse) {\n          self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, transformedResponse));\n        }).catch(function (transformErr) {\n          self._rp_reject(new errors.TransformError(transformErr, self._rp_options, response));\n        });\n      } else {\n        self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, response));\n      }\n    } else {\n      if (isFunction(self._rp_options.transform) && (is2xx || self._rp_options.transform2xxOnly === false)) {\n        new PromiseImpl(function (resolve) {\n          resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n        }).then(function (transformedResponse) {\n          self._rp_resolve(transformedResponse);\n        }).catch(function (transformErr) {\n          self._rp_reject(new errors.TransformError(transformErr, self._rp_options, response));\n        });\n      } else if (self._rp_options.resolveWithFullResponse) {\n        self._rp_resolve(response);\n      } else {\n        self._rp_resolve(body);\n      }\n    }\n\n    if (origCallbackThrewException) {\n      throw thrownException;\n    }\n  };\n\n  plumbing.exposePromiseMethod = function (exposeTo, bindTo, promisePropertyKey, methodToExpose, exposeAs) {\n    exposeAs = exposeAs || methodToExpose;\n\n    if (exposeAs in exposeTo) {\n      throw new Error('Unable to expose method \"' + exposeAs + '\"');\n    }\n\n    exposeTo[exposeAs] = function RP$exposed() {\n      var self = bindTo || this;\n      return self[promisePropertyKey][methodToExpose].apply(self[promisePropertyKey], arguments);\n    };\n  };\n\n  plumbing.exposePromise = function (exposeTo, bindTo, promisePropertyKey, exposeAs) {\n    exposeAs = exposeAs || 'promise';\n\n    if (exposeAs in exposeTo) {\n      throw new Error('Unable to expose method \"' + exposeAs + '\"');\n    }\n\n    exposeTo[exposeAs] = function RP$promise() {\n      var self = bindTo || this;\n      return self[promisePropertyKey];\n    };\n  };\n\n  return plumbing;\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/request-promise-core/lib/plumbing.js"],"names":["errors","require","isFunction","isObjectLike","isString","isUndefined","module","exports","options","errorText","TypeError","PromiseImpl","constructorMixin","plumbing","init","requestOptions","self","_rp_promise","resolve","reject","_rp_resolve","_rp_reject","apply","arguments","_rp_callbackOrig","callback","RP$callback","err","response","body","call","method","toUpperCase","transform","defaultTransformations","_rp_options","simple","resolveWithFullResponse","transform2xxOnly","HEAD","headers","origCallbackThrewException","thrownException","e","is2xx","test","statusCode","RequestError","then","transformedResponse","StatusCodeError","catch","transformErr","TransformError","exposePromiseMethod","exposeTo","bindTo","promisePropertyKey","methodToExpose","exposeAs","Error","RP$exposed","exposePromise","RP$promise"],"mappings":"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","sourcesContent":["'use strict';\n\nvar errors = require('./errors.js'),\n    isFunction = require('lodash/isFunction'),\n    isObjectLike = require('lodash/isObjectLike'),\n    isString = require('lodash/isString'),\n    isUndefined = require('lodash/isUndefined');\n\n\nmodule.exports = function (options) {\n\n    var errorText = 'Please verify options'; // For better minification because this string is repeating\n\n    if (!isObjectLike(options)) {\n        throw new TypeError(errorText);\n    }\n\n    if (!isFunction(options.PromiseImpl)) {\n        throw new TypeError(errorText + '.PromiseImpl');\n    }\n\n    if (!isUndefined(options.constructorMixin) && !isFunction(options.constructorMixin)) {\n        throw new TypeError(errorText + '.PromiseImpl');\n    }\n\n    var PromiseImpl = options.PromiseImpl;\n    var constructorMixin = options.constructorMixin;\n\n\n    var plumbing = {};\n\n    plumbing.init = function (requestOptions) {\n\n        var self = this;\n\n        self._rp_promise = new PromiseImpl(function (resolve, reject) {\n            self._rp_resolve = resolve;\n            self._rp_reject = reject;\n            if (constructorMixin) {\n                constructorMixin.apply(self, arguments); // Using arguments since specific Promise libraries may pass additional parameters\n            }\n        });\n\n        self._rp_callbackOrig = requestOptions.callback;\n        requestOptions.callback = self.callback = function RP$callback(err, response, body) {\n            plumbing.callback.call(self, err, response, body);\n        };\n\n        if (isString(requestOptions.method)) {\n            requestOptions.method = requestOptions.method.toUpperCase();\n        }\n\n        requestOptions.transform = requestOptions.transform || plumbing.defaultTransformations[requestOptions.method];\n\n        self._rp_options = requestOptions;\n        self._rp_options.simple = requestOptions.simple !== false;\n        self._rp_options.resolveWithFullResponse = requestOptions.resolveWithFullResponse === true;\n        self._rp_options.transform2xxOnly = requestOptions.transform2xxOnly === true;\n\n    };\n\n    plumbing.defaultTransformations = {\n        HEAD: function (body, response, resolveWithFullResponse) {\n            return resolveWithFullResponse ? response : response.headers;\n        }\n    };\n\n    plumbing.callback = function (err, response, body) {\n\n        var self = this;\n\n        var origCallbackThrewException = false, thrownException = null;\n\n        if (isFunction(self._rp_callbackOrig)) {\n            try {\n                self._rp_callbackOrig.apply(self, arguments); // TODO: Apply to self mimics behavior of request@2. Is that also right for request@next?\n            } catch (e) {\n                origCallbackThrewException = true;\n                thrownException = e;\n            }\n        }\n\n        var is2xx = !err && /^2/.test('' + response.statusCode);\n\n        if (err) {\n\n            self._rp_reject(new errors.RequestError(err, self._rp_options, response));\n\n        } else if (self._rp_options.simple && !is2xx) {\n\n            if (isFunction(self._rp_options.transform) && self._rp_options.transform2xxOnly === false) {\n\n                (new PromiseImpl(function (resolve) {\n                    resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n                }))\n                    .then(function (transformedResponse) {\n                        self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, transformedResponse));\n                    })\n                    .catch(function (transformErr) {\n                        self._rp_reject(new errors.TransformError(transformErr, self._rp_options, response));\n                    });\n\n            } else {\n                self._rp_reject(new errors.StatusCodeError(response.statusCode, body, self._rp_options, response));\n            }\n\n        } else {\n\n            if (isFunction(self._rp_options.transform) && (is2xx || self._rp_options.transform2xxOnly === false)) {\n\n                (new PromiseImpl(function (resolve) {\n                    resolve(self._rp_options.transform(body, response, self._rp_options.resolveWithFullResponse)); // transform may return a Promise\n                }))\n                    .then(function (transformedResponse) {\n                        self._rp_resolve(transformedResponse);\n                    })\n                    .catch(function (transformErr) {\n                        self._rp_reject(new errors.TransformError(transformErr, self._rp_options, response));\n                    });\n\n            } else if (self._rp_options.resolveWithFullResponse) {\n                self._rp_resolve(response);\n            } else {\n                self._rp_resolve(body);\n            }\n\n        }\n\n        if (origCallbackThrewException) {\n            throw thrownException;\n        }\n\n    };\n\n    plumbing.exposePromiseMethod = function (exposeTo, bindTo, promisePropertyKey, methodToExpose, exposeAs) {\n\n        exposeAs = exposeAs || methodToExpose;\n\n        if (exposeAs in exposeTo) {\n            throw new Error('Unable to expose method \"' + exposeAs + '\"');\n        }\n\n        exposeTo[exposeAs] = function RP$exposed() {\n            var self = bindTo || this;\n            return self[promisePropertyKey][methodToExpose].apply(self[promisePropertyKey], arguments);\n        };\n\n    };\n\n    plumbing.exposePromise = function (exposeTo, bindTo, promisePropertyKey, exposeAs) {\n\n        exposeAs = exposeAs || 'promise';\n\n        if (exposeAs in exposeTo) {\n            throw new Error('Unable to expose method \"' + exposeAs + '\"');\n        }\n\n        exposeTo[exposeAs] = function RP$promise() {\n            var self = bindTo || this;\n            return self[promisePropertyKey];\n        };\n\n    };\n\n    return plumbing;\n\n};\n"]},"metadata":{},"sourceType":"script"}