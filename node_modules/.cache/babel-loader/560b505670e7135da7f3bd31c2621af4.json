{"ast":null,"code":"\"use strict\"; // https://infra.spec.whatwg.org/#sets\n//\n// Only use this class if a Set cannot be used, e.g. when \"replace\" operation is needed, since there's no way to replace\n// an element while keep the relative order using a Set, only remove and then add something at the end.\n\nmodule.exports = class OrderedSet {\n  constructor() {\n    this._items = [];\n  }\n\n  append(item) {\n    if (!this.contains(item)) {\n      this._items.push(item);\n    }\n  }\n\n  prepend(item) {\n    if (!this.contains(item)) {\n      this._items.unshift(item);\n    }\n  }\n\n  replace(item, replacement) {\n    let seen = false;\n\n    for (let i = 0; i < this._items.length;) {\n      const isInstance = this._items[i] === item || this._items[i] === replacement;\n\n      if (seen && isInstance) {\n        this._items.splice(i, 1);\n      } else {\n        if (isInstance) {\n          this._items[i] = replacement;\n          seen = true;\n        }\n\n        i++;\n      }\n    }\n  }\n\n  remove(...items) {\n    this.removePredicate(item => items.includes(item));\n  }\n\n  removePredicate(predicate) {\n    for (let i = 0; i < this._items.length;) {\n      if (predicate(this._items[i])) {\n        this._items.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n  }\n\n  empty() {\n    this._items.length = 0;\n  }\n\n  contains(item) {\n    return this._items.includes(item);\n  }\n\n  get size() {\n    return this._items.length;\n  }\n\n  isEmpty() {\n    return this._items.length === 0;\n  } // Useful for other parts of jsdom\n\n\n  [Symbol.iterator]() {\n    return this._items[Symbol.iterator]();\n  }\n\n  keys() {\n    return this._items.keys();\n  }\n\n  get(index) {\n    return this._items[index];\n  }\n\n  some(func) {\n    return this._items.some(func);\n  } // https://dom.spec.whatwg.org/#concept-ordered-set-parser\n\n\n  static parse(input) {\n    const tokens = new OrderedSet();\n\n    for (const token of input.split(/[\\t\\n\\f\\r ]+/)) {\n      if (token) {\n        tokens.append(token);\n      }\n    }\n\n    return tokens;\n  } // https://dom.spec.whatwg.org/#concept-ordered-set-serializer\n\n\n  serialize() {\n    return this._items.join(\" \");\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/helpers/ordered-set.js"],"names":["module","exports","OrderedSet","constructor","_items","append","item","contains","push","prepend","unshift","replace","replacement","seen","i","length","isInstance","splice","remove","items","removePredicate","includes","predicate","empty","size","isEmpty","Symbol","iterator","keys","get","index","some","func","parse","input","tokens","token","split","serialize","join"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// https://infra.spec.whatwg.org/#sets\n//\n// Only use this class if a Set cannot be used, e.g. when \"replace\" operation is needed, since there's no way to replace\n// an element while keep the relative order using a Set, only remove and then add something at the end.\n\nmodule.exports = class OrderedSet {\n  constructor() {\n    this._items = [];\n  }\n\n  append(item) {\n    if (!this.contains(item)) {\n      this._items.push(item);\n    }\n  }\n\n  prepend(item) {\n    if (!this.contains(item)) {\n      this._items.unshift(item);\n    }\n  }\n\n  replace(item, replacement) {\n    let seen = false;\n    for (let i = 0; i < this._items.length;) {\n      const isInstance = this._items[i] === item || this._items[i] === replacement;\n      if (seen && isInstance) {\n        this._items.splice(i, 1);\n      } else {\n        if (isInstance) {\n          this._items[i] = replacement;\n          seen = true;\n        }\n        i++;\n      }\n    }\n  }\n\n  remove(...items) {\n    this.removePredicate(item => items.includes(item));\n  }\n\n  removePredicate(predicate) {\n    for (let i = 0; i < this._items.length;) {\n      if (predicate(this._items[i])) {\n        this._items.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n  }\n\n  empty() {\n    this._items.length = 0;\n  }\n\n  contains(item) {\n    return this._items.includes(item);\n  }\n\n  get size() {\n    return this._items.length;\n  }\n\n  isEmpty() {\n    return this._items.length === 0;\n  }\n\n  // Useful for other parts of jsdom\n\n  [Symbol.iterator]() {\n    return this._items[Symbol.iterator]();\n  }\n\n  keys() {\n    return this._items.keys();\n  }\n\n  get(index) {\n    return this._items[index];\n  }\n\n  some(func) {\n    return this._items.some(func);\n  }\n\n  // https://dom.spec.whatwg.org/#concept-ordered-set-parser\n  static parse(input) {\n    const tokens = new OrderedSet();\n    for (const token of input.split(/[\\t\\n\\f\\r ]+/)) {\n      if (token) {\n        tokens.append(token);\n      }\n    }\n    return tokens;\n  }\n\n  // https://dom.spec.whatwg.org/#concept-ordered-set-serializer\n  serialize() {\n    return this._items.join(\" \");\n  }\n};\n"]},"metadata":{},"sourceType":"script"}