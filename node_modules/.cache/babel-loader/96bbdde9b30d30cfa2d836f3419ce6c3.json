{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\n\nconst {\n  setupForSimpleEventAccessors\n} = require(\"../helpers/create-event-accessor\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst {\n  copyToArrayBufferInNewRealm\n} = require(\"../helpers/binary-data\");\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n    this._globalObject = globalObject;\n    this._ownerDocument = globalObject.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n\n    this._fireProgressEvent(\"abort\");\n\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    fireAnEvent(name, this, ProgressEvent, props);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.readyState = READY_STATES.LOADING;\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\":\n            {\n              this.result = copyToArrayBufferInNewRealm(data, this._globalObject);\n              break;\n            }\n\n          case \"binaryString\":\n            {\n              this.result = data.toString(\"binary\");\n              break;\n            }\n\n          case \"dataURL\":\n            {\n              // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.\n              const contentType = MIMEType.parse(file.type) || \"application/octet-stream\";\n              this.result = `data:${contentType};base64,${data.toString(\"base64\")}`;\n              break;\n            }\n\n          case \"text\":\n            {\n              this.result = whatwgEncoding.decode(data, encoding);\n              break;\n            }\n        }\n\n        this.readyState = READY_STATES.DONE;\n\n        this._fireProgressEvent(\"load\");\n\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n\n}\n\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/file-api/FileReader-impl.js"],"names":["whatwgEncoding","require","MIMEType","DOMException","EventTargetImpl","implementation","ProgressEvent","setupForSimpleEventAccessors","fireAnEvent","copyToArrayBufferInNewRealm","READY_STATES","Object","freeze","EMPTY","LOADING","DONE","events","FileReaderImpl","constructor","globalObject","args","privateData","error","readyState","result","_globalObject","_ownerDocument","document","_terminated","readAsArrayBuffer","file","_readFile","readAsBinaryString","readAsDataURL","readAsText","encoding","labelToName","abort","_fireProgressEvent","name","props","format","create","setImmediate","data","_buffer","Buffer","alloc","lengthComputable","isNaN","size","total","loaded","length","toString","contentType","parse","type","decode","prototype","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst { copyToArrayBufferInNewRealm } = require(\"../helpers/binary-data\");\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\n\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n\n    this._globalObject = globalObject;\n    this._ownerDocument = globalObject.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n    this._fireProgressEvent(\"abort\");\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    fireAnEvent(name, this, ProgressEvent, props);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw DOMException.create(this._globalObject, [\n        \"The object is in an invalid state.\",\n        \"InvalidStateError\"\n      ]);\n    }\n\n    this.readyState = READY_STATES.LOADING;\n\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\": {\n            this.result = copyToArrayBufferInNewRealm(data, this._globalObject);\n            break;\n          }\n          case \"binaryString\": {\n            this.result = data.toString(\"binary\");\n            break;\n          }\n          case \"dataURL\": {\n            // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.\n            const contentType = MIMEType.parse(file.type) || \"application/octet-stream\";\n            this.result = `data:${contentType};base64,${data.toString(\"base64\")}`;\n            break;\n          }\n          case \"text\": {\n            this.result = whatwgEncoding.decode(data, encoding);\n            break;\n          }\n        }\n        this.readyState = READY_STATES.DONE;\n        this._fireProgressEvent(\"load\");\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n}\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\n\nexports.implementation = FileReaderImpl;\n"]},"metadata":{},"sourceType":"script"}