{"ast":null,"code":"'use strict';\n\nvar core = require('../'),\n    isArray = require('lodash/isArray'),\n    isFunction = require('lodash/isFunction'),\n    isObjectLike = require('lodash/isObjectLike');\n\nmodule.exports = function (options) {\n  var errorText = 'Please verify options'; // For better minification because this string is repeating\n\n  if (!isObjectLike(options)) {\n    throw new TypeError(errorText);\n  }\n\n  if (!isFunction(options.request)) {\n    throw new TypeError(errorText + '.request');\n  }\n\n  if (!isArray(options.expose) || options.expose.length === 0) {\n    throw new TypeError(errorText + '.expose');\n  }\n\n  var plumbing = core({\n    PromiseImpl: options.PromiseImpl,\n    constructorMixin: options.constructorMixin\n  }); // Intercepting Request's init method\n\n  var originalInit = options.request.Request.prototype.init;\n\n  options.request.Request.prototype.init = function RP$initInterceptor(requestOptions) {\n    // Init may be called again - currently in case of redirects\n    if (isObjectLike(requestOptions) && !this._callback && !this._rp_promise) {\n      plumbing.init.call(this, requestOptions);\n    }\n\n    return originalInit.apply(this, arguments);\n  }; // Exposing the Promise capabilities\n\n\n  var thenExposed = false;\n\n  for (var i = 0; i < options.expose.length; i += 1) {\n    var method = options.expose[i];\n    plumbing[method === 'promise' ? 'exposePromise' : 'exposePromiseMethod'](options.request.Request.prototype, null, '_rp_promise', method);\n\n    if (method === 'then') {\n      thenExposed = true;\n    }\n  }\n\n  if (!thenExposed) {\n    throw new Error('Please expose \"then\"');\n  }\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/request-promise-core/configure/request2.js"],"names":["core","require","isArray","isFunction","isObjectLike","module","exports","options","errorText","TypeError","request","expose","length","plumbing","PromiseImpl","constructorMixin","originalInit","Request","prototype","init","RP$initInterceptor","requestOptions","_callback","_rp_promise","call","apply","arguments","thenExposed","i","method","Error"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAAlB;AAAA,IACIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CADrB;AAAA,IAEIE,UAAU,GAAGF,OAAO,CAAC,mBAAD,CAFxB;AAAA,IAGIG,YAAY,GAAGH,OAAO,CAAC,qBAAD,CAH1B;;AAMAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;AAEhC,MAAIC,SAAS,GAAG,uBAAhB,CAFgC,CAES;;AAEzC,MAAI,CAACJ,YAAY,CAACG,OAAD,CAAjB,EAA4B;AACxB,UAAM,IAAIE,SAAJ,CAAcD,SAAd,CAAN;AACH;;AAED,MAAI,CAACL,UAAU,CAACI,OAAO,CAACG,OAAT,CAAf,EAAkC;AAC9B,UAAM,IAAID,SAAJ,CAAcD,SAAS,GAAG,UAA1B,CAAN;AACH;;AAED,MAAI,CAACN,OAAO,CAACK,OAAO,CAACI,MAAT,CAAR,IAA4BJ,OAAO,CAACI,MAAR,CAAeC,MAAf,KAA0B,CAA1D,EAA6D;AACzD,UAAM,IAAIH,SAAJ,CAAcD,SAAS,GAAG,SAA1B,CAAN;AACH;;AAGD,MAAIK,QAAQ,GAAGb,IAAI,CAAC;AAChBc,IAAAA,WAAW,EAAEP,OAAO,CAACO,WADL;AAEhBC,IAAAA,gBAAgB,EAAER,OAAO,CAACQ;AAFV,GAAD,CAAnB,CAjBgC,CAuBhC;;AAEA,MAAIC,YAAY,GAAGT,OAAO,CAACG,OAAR,CAAgBO,OAAhB,CAAwBC,SAAxB,CAAkCC,IAArD;;AAEAZ,EAAAA,OAAO,CAACG,OAAR,CAAgBO,OAAhB,CAAwBC,SAAxB,CAAkCC,IAAlC,GAAyC,SAASC,kBAAT,CAA4BC,cAA5B,EAA4C;AAEjF;AACA,QAAIjB,YAAY,CAACiB,cAAD,CAAZ,IAAgC,CAAC,KAAKC,SAAtC,IAAmD,CAAC,KAAKC,WAA7D,EAA0E;AAEtEV,MAAAA,QAAQ,CAACM,IAAT,CAAcK,IAAd,CAAmB,IAAnB,EAAyBH,cAAzB;AAEH;;AAED,WAAOL,YAAY,CAACS,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAP;AAEH,GAXD,CA3BgC,CAyChC;;;AAEA,MAAIC,WAAW,GAAG,KAAlB;;AACA,OAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGrB,OAAO,CAACI,MAAR,CAAeC,MAApC,EAA4CgB,CAAC,IAAE,CAA/C,EAAmD;AAE/C,QAAIC,MAAM,GAAGtB,OAAO,CAACI,MAAR,CAAeiB,CAAf,CAAb;AAEAf,IAAAA,QAAQ,CAAEgB,MAAM,KAAK,SAAX,GAAuB,eAAvB,GAAyC,qBAA3C,CAAR,CACItB,OAAO,CAACG,OAAR,CAAgBO,OAAhB,CAAwBC,SAD5B,EAEI,IAFJ,EAGI,aAHJ,EAIIW,MAJJ;;AAOA,QAAIA,MAAM,KAAK,MAAf,EAAuB;AACnBF,MAAAA,WAAW,GAAG,IAAd;AACH;AAEJ;;AAED,MAAI,CAACA,WAAL,EAAkB;AACd,UAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;AACH;AAEJ,CAjED","sourcesContent":["'use strict';\n\nvar core = require('../'),\n    isArray = require('lodash/isArray'),\n    isFunction = require('lodash/isFunction'),\n    isObjectLike = require('lodash/isObjectLike');\n\n\nmodule.exports = function (options) {\n\n    var errorText = 'Please verify options'; // For better minification because this string is repeating\n\n    if (!isObjectLike(options)) {\n        throw new TypeError(errorText);\n    }\n\n    if (!isFunction(options.request)) {\n        throw new TypeError(errorText + '.request');\n    }\n\n    if (!isArray(options.expose) || options.expose.length === 0) {\n        throw new TypeError(errorText + '.expose');\n    }\n\n\n    var plumbing = core({\n        PromiseImpl: options.PromiseImpl,\n        constructorMixin: options.constructorMixin\n    });\n\n\n    // Intercepting Request's init method\n\n    var originalInit = options.request.Request.prototype.init;\n\n    options.request.Request.prototype.init = function RP$initInterceptor(requestOptions) {\n\n        // Init may be called again - currently in case of redirects\n        if (isObjectLike(requestOptions) && !this._callback && !this._rp_promise) {\n\n            plumbing.init.call(this, requestOptions);\n\n        }\n\n        return originalInit.apply(this, arguments);\n\n    };\n\n\n    // Exposing the Promise capabilities\n\n    var thenExposed = false;\n    for ( var i = 0; i < options.expose.length; i+=1 ) {\n\n        var method = options.expose[i];\n\n        plumbing[ method === 'promise' ? 'exposePromise' : 'exposePromiseMethod' ](\n            options.request.Request.prototype,\n            null,\n            '_rp_promise',\n            method\n        );\n\n        if (method === 'then') {\n            thenExposed = true;\n        }\n\n    }\n\n    if (!thenExposed) {\n        throw new Error('Please expose \"then\"');\n    }\n\n};\n"]},"metadata":{},"sourceType":"script"}