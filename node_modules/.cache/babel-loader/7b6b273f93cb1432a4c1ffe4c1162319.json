{"ast":null,"code":"\"use strict\";\n\nconst DOMTokenList = require(\"../generated/DOMTokenList\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst {\n  fetchStylesheet\n} = require(\"../helpers/stylesheets\");\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nconst whatwgURL = require(\"whatwg-url\"); // Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\n\nclass HTMLLinkElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this.sheet = null;\n  }\n\n  get relList() {\n    if (this._relList === undefined) {\n      this._relList = DOMTokenList.createImpl(this._globalObject, [], {\n        element: this,\n        attributeLocalName: \"rel\",\n        supportedTokens: new Set([\"stylesheet\"])\n      });\n    }\n\n    return this._relList;\n  }\n\n  _attach() {\n    super._attach();\n\n    maybeFetchAndProcess(this);\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"href\") {\n      // TODO crossorigin=\"\" or type=\"\"\n      maybeFetchAndProcess(this);\n    }\n\n    if (name === \"rel\" && this._relList !== undefined) {\n      this._relList.attrModified();\n    }\n  }\n\n  get _accept() {\n    return \"text/css,*/*;q=0.1\";\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n}; // https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n\nfunction maybeFetchAndProcess(el) {\n  if (!isExternalResourceLink(el)) {\n    return;\n  } // Browsing-context connected\n\n\n  if (!el.isConnected || !el._ownerDocument._defaultView) {\n    return;\n  }\n\n  fetchAndProcess(el);\n} // https://html.spec.whatwg.org/multipage/semantics.html#default-fetch-and-process-the-linked-resource\n// TODO: refactor into general link-fetching like the spec.\n\n\nfunction fetchAndProcess(el) {\n  const href = el.getAttributeNS(null, \"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  const url = parseURLToResultingURLRecord(href, el._ownerDocument);\n\n  if (url === null) {\n    return;\n  } // TODO handle crossorigin=\"\", nonce, integrity=\"\", referrerpolicy=\"\"\n\n\n  const serialized = whatwgURL.serializeURL(url);\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  const wrapper = idlUtils.wrapperForImpl(el);\n\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return el.hasAttributeNS(null, \"href\");\n}","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLinkElement-impl.js"],"names":["DOMTokenList","require","HTMLElementImpl","implementation","idlUtils","fetchStylesheet","parseURLToResultingURLRecord","whatwgURL","HTMLLinkElementImpl","constructor","globalObject","args","privateData","sheet","relList","_relList","undefined","createImpl","_globalObject","element","attributeLocalName","supportedTokens","Set","_attach","maybeFetchAndProcess","_attrModified","name","value","oldValue","attrModified","_accept","module","exports","el","isExternalResourceLink","isConnected","_ownerDocument","_defaultView","fetchAndProcess","href","getAttributeNS","url","serialized","serializeURL","wrapper","wrapperForImpl","test","rel","hasAttributeNS"],"mappings":"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","sourcesContent":["\"use strict\";\nconst DOMTokenList = require(\"../generated/DOMTokenList\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst idlUtils = require(\"../generated/utils\");\nconst { fetchStylesheet } = require(\"../helpers/stylesheets\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\nconst whatwgURL = require(\"whatwg-url\");\n\n// Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\nclass HTMLLinkElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this.sheet = null;\n  }\n\n  get relList() {\n    if (this._relList === undefined) {\n      this._relList = DOMTokenList.createImpl(this._globalObject, [], {\n        element: this,\n        attributeLocalName: \"rel\",\n        supportedTokens: new Set([\"stylesheet\"])\n      });\n    }\n    return this._relList;\n  }\n\n  _attach() {\n    super._attach();\n    maybeFetchAndProcess(this);\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (name === \"href\") { // TODO crossorigin=\"\" or type=\"\"\n      maybeFetchAndProcess(this);\n    }\n\n    if (name === \"rel\" && this._relList !== undefined) {\n      this._relList.attrModified();\n    }\n  }\n\n  get _accept() {\n    return \"text/css,*/*;q=0.1\";\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n};\n\n// https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\nfunction maybeFetchAndProcess(el) {\n  if (!isExternalResourceLink(el)) {\n    return;\n  }\n\n  // Browsing-context connected\n  if (!el.isConnected || !el._ownerDocument._defaultView) {\n    return;\n  }\n\n  fetchAndProcess(el);\n}\n\n// https://html.spec.whatwg.org/multipage/semantics.html#default-fetch-and-process-the-linked-resource\n// TODO: refactor into general link-fetching like the spec.\nfunction fetchAndProcess(el) {\n  const href = el.getAttributeNS(null, \"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  const url = parseURLToResultingURLRecord(href, el._ownerDocument);\n  if (url === null) {\n    return;\n  }\n\n  // TODO handle crossorigin=\"\", nonce, integrity=\"\", referrerpolicy=\"\"\n\n  const serialized = whatwgURL.serializeURL(url);\n\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  const wrapper = idlUtils.wrapperForImpl(el);\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return el.hasAttributeNS(null, \"href\");\n}\n"]},"metadata":{},"sourceType":"script"}