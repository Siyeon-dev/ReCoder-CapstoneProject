{"ast":null,"code":"\"use strict\";\n\nconst {\n  parseFloatingPointNumber\n} = require(\"./strings\");\n\nconst {\n  parseDateString,\n  parseLocalDateAndTimeString,\n  parseMonthString,\n  parseTimeString,\n  parseWeekString,\n  serializeDate,\n  serializeMonth,\n  serializeNormalizedDateAndTime,\n  serializeTime,\n  serializeWeek,\n  parseDateAsWeek\n} = require(\"./dates-and-times\"); // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\n\n\nfunction getUTCMs(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0) {\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n\n  const d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nconst dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\nexports.convertStringToNumberByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date(input) {\n    const date = parseDateString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    return getUTCMs(date.year, date.month, date.day);\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month(input) {\n    const date = parseMonthString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    return (date.year - 1970) * 12 + (date.month - 1);\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n  week(input) {\n    const date = parseWeekString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    const dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n\n    const dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n    return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n  time(input) {\n    const time = parseTimeString(input);\n\n    if (time === null) {\n      return null;\n    }\n\n    return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n  \"datetime-local\"(input) {\n    const dateAndTime = parseLocalDateAndTimeString(input);\n\n    if (dateAndTime === null) {\n      return null;\n    }\n\n    const {\n      date: {\n        year,\n        month,\n        day\n      },\n      time: {\n        hour,\n        minute,\n        second,\n        millisecond\n      }\n    } = dateAndTime; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n\n    return getUTCMs(year, month, day, hour, minute, second, millisecond);\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n  number: parseFloatingPointNumber,\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n  range: parseFloatingPointNumber\n};\nexports.convertStringToDateByType = {\n  date(input) {\n    const parsedInput = exports.convertStringToNumberByType.date(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month(input) {\n    const parsedMonthString = parseMonthString(input);\n\n    if (parsedMonthString === null) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCFullYear(parsedMonthString.year);\n    date.setUTCMonth(parsedMonthString.month - 1);\n    return date;\n  },\n\n  week(input) {\n    const parsedInput = exports.convertStringToNumberByType.week(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n\n  time(input) {\n    const parsedInput = exports.convertStringToNumberByType.time(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n\n  \"datetime-local\"(input) {\n    const parsedInput = exports.convertStringToNumberByType[\"datetime-local\"](input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  }\n\n};\nexports.serializeDateByType = {\n  date(input) {\n    return serializeDate({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1,\n      day: input.getUTCDate()\n    });\n  },\n\n  month(input) {\n    return serializeMonth({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1\n    });\n  },\n\n  week(input) {\n    return serializeWeek(parseDateAsWeek(input));\n  },\n\n  time(input) {\n    return serializeTime({\n      hour: input.getUTCHours(),\n      minute: input.getUTCMinutes(),\n      second: input.getUTCSeconds(),\n      millisecond: input.getUTCMilliseconds()\n    });\n  },\n\n  \"datetime-local\"(input) {\n    return serializeNormalizedDateAndTime({\n      date: {\n        year: input.getUTCFullYear(),\n        month: input.getUTCMonth() + 1,\n        day: input.getUTCDate()\n      },\n      time: {\n        hour: input.getUTCHours(),\n        minute: input.getUTCMinutes(),\n        second: input.getUTCSeconds(),\n        millisecond: input.getUTCMilliseconds()\n      }\n    });\n  }\n\n};\nexports.convertNumberToStringByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date(input) {\n    return exports.serializeDateByType.date(new Date(input));\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-date\n  month(input) {\n    const year = 1970 + Math.floor(input / 12);\n    const month = input % 12;\n    const date = new Date(0);\n    date.setUTCFullYear(year);\n    date.setUTCMonth(month);\n    return exports.serializeDateByType.month(date);\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-date\n  week(input) {\n    return exports.serializeDateByType.week(new Date(input));\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-date\n  time(input) {\n    return exports.serializeDateByType.time(new Date(input));\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-number-string\n  \"datetime-local\"(input) {\n    return exports.serializeDateByType[\"datetime-local\"](new Date(input));\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-number-string\n  number(input) {\n    return input.toString();\n  },\n\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-number-string\n  range(input) {\n    return input.toString();\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/helpers/number-and-date-inputs.js"],"names":["parseFloatingPointNumber","require","parseDateString","parseLocalDateAndTimeString","parseMonthString","parseTimeString","parseWeekString","serializeDate","serializeMonth","serializeNormalizedDateAndTime","serializeTime","serializeWeek","parseDateAsWeek","getUTCMs","year","month","day","hour","minute","second","millisecond","Date","UTC","d","setUTCFullYear","setUTCMonth","setUTCDate","setUTCHours","setUTCMinutes","setUTCSeconds","valueOf","dayOfWeekRelMondayLUT","exports","convertStringToNumberByType","date","input","week","dateObj","dayOfWeekRelMonday","getUTCDay","time","dateAndTime","number","range","convertStringToDateByType","parsedInput","parsedMonthString","serializeDateByType","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","convertNumberToStringByType","Math","floor","toString"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { parseFloatingPointNumber } = require(\"./strings\");\nconst {\n  parseDateString,\n  parseLocalDateAndTimeString,\n  parseMonthString,\n  parseTimeString,\n  parseWeekString,\n\n  serializeDate,\n  serializeMonth,\n  serializeNormalizedDateAndTime,\n  serializeTime,\n  serializeWeek,\n  parseDateAsWeek\n} = require(\"./dates-and-times\");\n\n// Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\nfunction getUTCMs(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, millisecond = 0) {\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n  const d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nconst dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\n\nexports.convertStringToNumberByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date(input) {\n    const date = parseDateString(input);\n    if (date === null) {\n      return null;\n    }\n    return getUTCMs(date.year, date.month, date.day);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month(input) {\n    const date = parseMonthString(input);\n    if (date === null) {\n      return null;\n    }\n    return (date.year - 1970) * 12 + (date.month - 1);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n  week(input) {\n    const date = parseWeekString(input);\n    if (date === null) {\n      return null;\n    }\n    const dateObj = new Date(getUTCMs(date.year));\n    // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n    const dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n    return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n  time(input) {\n    const time = parseTimeString(input);\n    if (time === null) {\n      return null;\n    }\n    return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n  \"datetime-local\"(input) {\n    const dateAndTime = parseLocalDateAndTimeString(input);\n    if (dateAndTime === null) {\n      return null;\n    }\n    const { date: { year, month, day }, time: { hour, minute, second, millisecond } } = dateAndTime;\n    // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n    return getUTCMs(year, month, day, hour, minute, second, millisecond);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n  number: parseFloatingPointNumber,\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n  range: parseFloatingPointNumber\n};\n\nexports.convertStringToDateByType = {\n  date(input) {\n    const parsedInput = exports.convertStringToNumberByType.date(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month(input) {\n    const parsedMonthString = parseMonthString(input);\n    if (parsedMonthString === null) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCFullYear(parsedMonthString.year);\n    date.setUTCMonth(parsedMonthString.month - 1);\n    return date;\n  },\n  week(input) {\n    const parsedInput = exports.convertStringToNumberByType.week(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  time(input) {\n    const parsedInput = exports.convertStringToNumberByType.time(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  \"datetime-local\"(input) {\n    const parsedInput = exports.convertStringToNumberByType[\"datetime-local\"](input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  }\n};\n\nexports.serializeDateByType = {\n  date(input) {\n    return serializeDate({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1,\n      day: input.getUTCDate()\n    });\n  },\n  month(input) {\n    return serializeMonth({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1\n    });\n  },\n  week(input) {\n    return serializeWeek(parseDateAsWeek(input));\n  },\n  time(input) {\n    return serializeTime({\n      hour: input.getUTCHours(),\n      minute: input.getUTCMinutes(),\n      second: input.getUTCSeconds(),\n      millisecond: input.getUTCMilliseconds()\n    });\n  },\n  \"datetime-local\"(input) {\n    return serializeNormalizedDateAndTime({\n      date: {\n        year: input.getUTCFullYear(),\n        month: input.getUTCMonth() + 1,\n        day: input.getUTCDate()\n      },\n      time: {\n        hour: input.getUTCHours(),\n        minute: input.getUTCMinutes(),\n        second: input.getUTCSeconds(),\n        millisecond: input.getUTCMilliseconds()\n      }\n    });\n  }\n};\n\nexports.convertNumberToStringByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date(input) {\n    return exports.serializeDateByType.date(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-date\n  month(input) {\n    const year = 1970 + Math.floor(input / 12);\n    const month = input % 12;\n    const date = new Date(0);\n    date.setUTCFullYear(year);\n    date.setUTCMonth(month);\n\n    return exports.serializeDateByType.month(date);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-date\n  week(input) {\n    return exports.serializeDateByType.week(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-date\n  time(input) {\n    return exports.serializeDateByType.time(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-number-string\n  \"datetime-local\"(input) {\n    return exports.serializeDateByType[\"datetime-local\"](new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-number-string\n  number(input) {\n    return input.toString();\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-number-string\n  range(input) {\n    return input.toString();\n  }\n};\n"]},"metadata":{},"sourceType":"script"}