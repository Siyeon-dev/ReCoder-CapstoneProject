{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-process-exit */\n\nconst util = require(\"util\");\n\nconst {\n  JSDOM\n} = require(\"../../../..\");\n\nconst {\n  READY_STATES\n} = require(\"./xhr-utils\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst tough = require(\"tough-cookie\");\n\nconst dom = new JSDOM();\nconst xhr = new dom.window.XMLHttpRequest();\nconst xhrImpl = idlUtils.implForWrapper(xhr);\nconst chunks = [];\nprocess.stdin.on(\"data\", chunk => {\n  chunks.push(chunk);\n});\nprocess.stdin.on(\"end\", () => {\n  const buffer = Buffer.concat(chunks);\n  const flag = JSON.parse(buffer.toString());\n\n  if (flag.body && flag.body.type === \"Buffer\" && flag.body.data) {\n    flag.body = Buffer.from(flag.body.data);\n  }\n\n  if (flag.cookieJar) {\n    flag.cookieJar = tough.CookieJar.fromJSON(flag.cookieJar);\n  }\n\n  flag.synchronous = false;\n  Object.assign(xhrImpl.flag, flag);\n  const {\n    properties\n  } = xhrImpl;\n  xhrImpl.readyState = READY_STATES.OPENED;\n\n  try {\n    xhr.addEventListener(\"loadend\", () => {\n      if (properties.error) {\n        properties.error = properties.error.stack || util.inspect(properties.error);\n      }\n\n      process.stdout.write(JSON.stringify({\n        responseURL: xhrImpl.responseURL,\n        status: xhrImpl.status,\n        statusText: xhrImpl.statusText,\n        properties\n      }), () => {\n        process.exit(0);\n      });\n    }, false);\n    xhr.send(flag.body);\n  } catch (error) {\n    properties.error += error.stack || util.inspect(error);\n    process.stdout.write(JSON.stringify({\n      responseURL: xhrImpl.responseURL,\n      status: xhrImpl.status,\n      statusText: xhrImpl.statusText,\n      properties\n    }), () => {\n      process.exit(0);\n    });\n  }\n});","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/xhr/xhr-sync-worker.js"],"names":["util","require","JSDOM","READY_STATES","idlUtils","tough","dom","xhr","window","XMLHttpRequest","xhrImpl","implForWrapper","chunks","process","stdin","on","chunk","push","buffer","Buffer","concat","flag","JSON","parse","toString","body","type","data","from","cookieJar","CookieJar","fromJSON","synchronous","Object","assign","properties","readyState","OPENED","addEventListener","error","stack","inspect","stdout","write","stringify","responseURL","status","statusText","exit","send"],"mappings":"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","sourcesContent":["\"use strict\";\n/* eslint-disable no-process-exit */\nconst util = require(\"util\");\nconst { JSDOM } = require(\"../../../..\");\nconst { READY_STATES } = require(\"./xhr-utils\");\nconst idlUtils = require(\"../generated/utils\");\nconst tough = require(\"tough-cookie\");\n\nconst dom = new JSDOM();\nconst xhr = new dom.window.XMLHttpRequest();\nconst xhrImpl = idlUtils.implForWrapper(xhr);\n\nconst chunks = [];\n\nprocess.stdin.on(\"data\", chunk => {\n  chunks.push(chunk);\n});\n\nprocess.stdin.on(\"end\", () => {\n  const buffer = Buffer.concat(chunks);\n\n  const flag = JSON.parse(buffer.toString());\n  if (flag.body && flag.body.type === \"Buffer\" && flag.body.data) {\n    flag.body = Buffer.from(flag.body.data);\n  }\n  if (flag.cookieJar) {\n    flag.cookieJar = tough.CookieJar.fromJSON(flag.cookieJar);\n  }\n\n  flag.synchronous = false;\n  Object.assign(xhrImpl.flag, flag);\n  const { properties } = xhrImpl;\n  xhrImpl.readyState = READY_STATES.OPENED;\n  try {\n    xhr.addEventListener(\"loadend\", () => {\n      if (properties.error) {\n        properties.error = properties.error.stack || util.inspect(properties.error);\n      }\n      process.stdout.write(JSON.stringify({\n        responseURL: xhrImpl.responseURL,\n        status: xhrImpl.status,\n        statusText: xhrImpl.statusText,\n        properties\n      }), () => {\n        process.exit(0);\n      });\n    }, false);\n    xhr.send(flag.body);\n  } catch (error) {\n    properties.error += error.stack || util.inspect(error);\n    process.stdout.write(JSON.stringify({\n      responseURL: xhrImpl.responseURL,\n      status: xhrImpl.status,\n      statusText: xhrImpl.statusText,\n      properties\n    }), () => {\n      process.exit(0);\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"script"}