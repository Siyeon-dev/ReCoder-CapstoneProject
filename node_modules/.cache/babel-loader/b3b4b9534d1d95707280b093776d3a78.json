{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst {\n  attach,\n  detach\n} = require(\"../helpers/svg/basic-types\"); // https://svgwg.org/svg2-draft/types.html#ListInterfaces\n// Child classes must implement _reserialize()\n\n\nclass List {\n  _initList({\n    element,\n    attribute,\n    readOnly = false\n  }) {\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n\n    let value = [];\n\n    if (this._element.hasAttributeNS(null, this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttributeNS(null, this._attribute));\n    }\n\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    } // TODO: support non-DOMString lists.\n\n\n    this._list = value;\n    this._version = this._element._version;\n  }\n\n  _reserialize() {\n    const elements = this._list;\n\n    this._element.setAttributeNS(null, this._attribute, this._attributeRegistryEntry.serialize(elements)); // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n\n\n    this._version = this._element._version;\n  }\n\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n\n    return index >= 0 && index < this.length;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n\n    return this._list.keys();\n  }\n\n  get length() {\n    this._synchronize();\n\n    return this._list.length;\n  }\n\n  get numberOfItems() {\n    this._synchronize();\n\n    return this._list.length;\n  }\n\n  clear() {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    for (const item of this._list) {\n      detach(item);\n    }\n\n    this._list.length = 0;\n\n    this._reserialize();\n  }\n\n  initialize(newItem) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    for (const item of this._list) {\n      detach(item);\n    }\n\n    this._list.length = 0; // TODO: clone non-DOMString list elements.\n\n    attach(newItem, this);\n\n    this._list.push(newItem);\n\n    this._reserialize();\n  }\n\n  getItem(index) {\n    this._synchronize();\n\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\"]);\n    }\n\n    return this._list[index];\n  }\n\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    } // TODO: clone non-DOMString list elements.\n\n\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n\n    this._list.splice(index, 0, newItem);\n\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  replaceItem(newItem, index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\"]);\n    } // TODO: clone non-DOMString list elements.\n\n\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  removeItem(index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\"]);\n    }\n\n    const item = this._list[index];\n    detach(item);\n\n    this._list.splice(index, 1);\n\n    this._reserialize();\n\n    return item;\n  }\n\n  appendItem(newItem) {\n    this._synchronize(); // TODO: clone non-DOMString list elements.\n\n\n    this._list.push(newItem);\n\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n\n}\n\nmodule.exports = List;","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/svg/SVGListBase.js"],"names":["DOMException","require","idlUtils","attach","detach","List","_initList","element","attribute","readOnly","_element","_attribute","_attributeRegistryEntry","constructor","attributeRegistry","get","_readOnly","_list","_version","_needsResync","_synchronize","value","hasAttributeNS","getValue","getAttributeNS","length","initialValue","undefined","_reserialize","elements","setAttributeNS","serialize","supportsPropertyIndex","index","supportedPropertyIndices","keys","numberOfItems","clear","create","_globalObject","item","initialize","newItem","push","getItem","insertItemBefore","splice","replaceItem","removeItem","appendItem","indexedSetNew","indexedSetExisting","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAqBH,OAAO,CAAC,4BAAD,CAAlC,C,CAEA;AAEA;;;AACA,MAAMI,IAAN,CAAW;AACTC,EAAAA,SAAS,CAAC;AACRC,IAAAA,OADQ;AAERC,IAAAA,SAFQ;AAGRC,IAAAA,QAAQ,GAAG;AAHH,GAAD,EAIN;AACD,SAAKC,QAAL,GAAgBH,OAAhB;AACA,SAAKI,UAAL,GAAkBH,SAAlB;AACA,SAAKI,uBAAL,GAA+BL,OAAO,CAACM,WAAR,CAAoBC,iBAApB,CAAsCC,GAAtC,CAA0CP,SAA1C,CAA/B;AACA,SAAKQ,SAAL,GAAiBP,QAAjB;AACA,SAAKQ,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,CAAC,CAAjB;AACD;;AAEe,MAAZC,YAAY,GAAG;AACjB,WAAO,KAAKD,QAAL,GAAgB,KAAKR,QAAL,CAAcQ,QAArC;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,QAAI,CAAC,KAAKD,YAAV,EAAwB;AACtB;AACD;;AACD,QAAIE,KAAK,GAAG,EAAZ;;AACA,QAAI,KAAKX,QAAL,CAAcY,cAAd,CAA6B,IAA7B,EAAmC,KAAKX,UAAxC,CAAJ,EAAyD;AACvDU,MAAAA,KAAK,GAAG,KAAKT,uBAAL,CAA6BW,QAA7B,CAAsC,KAAKb,QAAL,CAAcc,cAAd,CAA6B,IAA7B,EAAmC,KAAKb,UAAxC,CAAtC,CAAR;AACD;;AACD,QAAIU,KAAK,CAACI,MAAN,KAAiB,CAAjB,IAAsB,KAAKb,uBAAL,CAA6Bc,YAA7B,KAA8CC,SAAxE,EAAmF;AACjFN,MAAAA,KAAK,GAAG,KAAKT,uBAAL,CAA6BW,QAA7B,CAAsC,KAAKX,uBAAL,CAA6Bc,YAAnE,CAAR;AACD,KAVY,CAWb;;;AACA,SAAKT,KAAL,GAAaI,KAAb;AACA,SAAKH,QAAL,GAAgB,KAAKR,QAAL,CAAcQ,QAA9B;AACD;;AAEDU,EAAAA,YAAY,GAAG;AACb,UAAMC,QAAQ,GAAG,KAAKZ,KAAtB;;AACA,SAAKP,QAAL,CAAcoB,cAAd,CAA6B,IAA7B,EAAmC,KAAKnB,UAAxC,EAAoD,KAAKC,uBAAL,CAA6BmB,SAA7B,CAAuCF,QAAvC,CAApD,EAFa,CAGb;;;AACA,SAAKX,QAAL,GAAgB,KAAKR,QAAL,CAAcQ,QAA9B;AACD;;AAE8B,GAA9BhB,QAAQ,CAAC8B,qBAAqB,EAAEC,KAAF,EAAS;AACtC,SAAKb,YAAL;;AACA,WAAOa,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,KAAKR,MAAlC;AACD;;AAEqC,OAAjCvB,QAAQ,CAACgC,wBAAwB,IAAI;AACxC,SAAKd,YAAL;;AACA,WAAO,KAAKH,KAAL,CAAWkB,IAAX,EAAP;AACD;;AAES,MAANV,MAAM,GAAG;AACX,SAAKL,YAAL;;AACA,WAAO,KAAKH,KAAL,CAAWQ,MAAlB;AACD;;AAEgB,MAAbW,aAAa,GAAG;AAClB,SAAKhB,YAAL;;AACA,WAAO,KAAKH,KAAL,CAAWQ,MAAlB;AACD;;AAEDY,EAAAA,KAAK,GAAG;AACN,SAAKjB,YAAL;;AACA,QAAI,KAAKJ,SAAT,EAAoB;AAClB,YAAMhB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,uCAD4C,EAE5C,4BAF4C,CAAxC,CAAN;AAID;;AACD,SAAK,MAAMC,IAAX,IAAmB,KAAKvB,KAAxB,EAA+B;AAC7Bb,MAAAA,MAAM,CAACoC,IAAD,CAAN;AACD;;AACD,SAAKvB,KAAL,CAAWQ,MAAX,GAAoB,CAApB;;AACA,SAAKG,YAAL;AACD;;AAEDa,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,SAAKtB,YAAL;;AACA,QAAI,KAAKJ,SAAT,EAAoB;AAClB,YAAMhB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,uCAD4C,EAE5C,4BAF4C,CAAxC,CAAN;AAID;;AACD,SAAK,MAAMC,IAAX,IAAmB,KAAKvB,KAAxB,EAA+B;AAC7Bb,MAAAA,MAAM,CAACoC,IAAD,CAAN;AACD;;AACD,SAAKvB,KAAL,CAAWQ,MAAX,GAAoB,CAApB,CAXkB,CAYlB;;AACAtB,IAAAA,MAAM,CAACuC,OAAD,EAAU,IAAV,CAAN;;AACA,SAAKzB,KAAL,CAAW0B,IAAX,CAAgBD,OAAhB;;AACA,SAAKd,YAAL;AACD;;AAEDgB,EAAAA,OAAO,CAACX,KAAD,EAAQ;AACb,SAAKb,YAAL;;AACA,QAAIa,KAAK,IAAI,KAAKhB,KAAL,CAAWQ,MAAxB,EAAgC;AAC9B,YAAMzB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC3C,uBAAsBN,KAAM,oDAAmD,KAAKhB,KAAL,CAAWQ,MAAO,IADtD,EAE5C,gBAF4C,CAAxC,CAAN;AAID;;AACD,WAAO,KAAKR,KAAL,CAAWgB,KAAX,CAAP;AACD;;AAEDY,EAAAA,gBAAgB,CAACH,OAAD,EAAUT,KAAV,EAAiB;AAC/B,SAAKb,YAAL;;AACA,QAAI,KAAKJ,SAAT,EAAoB;AAClB,YAAMhB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,uCAD4C,EAE5C,4BAF4C,CAAxC,CAAN;AAID,KAP8B,CAQ/B;;;AACA,QAAIN,KAAK,GAAG,KAAKhB,KAAL,CAAWQ,MAAvB,EAA+B;AAC7BQ,MAAAA,KAAK,GAAG,KAAKhB,KAAL,CAAWQ,MAAnB;AACD;;AACD,SAAKR,KAAL,CAAW6B,MAAX,CAAkBb,KAAlB,EAAyB,CAAzB,EAA4BS,OAA5B;;AACAvC,IAAAA,MAAM,CAACuC,OAAD,EAAU,IAAV,CAAN;;AACA,SAAKd,YAAL;;AACA,WAAOc,OAAP;AACD;;AAEDK,EAAAA,WAAW,CAACL,OAAD,EAAUT,KAAV,EAAiB;AAC1B,SAAKb,YAAL;;AACA,QAAI,KAAKJ,SAAT,EAAoB;AAClB,YAAMhB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,uCAD4C,EAE5C,4BAF4C,CAAxC,CAAN;AAID;;AACD,QAAIN,KAAK,IAAI,KAAKhB,KAAL,CAAWQ,MAAxB,EAAgC;AAC9B,YAAMzB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC3C,uBAAsBN,KAAM,oDAAmD,KAAKhB,KAAL,CAAWQ,MAAO,IADtD,EAE5C,gBAF4C,CAAxC,CAAN;AAID,KAbyB,CAc1B;;;AACArB,IAAAA,MAAM,CAAC,KAAKa,KAAL,CAAWgB,KAAX,CAAD,CAAN;AACA,SAAKhB,KAAL,CAAWgB,KAAX,IAAoBS,OAApB;AACAvC,IAAAA,MAAM,CAACuC,OAAD,EAAU,IAAV,CAAN;;AACA,SAAKd,YAAL;;AACA,WAAOc,OAAP;AACD;;AAEDM,EAAAA,UAAU,CAACf,KAAD,EAAQ;AAChB,SAAKb,YAAL;;AACA,QAAI,KAAKJ,SAAT,EAAoB;AAClB,YAAMhB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,uCAD4C,EAE5C,4BAF4C,CAAxC,CAAN;AAID;;AACD,QAAIN,KAAK,IAAI,KAAKhB,KAAL,CAAWQ,MAAxB,EAAgC;AAC9B,YAAMzB,YAAY,CAACsC,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC3C,uBAAsBN,KAAM,oDAAmD,KAAKhB,KAAL,CAAWQ,MAAO,IADtD,EAE5C,gBAF4C,CAAxC,CAAN;AAID;;AACD,UAAMe,IAAI,GAAG,KAAKvB,KAAL,CAAWgB,KAAX,CAAb;AACA7B,IAAAA,MAAM,CAACoC,IAAD,CAAN;;AACA,SAAKvB,KAAL,CAAW6B,MAAX,CAAkBb,KAAlB,EAAyB,CAAzB;;AACA,SAAKL,YAAL;;AACA,WAAOY,IAAP;AACD;;AAEDS,EAAAA,UAAU,CAACP,OAAD,EAAU;AAClB,SAAKtB,YAAL,GADkB,CAElB;;;AACA,SAAKH,KAAL,CAAW0B,IAAX,CAAgBD,OAAhB;;AACAvC,IAAAA,MAAM,CAACuC,OAAD,EAAU,IAAV,CAAN;;AACA,SAAKd,YAAL;;AACA,WAAOc,OAAP;AACD;;AAEsB,GAAtBxC,QAAQ,CAACgD,aAAa,EAAEjB,KAAF,EAASZ,KAAT,EAAgB;AACrC;AACA,SAAK0B,WAAL,CAAiB1B,KAAjB,EAAwBY,KAAxB;AACD;;AAE2B,GAA3B/B,QAAQ,CAACiD,kBAAkB,EAAElB,KAAF,EAASZ,KAAT,EAAgB;AAC1C,SAAK0B,WAAL,CAAiB1B,KAAjB,EAAwBY,KAAxB;AACD;;AAtLQ;;AAyLXmB,MAAM,CAACC,OAAP,GAAiBhD,IAAjB","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst idlUtils = require(\"../generated/utils\");\nconst { attach, detach } = require(\"../helpers/svg/basic-types\");\n\n// https://svgwg.org/svg2-draft/types.html#ListInterfaces\n\n// Child classes must implement _reserialize()\nclass List {\n  _initList({\n    element,\n    attribute,\n    readOnly = false\n  }) {\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n    let value = [];\n    if (this._element.hasAttributeNS(null, this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttributeNS(null, this._attribute));\n    }\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    }\n    // TODO: support non-DOMString lists.\n    this._list = value;\n    this._version = this._element._version;\n  }\n\n  _reserialize() {\n    const elements = this._list;\n    this._element.setAttributeNS(null, this._attribute, this._attributeRegistryEntry.serialize(elements));\n    // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n    this._version = this._element._version;\n  }\n\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n    return index >= 0 && index < this.length;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n    return this._list.keys();\n  }\n\n  get length() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  get numberOfItems() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  clear() {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    this._reserialize();\n  }\n\n  initialize(newItem) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    // TODO: clone non-DOMString list elements.\n    attach(newItem, this);\n    this._list.push(newItem);\n    this._reserialize();\n  }\n\n  getItem(index) {\n    this._synchronize();\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      ]);\n    }\n    return this._list[index];\n  }\n\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    // TODO: clone non-DOMString list elements.\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n    this._list.splice(index, 0, newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  replaceItem(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      ]);\n    }\n    // TODO: clone non-DOMString list elements.\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  removeItem(index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      ]);\n    }\n    const item = this._list[index];\n    detach(item);\n    this._list.splice(index, 1);\n    this._reserialize();\n    return item;\n  }\n\n  appendItem(newItem) {\n    this._synchronize();\n    // TODO: clone non-DOMString list elements.\n    this._list.push(newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n}\n\nmodule.exports = List;\n"]},"metadata":{},"sourceType":"script"}