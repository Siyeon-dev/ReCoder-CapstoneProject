{"ast":null,"code":"\"use strict\";\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\n\nfunction atob(data) {\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`; // \"Remove all ASCII whitespace from data.\"\n\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\"); // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  } // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n\n\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  } // \"Let output be an empty byte sequence.\"\n\n\n  let output = \"\"; // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n\n  let buffer = 0;\n  let accumulatedBits = 0; // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6; // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    } // \"Advance position by 1.\"\n\n  } // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n\n\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  } // \"Return output.\"\n\n\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\n\n\nconst keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction atobLookup(chr) {\n  const index = keystr.indexOf(chr); // Throw exception if character is not in the lookup string; should not be hit in tests\n\n  return index < 0 ? undefined : index;\n}\n\nmodule.exports = atob;","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/abab/lib/atob.js"],"names":["atob","data","replace","length","test","output","buffer","accumulatedBits","i","atobLookup","String","fromCharCode","keystr","chr","index","indexOf","undefined","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAClB;AACA;AACAA,EAAAA,IAAI,GAAI,GAAEA,IAAK,EAAf,CAHkB,CAIlB;;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,cAAb,EAA6B,EAA7B,CAAP,CALkB,CAMlB;AACA;;AACA,MAAID,IAAI,CAACE,MAAL,GAAc,CAAd,KAAoB,CAAxB,EAA2B;AACzBF,IAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AACD,GAViB,CAWlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAID,IAAI,CAACE,MAAL,GAAc,CAAd,KAAoB,CAApB,IAAyB,iBAAiBC,IAAjB,CAAsBH,IAAtB,CAA7B,EAA0D;AACxD,WAAO,IAAP;AACD,GAvBiB,CAwBlB;;;AACA,MAAII,MAAM,GAAG,EAAb,CAzBkB,CA0BlB;AACA;AACA;AACA;;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,eAAe,GAAG,CAAtB,CA/BkB,CAgClB;AACA;AACA;AACA;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACE,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAAA,MAAM,KAAK,CAAX;AACAA,IAAAA,MAAM,IAAIG,UAAU,CAACR,IAAI,CAACO,CAAD,CAAL,CAApB;AACAD,IAAAA,eAAe,IAAI,CAAnB,CAXoC,CAYpC;AACA;AACA;;AACA,QAAIA,eAAe,KAAK,EAAxB,EAA4B;AAC1BF,MAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACL,MAAM,GAAG,QAAV,KAAuB,EAA3C,CAAV;AACAD,MAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACL,MAAM,GAAG,MAAV,KAAqB,CAAzC,CAAV;AACAD,MAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoBL,MAAM,GAAG,IAA7B,CAAV;AACAA,MAAAA,MAAM,GAAGC,eAAe,GAAG,CAA3B;AACD,KApBmC,CAqBpC;;AACD,GA1DiB,CA2DlB;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIA,eAAe,KAAK,EAAxB,EAA4B;AAC1BD,IAAAA,MAAM,KAAK,CAAX;AACAD,IAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoBL,MAApB,CAAV;AACD,GAHD,MAGO,IAAIC,eAAe,KAAK,EAAxB,EAA4B;AACjCD,IAAAA,MAAM,KAAK,CAAX;AACAD,IAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoB,CAACL,MAAM,GAAG,MAAV,KAAqB,CAAzC,CAAV;AACAD,IAAAA,MAAM,IAAIK,MAAM,CAACC,YAAP,CAAoBL,MAAM,GAAG,IAA7B,CAAV;AACD,GAxEiB,CAyElB;;;AACA,SAAOD,MAAP;AACD;AACD;AACA;AACA;AACA;;;AAEA,MAAMO,MAAM,GACV,kEADF;;AAGA,SAASH,UAAT,CAAoBI,GAApB,EAAyB;AACvB,QAAMC,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeF,GAAf,CAAd,CADuB,CAEvB;;AACA,SAAOC,KAAK,GAAG,CAAR,GAAYE,SAAZ,GAAwBF,KAA/B;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBlB,IAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(data) {\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`;\n  // \"Remove all ASCII whitespace from data.\"\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n  // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n  // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  }\n  // \"Let output be an empty byte sequence.\"\n  let output = \"\";\n  // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  let buffer = 0;\n  let accumulatedBits = 0;\n  // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6;\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by 1.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\n\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction atobLookup(chr) {\n  const index = keystr.indexOf(chr);\n  // Throw exception if character is not in the lookup string; should not be hit in tests\n  return index < 0 ? undefined : index;\n}\n\nmodule.exports = atob;\n"]},"metadata":{},"sourceType":"script"}