{"ast":null,"code":"'use strict';\n\nconst hueToRgb = (t1, t2, hue) => {\n  if (hue < 0) hue += 6;\n  if (hue >= 6) hue -= 6;\n  if (hue < 1) return (t2 - t1) * hue + t1;else if (hue < 3) return t2;else if (hue < 4) return (t2 - t1) * (4 - hue) + t1;else return t1;\n}; // https://www.w3.org/TR/css-color-4/#hsl-to-rgb\n\n\nexports.hslToRgb = (hue, sat, light) => {\n  const t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;\n  const t1 = light * 2 - t2;\n  const r = hueToRgb(t1, t2, hue + 2);\n  const g = hueToRgb(t1, t2, hue);\n  const b = hueToRgb(t1, t2, hue - 2);\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/cssstyle/lib/utils/colorSpace.js"],"names":["hueToRgb","t1","t2","hue","exports","hslToRgb","sat","light","r","g","b","Math","round"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAG,CAACC,EAAD,EAAKC,EAAL,EAASC,GAAT,KAAiB;AAChC,MAAIA,GAAG,GAAG,CAAV,EAAaA,GAAG,IAAI,CAAP;AACb,MAAIA,GAAG,IAAI,CAAX,EAAcA,GAAG,IAAI,CAAP;AAEd,MAAIA,GAAG,GAAG,CAAV,EAAa,OAAO,CAACD,EAAE,GAAGD,EAAN,IAAYE,GAAZ,GAAkBF,EAAzB,CAAb,KACK,IAAIE,GAAG,GAAG,CAAV,EAAa,OAAOD,EAAP,CAAb,KACA,IAAIC,GAAG,GAAG,CAAV,EAAa,OAAO,CAACD,EAAE,GAAGD,EAAN,KAAa,IAAIE,GAAjB,IAAwBF,EAA/B,CAAb,KACA,OAAOA,EAAP;AACN,CARD,C,CAUA;;;AACAG,OAAO,CAACC,QAAR,GAAmB,CAACF,GAAD,EAAMG,GAAN,EAAWC,KAAX,KAAqB;AACtC,QAAML,EAAE,GAAGK,KAAK,IAAI,GAAT,GAAeA,KAAK,IAAID,GAAG,GAAG,CAAV,CAApB,GAAmCC,KAAK,GAAGD,GAAR,GAAcC,KAAK,GAAGD,GAApE;AACA,QAAML,EAAE,GAAGM,KAAK,GAAG,CAAR,GAAYL,EAAvB;AACA,QAAMM,CAAC,GAAGR,QAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,GAAG,GAAG,CAAf,CAAlB;AACA,QAAMM,CAAC,GAAGT,QAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,GAAT,CAAlB;AACA,QAAMO,CAAC,GAAGV,QAAQ,CAACC,EAAD,EAAKC,EAAL,EAASC,GAAG,GAAG,CAAf,CAAlB;AACA,SAAO,CAACQ,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAG,GAAf,CAAD,EAAsBG,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,GAAf,CAAtB,EAA2CE,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,GAAf,CAA3C,CAAP;AACD,CAPD","sourcesContent":["'use strict';\n\nconst hueToRgb = (t1, t2, hue) => {\n  if (hue < 0) hue += 6;\n  if (hue >= 6) hue -= 6;\n\n  if (hue < 1) return (t2 - t1) * hue + t1;\n  else if (hue < 3) return t2;\n  else if (hue < 4) return (t2 - t1) * (4 - hue) + t1;\n  else return t1;\n};\n\n// https://www.w3.org/TR/css-color-4/#hsl-to-rgb\nexports.hslToRgb = (hue, sat, light) => {\n  const t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;\n  const t1 = light * 2 - t2;\n  const r = hueToRgb(t1, t2, hue + 2);\n  const g = hueToRgb(t1, t2, hue);\n  const b = hueToRgb(t1, t2, hue - 2);\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n"]},"metadata":{},"sourceType":"script"}