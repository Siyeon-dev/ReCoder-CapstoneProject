{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst MouseEvent = require(\"../generated/MouseEvent\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst {\n  isLabelable,\n  isDisabled,\n  isInteractiveContent\n} = require(\"../helpers/form-controls\");\n\nconst {\n  isInclusiveAncestor\n} = require(\"../helpers/node\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nfunction sendClickToAssociatedNode(node) {\n  fireAnEvent(\"click\", node, MouseEvent, {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  });\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._hasActivationBehavior = true;\n  }\n\n  get control() {\n    if (this.hasAttributeNS(null, \"for\")) {\n      const forValue = this.getAttributeNS(null, \"for\");\n\n      if (forValue === \"\") {\n        return null;\n      }\n\n      const root = this.getRootNode({});\n\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, \"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n\n      return null;\n    }\n\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n\n    if (node) {\n      return node.form;\n    }\n\n    return null;\n  }\n\n  _activationBehavior(event) {\n    // Check if the event's target is an inclusive descendant of any interactive content descendant of this <label>.\n    // If so, do nothing.\n    if (event.target && event.target !== this && isInclusiveAncestor(this, event.target)) {\n      for (const ancestor of domSymbolTree.ancestorsIterator(event.target)) {\n        if (ancestor === this) {\n          break;\n        }\n\n        if (isInteractiveContent(ancestor)) {\n          return;\n        }\n      }\n    }\n\n    const node = this.control;\n\n    if (node && !isDisabled(node)) {\n      // Check if the control is an inclusive ancestor of the event's target (and has already received this event).\n      // If so, do nothing.\n      // See https://github.com/whatwg/html/issues/5415.\n      if (event.target && isInclusiveAncestor(node, event.target)) {\n        return;\n      }\n\n      sendClickToAssociatedNode(node);\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLabelElement-impl.js"],"names":["HTMLElementImpl","require","implementation","MouseEvent","domSymbolTree","NODE_TYPE","isLabelable","isDisabled","isInteractiveContent","isInclusiveAncestor","fireAnEvent","sendClickToAssociatedNode","node","bubbles","cancelable","view","ownerDocument","defaultView","screenX","screenY","clientX","clientY","button","detail","relatedTarget","HTMLLabelElementImpl","constructor","globalObject","args","privateData","_hasActivationBehavior","control","hasAttributeNS","forValue","getAttributeNS","root","getRootNode","descendant","treeIterator","nodeType","ELEMENT_NODE","form","_activationBehavior","event","target","ancestor","ancestorsIterator","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { isLabelable, isDisabled, isInteractiveContent } = require(\"../helpers/form-controls\");\nconst { isInclusiveAncestor } = require(\"../helpers/node\");\nconst { fireAnEvent } = require(\"../helpers/events\");\n\nfunction sendClickToAssociatedNode(node) {\n  fireAnEvent(\"click\", node, MouseEvent, {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  });\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this._hasActivationBehavior = true;\n  }\n\n  get control() {\n    if (this.hasAttributeNS(null, \"for\")) {\n      const forValue = this.getAttributeNS(null, \"for\");\n      if (forValue === \"\") {\n        return null;\n      }\n      const root = this.getRootNode({});\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE &&\n          descendant.getAttributeNS(null, \"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n      return null;\n    }\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n    if (node) {\n      return node.form;\n    }\n    return null;\n  }\n\n  _activationBehavior(event) {\n    // Check if the event's target is an inclusive descendant of any interactive content descendant of this <label>.\n    // If so, do nothing.\n    if (event.target && event.target !== this && isInclusiveAncestor(this, event.target)) {\n      for (const ancestor of domSymbolTree.ancestorsIterator(event.target)) {\n        if (ancestor === this) {\n          break;\n        }\n        if (isInteractiveContent(ancestor)) {\n          return;\n        }\n      }\n    }\n\n    const node = this.control;\n    if (node && !isDisabled(node)) {\n      // Check if the control is an inclusive ancestor of the event's target (and has already received this event).\n      // If so, do nothing.\n      // See https://github.com/whatwg/html/issues/5415.\n      if (event.target && isInclusiveAncestor(node, event.target)) {\n        return;\n      }\n\n      sendClickToAssociatedNode(node);\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}