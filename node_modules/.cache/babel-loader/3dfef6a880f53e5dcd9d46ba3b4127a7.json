{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-new-func */\n\nconst acorn = require(\"acorn\");\n\nconst findGlobals = require(\"acorn-globals\");\n\nconst escodegen = require(\"escodegen\");\n\nconst jsGlobals = require(\"./browser/js-globals.json\"); // We can't use the default browserify vm shim because it doesn't work in a web worker.\n// \"eval\" is skipped because it's set to a function that calls `runInContext`:\n\n\nconst jsGlobalEntriesToInstall = Object.entries(jsGlobals).filter(([name]) => name !== \"eval\" && name in global);\n\nexports.createContext = function (sandbox) {\n  // TODO: This should probably use a symbol\n  Object.defineProperty(sandbox, \"__isVMShimContext\", {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n\n  for (const [globalName, globalPropDesc] of jsGlobalEntriesToInstall) {\n    const propDesc = { ...globalPropDesc,\n      value: global[globalName]\n    };\n    Object.defineProperty(sandbox, globalName, propDesc);\n  }\n\n  Object.defineProperty(sandbox, \"eval\", {\n    value(code) {\n      return exports.runInContext(code, sandbox);\n    },\n\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n};\n\nexports.isContext = function (sandbox) {\n  return sandbox.__isVMShimContext;\n};\n\nexports.runInContext = function (code, contextifiedSandbox, options) {\n  if (code === \"this\") {\n    // Special case for during window creation.\n    return contextifiedSandbox;\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  const comments = [];\n  const tokens = [];\n  const ast = acorn.parse(code, {\n    allowReturnOutsideFunction: true,\n    ranges: true,\n    // collect comments in Esprima's format\n    onComment: comments,\n    // collect token ranges\n    onToken: tokens\n  }); // make sure we keep comments\n\n  escodegen.attachComments(ast, comments, tokens);\n  const globals = findGlobals(ast);\n\n  for (let i = 0; i < globals.length; ++i) {\n    if (globals[i].name === \"window\" || globals[i].name === \"this\") {\n      continue;\n    }\n\n    const {\n      nodes\n    } = globals[i];\n\n    for (let j = 0; j < nodes.length; ++j) {\n      const {\n        type,\n        name\n      } = nodes[j];\n      nodes[j].type = \"MemberExpression\";\n      nodes[j].property = {\n        name,\n        type\n      };\n      nodes[j].computed = false;\n      nodes[j].object = {\n        name: \"window\",\n        type: \"Identifier\"\n      };\n    }\n  }\n\n  const lastNode = ast.body[ast.body.length - 1];\n\n  if (lastNode.type === \"ExpressionStatement\") {\n    lastNode.type = \"ReturnStatement\";\n    lastNode.argument = lastNode.expression;\n    delete lastNode.expression;\n  }\n\n  const rewrittenCode = escodegen.generate(ast, {\n    comment: true\n  });\n  const suffix = options.filename !== undefined ? \"\\n//# sourceURL=\" + options.filename : \"\";\n  return Function(\"window\", rewrittenCode + suffix).bind(contextifiedSandbox)(contextifiedSandbox);\n};\n\nexports.Script = class VMShimScript {\n  constructor(code, options) {\n    this._code = code;\n    this._options = options;\n  }\n\n  runInContext(sandbox, options) {\n    return exports.runInContext(this._code, sandbox, Object.assign({}, this._options, options));\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/vm-shim.js"],"names":["acorn","require","findGlobals","escodegen","jsGlobals","jsGlobalEntriesToInstall","Object","entries","filter","name","global","exports","createContext","sandbox","defineProperty","value","writable","configurable","enumerable","globalName","globalPropDesc","propDesc","code","runInContext","isContext","__isVMShimContext","contextifiedSandbox","options","undefined","comments","tokens","ast","parse","allowReturnOutsideFunction","ranges","onComment","onToken","attachComments","globals","i","length","nodes","j","type","property","computed","object","lastNode","body","argument","expression","rewrittenCode","generate","comment","suffix","filename","Function","bind","Script","VMShimScript","constructor","_code","_options","assign"],"mappings":"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","sourcesContent":["\"use strict\";\n/* eslint-disable no-new-func */\nconst acorn = require(\"acorn\");\nconst findGlobals = require(\"acorn-globals\");\nconst escodegen = require(\"escodegen\");\nconst jsGlobals = require(\"./browser/js-globals.json\");\n\n// We can't use the default browserify vm shim because it doesn't work in a web worker.\n\n// \"eval\" is skipped because it's set to a function that calls `runInContext`:\nconst jsGlobalEntriesToInstall = Object.entries(jsGlobals).filter(([name]) => name !== \"eval\" && name in global);\n\nexports.createContext = function (sandbox) {\n  // TODO: This should probably use a symbol\n  Object.defineProperty(sandbox, \"__isVMShimContext\", {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n\n  for (const [globalName, globalPropDesc] of jsGlobalEntriesToInstall) {\n    const propDesc = { ...globalPropDesc, value: global[globalName] };\n    Object.defineProperty(sandbox, globalName, propDesc);\n  }\n\n  Object.defineProperty(sandbox, \"eval\", {\n    value(code) {\n      return exports.runInContext(code, sandbox);\n    },\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n};\n\nexports.isContext = function (sandbox) {\n  return sandbox.__isVMShimContext;\n};\n\nexports.runInContext = function (code, contextifiedSandbox, options) {\n  if (code === \"this\") {\n    // Special case for during window creation.\n    return contextifiedSandbox;\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  const comments = [];\n  const tokens = [];\n  const ast = acorn.parse(code, {\n    allowReturnOutsideFunction: true,\n    ranges: true,\n    // collect comments in Esprima's format\n    onComment: comments,\n    // collect token ranges\n    onToken: tokens\n  });\n\n  // make sure we keep comments\n  escodegen.attachComments(ast, comments, tokens);\n\n  const globals = findGlobals(ast);\n  for (let i = 0; i < globals.length; ++i) {\n    if (globals[i].name === \"window\" || globals[i].name === \"this\") {\n      continue;\n    }\n\n    const { nodes } = globals[i];\n    for (let j = 0; j < nodes.length; ++j) {\n      const { type, name } = nodes[j];\n      nodes[j].type = \"MemberExpression\";\n      nodes[j].property = { name, type };\n      nodes[j].computed = false;\n      nodes[j].object = {\n        name: \"window\",\n        type: \"Identifier\"\n      };\n    }\n  }\n\n  const lastNode = ast.body[ast.body.length - 1];\n  if (lastNode.type === \"ExpressionStatement\") {\n    lastNode.type = \"ReturnStatement\";\n    lastNode.argument = lastNode.expression;\n    delete lastNode.expression;\n  }\n\n  const rewrittenCode = escodegen.generate(ast, { comment: true });\n  const suffix = options.filename !== undefined ? \"\\n//# sourceURL=\" + options.filename : \"\";\n\n  return Function(\"window\", rewrittenCode + suffix).bind(contextifiedSandbox)(contextifiedSandbox);\n};\n\nexports.Script = class VMShimScript {\n  constructor(code, options) {\n    this._code = code;\n    this._options = options;\n  }\n\n  runInContext(sandbox, options) {\n    return exports.runInContext(this._code, sandbox, Object.assign({}, this._options, options));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}