{"ast":null,"code":"import Janus from './janus/janus';\nlet server = null;\nlet janus = null;\nlet screenHandle = null;\nlet videoHandlerOnPC = null;\nlet myId = 35;\nlet room = 1234;\nlet opaqueId = '박시연'; // 무슨 역할?\n\nconst TEST_CANDIDATE_NUM = 5;\nif (window.location.protocol === 'http:') server = 'http://' + 're-coder.net' + '/janus';else server = 'https://' + 're-coder.net' + '/janus';\nexport function runJanusMobile() {\n  Janus.init({\n    debug: 'all',\n    callback: function () {\n      janus = new Janus({\n        server: server,\n        opaqueId: opaqueId,\n        success: function () {\n          // VideoRoom plugin 지정\n          janus.attach({\n            plugin: 'janus.plugin.videoroom',\n            opaqueId: opaqueId,\n            success: function (pluginHandle) {\n              videoHandlerOnPC = pluginHandle;\n              Janus.log(`Plugin attached! (${videoHandlerOnPC.getPlugin()}\n                                    , ID = ${videoHandlerOnPC.getId()})`); // room = createTheRoom(TEST_CANDIDATE_NUM);\n\n              joinTheRoom(1234, myId);\n            },\n            // WebRTC 권한 허용 표시 관련 UI 출력\n            // User 등록 후 실행 콜백\n            // msg 값에 따라 event 처리 가능\n            onmessage: function (msg, jsep) {\n              Janus.debug(' ::: Got a message (publisher) :::', msg);\n              let event = msg['videoroom'];\n              Janus.debug('Event: ' + event);\n\n              if (event) {\n                if (event === 'joined') {\n                  myId = msg['id'];\n                  Janus.log(`${msg['room']}에 성공적으로 접속하였습니다. ID = ${myId}`);\n                  publishOwnFeed(msg);\n                }\n              }\n\n              if (jsep) {\n                Janus.debug('Handling SDP as well...', jsep);\n                videoHandlerOnPC.handleRemoteJsep({\n                  jsep: jsep\n                });\n              }\n            },\n            // localStreamData를 받아온다\n            onlocalstream: function (stream) {\n              Janus.debug(' ::: Got a local stream :::', stream);\n              Janus.log('onlocalstream 실행'); // html tag 값 가져오기\n\n              let myVideo = document.getElementById('myvideo'); // tag에 stream data 붙이기\n\n              Janus.attachMediaStream(myVideo, stream);\n            },\n            oncleanup: function () {}\n          });\n        },\n        error: function (error) {\n          Janus.error(error);\n        },\n        destroyed: function () {\n          window.location.reload();\n        }\n      });\n    }\n  });\n}\n;\n/**\n * @description 방 접속\n * @param {접속할 방 번호} roomID\n */\n\nfunction joinTheRoom(roomID, userId) {\n  let register = {\n    request: 'join',\n    room: roomID,\n    id: userId,\n    ptype: 'publisher' // display: myUsername,\n\n  };\n  videoHandlerOnPC.send({\n    message: register,\n    success: function () {\n      Janus.log('방에 접속하였습니다 !');\n      return true;\n    },\n    error: function (error) {\n      Janus.error('WebRTC error:', error);\n      Janus.log('방에 접속하지 못했습니다 !');\n      return false;\n    }\n  });\n}\n/**\n * @description 방 생성\n * @param {시험의 총 참가자 수} numOfCandidate\n */\n\n\nfunction createTheRoom(numOfCandidate) {\n  let create = {\n    request: 'create',\n    bitrate: 500000,\n    // 참여 가능한 publisher 수 = (참가자 인원 * 3) + (eyetracker, promoter)\n    publishers: numOfCandidate * 3 + 2\n  };\n  videoHandlerOnPC.send({\n    message: create,\n    success: function (result) {\n      Janus.log(`room = ${result['room']} 방이 생성되었습니다.`); // 방 번호 return\n\n      joinTheRoom(result['room']);\n    },\n    error: function (error) {\n      Janus.error('WebRTC error:', error);\n      Janus.log('방이 생성되지 않았습니다 !');\n      return false;\n    }\n  });\n  return null;\n}\n/**\n * @description 방 존재 여부 체크\n * @param {시험 방 번호} roomNum\n */\n\n\nfunction isRoomExist(roomNum) {\n  let exists = {\n    request: 'exists',\n    room: roomNum\n  };\n  videoHandlerOnPC.send({\n    message: exists,\n    success: function () {\n      Janus.log(`roomID = ${roomNum} 방이 존재합니다.`);\n      return true;\n    },\n    error: function (error) {\n      Janus.error('WebRTC error:', error);\n      Janus.log(`roomID = ${roomNum} 방이 존재하지 않습니다.`);\n      return false;\n    }\n  });\n}\n/**\n * @description createOffer 를 통해서 webCamFeed 생성\n */\n\n\nfunction publishOwnFeed(msg) {\n  videoHandlerOnPC.createOffer({\n    media: {\n      audioRecv: false,\n      videoRecv: false,\n      audioSend: false,\n      videoSend: true\n    },\n    success: function (jsep) {\n      Janus.log('Got publisher SDP!', jsep);\n      let publish = {\n        request: 'configure',\n        audio: false,\n        video: true\n      };\n      videoHandlerOnPC.send({\n        message: publish,\n        jsep: jsep\n      }); // localScreenFeed 생성\n      // Janus.log(msg['publishers']['id']);\n      // localScreenFeed(msg);\n    },\n    error: function (error) {\n      Janus.error('WebRTC error:', error);\n      publishOwnFeed(msg);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kanbaer/Re-Coder_Mobile/src/module/examCandidateMobile.js"],"names":["Janus","server","janus","screenHandle","videoHandlerOnPC","myId","room","opaqueId","TEST_CANDIDATE_NUM","window","location","protocol","runJanusMobile","init","debug","callback","success","attach","plugin","pluginHandle","log","getPlugin","getId","joinTheRoom","onmessage","msg","jsep","event","publishOwnFeed","handleRemoteJsep","onlocalstream","stream","myVideo","document","getElementById","attachMediaStream","oncleanup","error","destroyed","reload","roomID","userId","register","request","id","ptype","send","message","createTheRoom","numOfCandidate","create","bitrate","publishers","result","isRoomExist","roomNum","exists","createOffer","media","audioRecv","videoRecv","audioSend","videoSend","publish","audio","video"],"mappings":"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","sourcesContent":["import Janus from './janus/janus';\n\nlet server = null;\nlet janus = null;\n\nlet screenHandle = null;\nlet videoHandlerOnPC = null;\n\nlet myId = 35;\nlet room = 1234;\n\nlet opaqueId = '박시연'; // 무슨 역할?\nconst TEST_CANDIDATE_NUM = 5;\n\nif (window.location.protocol === 'http:')\n\tserver = 'http://' + 're-coder.net' + '/janus';\nelse server = 'https://' + 're-coder.net' + '/janus';\n\nexport function runJanusMobile() {\n\tJanus.init({\n\t\tdebug: 'all',\n\t\tcallback: function () {\n\t\t\tjanus = new Janus({\n\t\t\t\tserver: server,\n\t\t\t\topaqueId: opaqueId,\n\t\t\t\tsuccess: function () {\n\t\t\t\t\t// VideoRoom plugin 지정\n\t\t\t\t\tjanus.attach({\n\t\t\t\t\t\tplugin: 'janus.plugin.videoroom',\n\t\t\t\t\t\topaqueId: opaqueId,\n\n\t\t\t\t\t\tsuccess: function (pluginHandle) {\n\t\t\t\t\t\t\tvideoHandlerOnPC = pluginHandle;\n\n\t\t\t\t\t\t\tJanus.log(\n\t\t\t\t\t\t\t\t`Plugin attached! (${videoHandlerOnPC.getPlugin()}\n                                    , ID = ${videoHandlerOnPC.getId()})`\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// room = createTheRoom(TEST_CANDIDATE_NUM);\n\t\t\t\t\t\t\tjoinTheRoom(1234, myId);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// WebRTC 권한 허용 표시 관련 UI 출력\n\t\t\t\t\t\t// User 등록 후 실행 콜백\n\t\t\t\t\t\t// msg 값에 따라 event 처리 가능\n\t\t\t\t\t\tonmessage: function (msg, jsep) {\n\t\t\t\t\t\t\tJanus.debug(\n\t\t\t\t\t\t\t\t' ::: Got a message (publisher) :::',\n\t\t\t\t\t\t\t\tmsg\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tlet event = msg['videoroom'];\n\t\t\t\t\t\t\tJanus.debug('Event: ' + event);\n\n\t\t\t\t\t\t\tif (event) {\n\t\t\t\t\t\t\t\tif (event === 'joined') {\n\t\t\t\t\t\t\t\t\tmyId = msg['id'];\n\n\t\t\t\t\t\t\t\t\tJanus.log(\n\t\t\t\t\t\t\t\t\t\t`${msg['room']}에 성공적으로 접속하였습니다. ID = ${myId}`\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tpublishOwnFeed(msg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (jsep) {\n\t\t\t\t\t\t\t\tJanus.debug('Handling SDP as well...', jsep);\n\t\t\t\t\t\t\t\tvideoHandlerOnPC.handleRemoteJsep({\n\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t// localStreamData를 받아온다\n\t\t\t\t\t\tonlocalstream: function (stream) {\n\t\t\t\t\t\t\tJanus.debug(' ::: Got a local stream :::', stream);\n\t\t\t\t\t\t\tJanus.log('onlocalstream 실행');\n\n\t\t\t\t\t\t\t// html tag 값 가져오기\n\t\t\t\t\t\t\tlet myVideo = document.getElementById('myvideo');\n\t\t\t\t\t\t\t// tag에 stream data 붙이기\n\t\t\t\t\t\t\tJanus.attachMediaStream(myVideo, stream);\n\t\t\t\t\t\t},\n\t\t\t\t\t\toncleanup: function () {},\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\terror: function (error) {\n\t\t\t\t\tJanus.error(error);\n\t\t\t\t},\n\t\t\t\tdestroyed: function () {\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t});\n};\n\n/**\n * @description 방 접속\n * @param {접속할 방 번호} roomID\n */\nfunction joinTheRoom(roomID, userId) {\n\tlet register = {\n\t\trequest: 'join',\n\t\troom: roomID,\n\t\tid: userId,\n\t\tptype: 'publisher',\n\t\t// display: myUsername,\n\t};\n\n\tvideoHandlerOnPC.send({\n\t\tmessage: register,\n\t\tsuccess: function () {\n\t\t\tJanus.log('방에 접속하였습니다 !');\n\t\t\treturn true;\n\t\t},\n\t\terror: function (error) {\n\t\t\tJanus.error('WebRTC error:', error);\n\t\t\tJanus.log('방에 접속하지 못했습니다 !');\n\t\t\treturn false;\n\t\t},\n\t});\n}\n\n/**\n * @description 방 생성\n * @param {시험의 총 참가자 수} numOfCandidate\n */\nfunction createTheRoom(numOfCandidate) {\n\tlet create = {\n\t\trequest: 'create',\n\t\tbitrate: 500000,\n\t\t// 참여 가능한 publisher 수 = (참가자 인원 * 3) + (eyetracker, promoter)\n\t\tpublishers: numOfCandidate * 3 + 2,\n\t};\n\n\tvideoHandlerOnPC.send({\n\t\tmessage: create,\n\t\tsuccess: function (result) {\n\t\t\tJanus.log(`room = ${result['room']} 방이 생성되었습니다.`);\n\t\t\t// 방 번호 return\n\t\t\tjoinTheRoom(result['room']);\n\t\t},\n\t\terror: function (error) {\n\t\t\tJanus.error('WebRTC error:', error);\n\t\t\tJanus.log('방이 생성되지 않았습니다 !');\n\t\t\treturn false;\n\t\t},\n\t});\n\n\treturn null;\n}\n\n/**\n * @description 방 존재 여부 체크\n * @param {시험 방 번호} roomNum\n */\nfunction isRoomExist(roomNum) {\n\tlet exists = {\n\t\trequest: 'exists',\n\t\troom: roomNum,\n\t};\n\n\tvideoHandlerOnPC.send({\n\t\tmessage: exists,\n\t\tsuccess: function () {\n\t\t\tJanus.log(`roomID = ${roomNum} 방이 존재합니다.`);\n\t\t\treturn true;\n\t\t},\n\t\terror: function (error) {\n\t\t\tJanus.error('WebRTC error:', error);\n\t\t\tJanus.log(`roomID = ${roomNum} 방이 존재하지 않습니다.`);\n\t\t\treturn false;\n\t\t},\n\t});\n}\n\n/**\n * @description createOffer 를 통해서 webCamFeed 생성\n */\nfunction publishOwnFeed(msg) {\n\tvideoHandlerOnPC.createOffer({\n\t\tmedia: {\n\t\t\taudioRecv: false,\n\t\t\tvideoRecv: false,\n\t\t\taudioSend: false,\n\t\t\tvideoSend: true,\n\t\t},\n\t\tsuccess: function (jsep) {\n\t\t\tJanus.log('Got publisher SDP!', jsep);\n\t\t\tlet publish = { request: 'configure', audio: false, video: true };\n\t\t\tvideoHandlerOnPC.send({ message: publish, jsep: jsep });\n\n\t\t\t// localScreenFeed 생성\n\t\t\t// Janus.log(msg['publishers']['id']);\n\t\t\t// localScreenFeed(msg);\n\t\t},\n\t\terror: function (error) {\n\t\t\tJanus.error('WebRTC error:', error);\n\t\t\tpublishOwnFeed(msg);\n\t\t},\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}