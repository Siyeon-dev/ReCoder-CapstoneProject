{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  documentBaseURL,\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nconst {\n  navigate\n} = require(\"./navigation\"); // Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\n\nexports.implementation = class LocationImpl {\n  constructor(globalObject, args, privateData) {\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n    this._globalObject = globalObject;\n  }\n\n  get _url() {\n    return this._relevantDocument._URL;\n  }\n\n  _locationObjectSetterNavigate(url) {\n    // Not implemented: extra steps here to determine replacement flag.\n    return this._locationObjectNavigate(url);\n  }\n\n  _locationObjectNavigate(url, {\n    replacement = false\n  } = {}) {\n    // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n    navigate(this._relevantDocument._defaultView, url, {\n      replacement,\n      exceptionsEnabled: true\n    });\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    return whatwgURL.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const newURL = whatwgURL.parseURL(v, {\n      baseURL: documentBaseURL(this._relevantDocument)\n    });\n\n    if (newURL === null) {\n      throw new TypeError(`Could not parse \"${v}\" as a URL`);\n    }\n\n    this._locationObjectSetterNavigate(newURL);\n  }\n\n  get origin() {\n    return whatwgURL.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    const copyURL = Object.assign({}, this._url);\n    const possibleFailure = whatwgURL.basicURLParse(v + \":\", {\n      url: copyURL,\n      stateOverride: \"scheme start\"\n    });\n\n    if (possibleFailure === null) {\n      throw new TypeError(`Could not parse the URL after setting the procol to \"${v}\"`);\n    }\n\n    if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n      return;\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"host\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"hostname\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"port\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get pathname() {\n    const url = this._url;\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    copyURL.path = [];\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"path start\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (v === \"\") {\n      copyURL.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      copyURL.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"query\",\n        encodingOverride: this._relevantDocument.charset\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.scheme === \"javascript\") {\n      return;\n    }\n\n    if (v === \"\") {\n      copyURL.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      copyURL.fragment = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"fragment\"\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  assign(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [`Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`, \"SyntaxError\"]);\n    }\n\n    this._locationObjectNavigate(parsedURL);\n  }\n\n  replace(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [`Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`, \"SyntaxError\"]);\n    }\n\n    this._locationObjectNavigate(parsedURL, {\n      replacement: true\n    });\n  }\n\n  reload() {\n    const flags = {\n      replace: true,\n      reloadTriggered: true,\n      exceptionsEnabled: true\n    };\n    navigate(this._relevantDocument._defaultView, this._url, flags);\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/window/Location-impl.js"],"names":["whatwgURL","require","DOMException","documentBaseURL","parseURLToResultingURLRecord","navigate","exports","implementation","LocationImpl","constructor","globalObject","args","privateData","_relevantDocument","relevantDocument","url","_globalObject","_url","_URL","_locationObjectSetterNavigate","_locationObjectNavigate","replacement","_defaultView","exceptionsEnabled","toString","href","serializeURL","v","newURL","parseURL","baseURL","TypeError","origin","serializeURLOrigin","protocol","scheme","copyURL","Object","assign","possibleFailure","basicURLParse","stateOverride","host","port","serializeHost","serializeInteger","cannotBeABaseURL","hostname","pathname","path","join","search","query","input","substring","encodingOverride","charset","hash","fragment","parsedURL","create","URL","replace","reload","flags","reloadTriggered"],"mappings":"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","sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { documentBaseURL, parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\nconst { navigate } = require(\"./navigation\");\n\n// Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\nexports.implementation = class LocationImpl {\n  constructor(globalObject, args, privateData) {\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n\n    this._globalObject = globalObject;\n  }\n\n  get _url() {\n    return this._relevantDocument._URL;\n  }\n\n  _locationObjectSetterNavigate(url) {\n    // Not implemented: extra steps here to determine replacement flag.\n\n    return this._locationObjectNavigate(url);\n  }\n\n  _locationObjectNavigate(url, { replacement = false } = {}) {\n    // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n\n    navigate(this._relevantDocument._defaultView, url, { replacement, exceptionsEnabled: true });\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    return whatwgURL.serializeURL(this._url);\n  }\n  set href(v) {\n    const newURL = whatwgURL.parseURL(v, { baseURL: documentBaseURL(this._relevantDocument) });\n    if (newURL === null) {\n      throw new TypeError(`Could not parse \"${v}\" as a URL`);\n    }\n\n    this._locationObjectSetterNavigate(newURL);\n  }\n\n  get origin() {\n    return whatwgURL.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    const possibleFailure = whatwgURL.basicURLParse(v + \":\", { url: copyURL, stateOverride: \"scheme start\" });\n    if (possibleFailure === null) {\n      throw new TypeError(`Could not parse the URL after setting the procol to \"${v}\"`);\n    }\n\n    if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n      return;\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n  set host(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"host\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"hostname\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"port\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get pathname() {\n    const url = this._url;\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n  set pathname(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    copyURL.path = [];\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"path start\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (v === \"\") {\n      copyURL.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      copyURL.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"query\",\n        encodingOverride: this._relevantDocument.charset\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    const copyURL = Object.assign({}, this._url);\n\n    if (copyURL.scheme === \"javascript\") {\n      return;\n    }\n\n    if (v === \"\") {\n      copyURL.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      copyURL.fragment = \"\";\n      whatwgURL.basicURLParse(input, { url: copyURL, stateOverride: \"fragment\" });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  assign(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [\n        `Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`,\n        \"SyntaxError\"\n      ]);\n    }\n\n    this._locationObjectNavigate(parsedURL);\n  }\n\n  replace(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [\n        `Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`,\n        \"SyntaxError\"\n      ]);\n    }\n\n    this._locationObjectNavigate(parsedURL, { replacement: true });\n  }\n\n  reload() {\n    const flags = { replace: true, reloadTriggered: true, exceptionsEnabled: true };\n    navigate(this._relevantDocument._defaultView, this._url, flags);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}