{"ast":null,"code":"\"use strict\";\n\nconst {\n  convertNodesIntoNode\n} = require(\"../node\");\n\nclass ChildNodeImpl {\n  remove() {\n    if (!this.parentNode) {\n      return;\n    }\n\n    this.parentNode._remove(this);\n  }\n\n  after(...nodes) {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n\n        if (!viableNextSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viableNextSibling);\n    }\n  }\n\n  before(...nodes) {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viablePreviousSibling = this.previousSibling;\n      let idx = viablePreviousSibling ? nodes.indexOf(viablePreviousSibling) : -1;\n\n      while (idx !== -1) {\n        viablePreviousSibling = viablePreviousSibling.previousSibling;\n\n        if (!viablePreviousSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viablePreviousSibling);\n      }\n\n      parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viablePreviousSibling ? viablePreviousSibling.nextSibling : parent.firstChild);\n    }\n  }\n\n  replaceWith(...nodes) {\n    const parent = this.parentNode;\n\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n\n        if (!viableNextSibling) {\n          break;\n        }\n\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      const node = convertNodesIntoNode(this._ownerDocument, nodes);\n\n      if (this.parentNode === parent) {\n        parent._replace(node, this);\n      } else {\n        parent._preInsert(node, viableNextSibling);\n      }\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: ChildNodeImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/ChildNode-impl.js"],"names":["convertNodesIntoNode","require","ChildNodeImpl","remove","parentNode","_remove","after","nodes","parent","viableNextSibling","nextSibling","idx","indexOf","_preInsert","_ownerDocument","before","viablePreviousSibling","previousSibling","firstChild","replaceWith","node","_replace","module","exports","implementation"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,SAAD,CAAxC;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB;AACD;;AAED,SAAKA,UAAL,CAAgBC,OAAhB,CAAwB,IAAxB;AACD;;AAEDC,EAAAA,KAAK,CAAC,GAAGC,KAAJ,EAAW;AACd,UAAMC,MAAM,GAAG,KAAKJ,UAApB;;AACA,QAAII,MAAJ,EAAY;AACV,UAAIC,iBAAiB,GAAG,KAAKC,WAA7B;AACA,UAAIC,GAAG,GAAGF,iBAAiB,GAAGF,KAAK,CAACK,OAAN,CAAcH,iBAAd,CAAH,GAAsC,CAAC,CAAlE;;AAEA,aAAOE,GAAG,KAAK,CAAC,CAAhB,EAAmB;AACjBF,QAAAA,iBAAiB,GAAGA,iBAAiB,CAACC,WAAtC;;AACA,YAAI,CAACD,iBAAL,EAAwB;AACtB;AACD;;AACDE,QAAAA,GAAG,GAAGJ,KAAK,CAACK,OAAN,CAAcH,iBAAd,CAAN;AACD;;AAEDD,MAAAA,MAAM,CAACK,UAAP,CAAkBb,oBAAoB,CAAC,KAAKc,cAAN,EAAsBP,KAAtB,CAAtC,EAAoEE,iBAApE;AACD;AACF;;AAEDM,EAAAA,MAAM,CAAC,GAAGR,KAAJ,EAAW;AACf,UAAMC,MAAM,GAAG,KAAKJ,UAApB;;AACA,QAAII,MAAJ,EAAY;AACV,UAAIQ,qBAAqB,GAAG,KAAKC,eAAjC;AACA,UAAIN,GAAG,GAAGK,qBAAqB,GAAGT,KAAK,CAACK,OAAN,CAAcI,qBAAd,CAAH,GAA0C,CAAC,CAA1E;;AAEA,aAAOL,GAAG,KAAK,CAAC,CAAhB,EAAmB;AACjBK,QAAAA,qBAAqB,GAAGA,qBAAqB,CAACC,eAA9C;;AACA,YAAI,CAACD,qBAAL,EAA4B;AAC1B;AACD;;AACDL,QAAAA,GAAG,GAAGJ,KAAK,CAACK,OAAN,CAAcI,qBAAd,CAAN;AACD;;AAEDR,MAAAA,MAAM,CAACK,UAAP,CACEb,oBAAoB,CAAC,KAAKc,cAAN,EAAsBP,KAAtB,CADtB,EAEES,qBAAqB,GAAGA,qBAAqB,CAACN,WAAzB,GAAuCF,MAAM,CAACU,UAFrE;AAID;AACF;;AAEDC,EAAAA,WAAW,CAAC,GAAGZ,KAAJ,EAAW;AACpB,UAAMC,MAAM,GAAG,KAAKJ,UAApB;;AACA,QAAII,MAAJ,EAAY;AACV,UAAIC,iBAAiB,GAAG,KAAKC,WAA7B;AACA,UAAIC,GAAG,GAAGF,iBAAiB,GAAGF,KAAK,CAACK,OAAN,CAAcH,iBAAd,CAAH,GAAsC,CAAC,CAAlE;;AAEA,aAAOE,GAAG,KAAK,CAAC,CAAhB,EAAmB;AACjBF,QAAAA,iBAAiB,GAAGA,iBAAiB,CAACC,WAAtC;;AACA,YAAI,CAACD,iBAAL,EAAwB;AACtB;AACD;;AACDE,QAAAA,GAAG,GAAGJ,KAAK,CAACK,OAAN,CAAcH,iBAAd,CAAN;AACD;;AAED,YAAMW,IAAI,GAAGpB,oBAAoB,CAAC,KAAKc,cAAN,EAAsBP,KAAtB,CAAjC;;AAEA,UAAI,KAAKH,UAAL,KAAoBI,MAAxB,EAAgC;AAC9BA,QAAAA,MAAM,CAACa,QAAP,CAAgBD,IAAhB,EAAsB,IAAtB;AACD,OAFD,MAEO;AACLZ,QAAAA,MAAM,CAACK,UAAP,CAAkBO,IAAlB,EAAwBX,iBAAxB;AACD;AACF;AACF;;AAtEiB;;AAyEpBa,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAEtB;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst { convertNodesIntoNode } = require(\"../node\");\n\nclass ChildNodeImpl {\n  remove() {\n    if (!this.parentNode) {\n      return;\n    }\n\n    this.parentNode._remove(this);\n  }\n\n  after(...nodes) {\n    const parent = this.parentNode;\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n        if (!viableNextSibling) {\n          break;\n        }\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      parent._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), viableNextSibling);\n    }\n  }\n\n  before(...nodes) {\n    const parent = this.parentNode;\n    if (parent) {\n      let viablePreviousSibling = this.previousSibling;\n      let idx = viablePreviousSibling ? nodes.indexOf(viablePreviousSibling) : -1;\n\n      while (idx !== -1) {\n        viablePreviousSibling = viablePreviousSibling.previousSibling;\n        if (!viablePreviousSibling) {\n          break;\n        }\n        idx = nodes.indexOf(viablePreviousSibling);\n      }\n\n      parent._preInsert(\n        convertNodesIntoNode(this._ownerDocument, nodes),\n        viablePreviousSibling ? viablePreviousSibling.nextSibling : parent.firstChild\n      );\n    }\n  }\n\n  replaceWith(...nodes) {\n    const parent = this.parentNode;\n    if (parent) {\n      let viableNextSibling = this.nextSibling;\n      let idx = viableNextSibling ? nodes.indexOf(viableNextSibling) : -1;\n\n      while (idx !== -1) {\n        viableNextSibling = viableNextSibling.nextSibling;\n        if (!viableNextSibling) {\n          break;\n        }\n        idx = nodes.indexOf(viableNextSibling);\n      }\n\n      const node = convertNodesIntoNode(this._ownerDocument, nodes);\n\n      if (this.parentNode === parent) {\n        parent._replace(node, this);\n      } else {\n        parent._preInsert(node, viableNextSibling);\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: ChildNodeImpl\n};\n"]},"metadata":{},"sourceType":"script"}