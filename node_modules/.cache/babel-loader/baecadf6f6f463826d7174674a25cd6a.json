{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  filter,\n  FILTER_ACCEPT\n} = require(\"./helpers\");\n\nexports.implementation = class NodeIteratorImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this._referenceNode = this.root;\n    this._pointerBeforeReferenceNode = true; // This is used to deactive the NodeIterator if there are too many working in a Document at the same time.\n    // Without weak references, a JS implementation of NodeIterator will leak, since we can't know when to clean it up.\n    // This ensures we force a clean up of those beyond some maximum (specified by the Document).\n\n    this._working = true;\n    this._workingNodeIteratorsMax = privateData.workingNodeIteratorsMax;\n    this._globalObject = globalObject;\n  }\n\n  get referenceNode() {\n    this._throwIfNotWorking();\n\n    return this._referenceNode;\n  }\n\n  get pointerBeforeReferenceNode() {\n    this._throwIfNotWorking();\n\n    return this._pointerBeforeReferenceNode;\n  }\n\n  nextNode() {\n    this._throwIfNotWorking();\n\n    return this._traverse(\"next\");\n  }\n\n  previousNode() {\n    this._throwIfNotWorking();\n\n    return this._traverse(\"previous\");\n  }\n\n  detach() {// Intentionally do nothing, per spec.\n  } // Called by Documents.\n\n\n  _preRemovingSteps(toBeRemovedNode) {\n    // Second clause is https://github.com/whatwg/dom/issues/496\n    if (!toBeRemovedNode.contains(this._referenceNode) || toBeRemovedNode === this.root) {\n      return;\n    }\n\n    if (this._pointerBeforeReferenceNode) {\n      let next = null;\n      let candidateForNext = domSymbolTree.following(toBeRemovedNode, {\n        skipChildren: true\n      });\n\n      while (candidateForNext !== null) {\n        if (this.root.contains(candidateForNext)) {\n          next = candidateForNext;\n          break;\n        }\n\n        candidateForNext = domSymbolTree.following(candidateForNext, {\n          skipChildren: true\n        });\n      }\n\n      if (next !== null) {\n        this._referenceNode = next;\n        return;\n      }\n\n      this._pointerBeforeReferenceNode = false;\n    }\n\n    const {\n      previousSibling\n    } = toBeRemovedNode;\n    this._referenceNode = previousSibling === null ? toBeRemovedNode.parentNode : domSymbolTree.lastInclusiveDescendant(toBeRemovedNode.previousSibling);\n  } // Only called by getters and methods that are affected by the pre-removing steps\n\n\n  _throwIfNotWorking() {\n    if (!this._working) {\n      throw Error(`This NodeIterator is no longer working. More than ${this._workingNodeIteratorsMax} iterators are ` + `being used concurrently. You can increase the 'concurrentNodeIterators' option to make this error go away.`);\n    }\n  }\n\n  _traverse(direction) {\n    let node = this._referenceNode;\n    let beforeNode = this._pointerBeforeReferenceNode;\n\n    while (true) {\n      if (direction === \"next\") {\n        if (!beforeNode) {\n          node = domSymbolTree.following(node, {\n            root: this.root\n          });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = false;\n      } else if (direction === \"previous\") {\n        if (beforeNode) {\n          node = domSymbolTree.preceding(node, {\n            root: this.root\n          });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = true;\n      }\n\n      const result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        break;\n      }\n    }\n\n    this._referenceNode = node;\n    this._pointerBeforeReferenceNode = beforeNode;\n    return node;\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/traversal/NodeIterator-impl.js"],"names":["domSymbolTree","require","filter","FILTER_ACCEPT","exports","implementation","NodeIteratorImpl","constructor","globalObject","args","privateData","_active","root","whatToShow","_referenceNode","_pointerBeforeReferenceNode","_working","_workingNodeIteratorsMax","workingNodeIteratorsMax","_globalObject","referenceNode","_throwIfNotWorking","pointerBeforeReferenceNode","nextNode","_traverse","previousNode","detach","_preRemovingSteps","toBeRemovedNode","contains","next","candidateForNext","following","skipChildren","previousSibling","parentNode","lastInclusiveDescendant","Error","direction","node","beforeNode","preceding","result"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { filter, FILTER_ACCEPT } = require(\"./helpers\");\n\nexports.implementation = class NodeIteratorImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n\n    this._referenceNode = this.root;\n    this._pointerBeforeReferenceNode = true;\n\n    // This is used to deactive the NodeIterator if there are too many working in a Document at the same time.\n    // Without weak references, a JS implementation of NodeIterator will leak, since we can't know when to clean it up.\n    // This ensures we force a clean up of those beyond some maximum (specified by the Document).\n    this._working = true;\n    this._workingNodeIteratorsMax = privateData.workingNodeIteratorsMax;\n\n    this._globalObject = globalObject;\n  }\n\n  get referenceNode() {\n    this._throwIfNotWorking();\n    return this._referenceNode;\n  }\n\n  get pointerBeforeReferenceNode() {\n    this._throwIfNotWorking();\n    return this._pointerBeforeReferenceNode;\n  }\n\n  nextNode() {\n    this._throwIfNotWorking();\n    return this._traverse(\"next\");\n  }\n\n  previousNode() {\n    this._throwIfNotWorking();\n    return this._traverse(\"previous\");\n  }\n\n  detach() {\n    // Intentionally do nothing, per spec.\n  }\n\n  // Called by Documents.\n  _preRemovingSteps(toBeRemovedNode) {\n    // Second clause is https://github.com/whatwg/dom/issues/496\n    if (!toBeRemovedNode.contains(this._referenceNode) || toBeRemovedNode === this.root) {\n      return;\n    }\n\n    if (this._pointerBeforeReferenceNode) {\n      let next = null;\n      let candidateForNext = domSymbolTree.following(toBeRemovedNode, { skipChildren: true });\n      while (candidateForNext !== null) {\n        if (this.root.contains(candidateForNext)) {\n          next = candidateForNext;\n          break;\n        }\n        candidateForNext = domSymbolTree.following(candidateForNext, { skipChildren: true });\n      }\n\n      if (next !== null) {\n        this._referenceNode = next;\n        return;\n      }\n\n      this._pointerBeforeReferenceNode = false;\n    }\n\n    const { previousSibling } = toBeRemovedNode;\n    this._referenceNode = previousSibling === null ?\n                          toBeRemovedNode.parentNode :\n                          domSymbolTree.lastInclusiveDescendant(toBeRemovedNode.previousSibling);\n  }\n\n  // Only called by getters and methods that are affected by the pre-removing steps\n  _throwIfNotWorking() {\n    if (!this._working) {\n      throw Error(`This NodeIterator is no longer working. More than ${this._workingNodeIteratorsMax} iterators are ` +\n        `being used concurrently. You can increase the 'concurrentNodeIterators' option to make this error go away.`);\n    }\n  }\n\n  _traverse(direction) {\n    let node = this._referenceNode;\n    let beforeNode = this._pointerBeforeReferenceNode;\n\n    while (true) {\n      if (direction === \"next\") {\n        if (!beforeNode) {\n          node = domSymbolTree.following(node, { root: this.root });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = false;\n      } else if (direction === \"previous\") {\n        if (beforeNode) {\n          node = domSymbolTree.preceding(node, { root: this.root });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = true;\n      }\n\n      const result = filter(this, node);\n      if (result === FILTER_ACCEPT) {\n        break;\n      }\n    }\n\n    this._referenceNode = node;\n    this._pointerBeforeReferenceNode = beforeNode;\n    return node;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}