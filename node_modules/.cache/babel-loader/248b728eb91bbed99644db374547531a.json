{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst CharacterData = require(\"./CharacterData.js\");\n\nconst interfaceName = \"Text\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = (value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(`${context} is not of type 'Text'.`);\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  const ctor = globalObject[ctorRegistrySymbol][\"Text\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor Text is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {\n  CharacterData._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = globalObject => {\n  const wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  if (globalObject.CharacterData === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate Text before CharacterData\");\n  }\n\n  class Text extends globalObject.CharacterData {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to construct 'Text': parameter 1\"\n          });\n        } else {\n          curArg = \"\";\n        }\n\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    splitText(offset) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to execute 'splitText' on 'Text': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'splitText' on 'Text': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].splitText(...args));\n    }\n\n    get wholeText() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"wholeText\"];\n    }\n\n    get assignedSlot() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(esValue[implSymbol][\"assignedSlot\"]);\n    }\n\n  }\n\n  Object.defineProperties(Text.prototype, {\n    splitText: {\n      enumerable: true\n    },\n    wholeText: {\n      enumerable: true\n    },\n    assignedSlot: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"Text\",\n      configurable: true\n    }\n  });\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = Text;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Text\n  });\n};\n\nconst Impl = require(\"../nodes/Text-impl.js\");","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/generated/Text.js"],"names":["conversions","require","utils","implSymbol","ctorRegistrySymbol","CharacterData","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","context","implForWrapper","TypeError","makeWrapper","globalObject","undefined","Error","ctor","Object","create","prototype","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","Text","constructor","args","curArg","arguments","push","target","splitText","offset","esValue","length","tryWrapperForImpl","wholeText","assignedSlot","defineProperties","enumerable","Symbol","toStringTag","writable"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst CharacterData = require(\"./CharacterData.js\");\n\nconst interfaceName = \"Text\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new TypeError(`${context} is not of type 'Text'.`);\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  const ctor = globalObject[ctorRegistrySymbol][\"Text\"];\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor Text is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {\n  CharacterData._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = globalObject => {\n  const wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  if (globalObject.CharacterData === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate Text before CharacterData\");\n  }\n  class Text extends globalObject.CharacterData {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, { context: \"Failed to construct 'Text': parameter 1\" });\n        } else {\n          curArg = \"\";\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    splitText(offset) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      if (arguments.length < 1) {\n        throw new TypeError(\n          \"Failed to execute 'splitText' on 'Text': 1 argument required, but only \" + arguments.length + \" present.\"\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"unsigned long\"](curArg, {\n          context: \"Failed to execute 'splitText' on 'Text': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].splitText(...args));\n    }\n\n    get wholeText() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return esValue[implSymbol][\"wholeText\"];\n    }\n\n    get assignedSlot() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"Illegal invocation\");\n      }\n\n      return utils.tryWrapperForImpl(esValue[implSymbol][\"assignedSlot\"]);\n    }\n  }\n  Object.defineProperties(Text.prototype, {\n    splitText: { enumerable: true },\n    wholeText: { enumerable: true },\n    assignedSlot: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"Text\", configurable: true }\n  });\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n  globalObject[ctorRegistrySymbol][interfaceName] = Text;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Text\n  });\n};\n\nconst Impl = require(\"../nodes/Text-impl.js\");\n"]},"metadata":{},"sourceType":"script"}