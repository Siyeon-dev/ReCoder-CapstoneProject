{"ast":null,"code":"\"use strict\";\n\nconst {\n  isForbidden,\n  isForbiddenResponse,\n  isPrivilegedNoCORSRequest,\n  isNoCORSSafelistedRequest,\n  isCORSWhitelisted\n} = require(\"./header-types\");\n\nconst HeaderList = require(\"./header-list\");\n\nfunction assertName(name) {\n  if (!name.match(/^[!#$%&'*+\\-.^`|~\\w]+$/)) {\n    throw new TypeError(\"name is invalid\");\n  }\n}\n\nfunction assertValue(value) {\n  if (value.match(/[\\0\\r\\n]/)) {\n    throw new TypeError(\"value is invalid\");\n  }\n}\n\nclass HeadersImpl {\n  constructor(globalObject, args) {\n    this.guard = \"none\";\n    this.headersList = new HeaderList();\n\n    if (args[0]) {\n      this._fill(args[0]);\n    }\n  }\n\n  _fill(init) {\n    if (Array.isArray(init)) {\n      for (const header of init) {\n        if (header.length !== 2) {\n          throw new TypeError(\"init is invalid\");\n        }\n\n        this.append(header[0], header[1]);\n      }\n    } else {\n      for (const key of Object.keys(init)) {\n        this.append(key, init[key]);\n      }\n    }\n  }\n\n  has(name) {\n    assertName(name);\n    return this.headersList.contains(name);\n  }\n\n  get(name) {\n    assertName(name);\n    return this.headersList.get(name);\n  }\n\n  _removePrivilegedNoCORSHeaders() {\n    this.headersList.delete(\"range\");\n  }\n\n  append(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n\n        break;\n\n      case \"request-no-cors\":\n        {\n          let temporaryValue = this.get(name);\n\n          if (temporaryValue === null) {\n            temporaryValue = value;\n          } else {\n            temporaryValue += `, ${value}`;\n          }\n\n          if (!isCORSWhitelisted(name, value)) {\n            return;\n          }\n\n          break;\n        }\n\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n\n        break;\n    }\n\n    this.headersList.append(name, value);\n\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  set(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n\n        break;\n\n      case \"request-no-cors\":\n        {\n          if (!isCORSWhitelisted(name, value)) {\n            return;\n          }\n\n          break;\n        }\n\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n\n        break;\n    }\n\n    this.headersList.set(name, value);\n\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  delete(name) {\n    assertName(name);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n\n        break;\n\n      case \"request-no-cors\":\n        {\n          if (!isNoCORSSafelistedRequest(name) && !isPrivilegedNoCORSRequest(name)) {\n            return;\n          }\n\n          break;\n        }\n\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n\n        break;\n    }\n\n    this.headersList.delete(name);\n\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  *[Symbol.iterator]() {\n    for (const header of this.headersList.sortAndCombine()) {\n      yield header;\n    }\n  }\n\n}\n\nexports.implementation = HeadersImpl;","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/fetch/Headers-impl.js"],"names":["isForbidden","isForbiddenResponse","isPrivilegedNoCORSRequest","isNoCORSSafelistedRequest","isCORSWhitelisted","require","HeaderList","assertName","name","match","TypeError","assertValue","value","HeadersImpl","constructor","globalObject","args","guard","headersList","_fill","init","Array","isArray","header","length","append","key","Object","keys","has","contains","get","_removePrivilegedNoCORSHeaders","delete","trim","temporaryValue","set","Symbol","iterator","sortAndCombine","exports","implementation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst {\n  isForbidden,\n  isForbiddenResponse,\n  isPrivilegedNoCORSRequest,\n  isNoCORSSafelistedRequest,\n  isCORSWhitelisted\n} = require(\"./header-types\");\nconst HeaderList = require(\"./header-list\");\n\nfunction assertName(name) {\n  if (!name.match(/^[!#$%&'*+\\-.^`|~\\w]+$/)) {\n    throw new TypeError(\"name is invalid\");\n  }\n}\n\nfunction assertValue(value) {\n  if (value.match(/[\\0\\r\\n]/)) {\n    throw new TypeError(\"value is invalid\");\n  }\n}\n\nclass HeadersImpl {\n  constructor(globalObject, args) {\n    this.guard = \"none\";\n    this.headersList = new HeaderList();\n\n    if (args[0]) {\n      this._fill(args[0]);\n    }\n  }\n\n  _fill(init) {\n    if (Array.isArray(init)) {\n      for (const header of init) {\n        if (header.length !== 2) {\n          throw new TypeError(\"init is invalid\");\n        }\n        this.append(header[0], header[1]);\n      }\n    } else {\n      for (const key of Object.keys(init)) {\n        this.append(key, init[key]);\n      }\n    }\n  }\n\n  has(name) {\n    assertName(name);\n    return this.headersList.contains(name);\n  }\n\n  get(name) {\n    assertName(name);\n    return this.headersList.get(name);\n  }\n\n  _removePrivilegedNoCORSHeaders() {\n    this.headersList.delete(\"range\");\n  }\n\n  append(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        let temporaryValue = this.get(name);\n        if (temporaryValue === null) {\n          temporaryValue = value;\n        } else {\n          temporaryValue += `, ${value}`;\n        }\n        if (!isCORSWhitelisted(name, value)) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n\n    this.headersList.append(name, value);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  set(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        if (!isCORSWhitelisted(name, value)) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n    this.headersList.set(name, value);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  delete(name) {\n    assertName(name);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        if (\n          !isNoCORSSafelistedRequest(name) &&\n          !isPrivilegedNoCORSRequest(name)\n        ) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n    this.headersList.delete(name);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  * [Symbol.iterator]() {\n    for (const header of this.headersList.sortAndCombine()) {\n      yield header;\n    }\n  }\n}\n\nexports.implementation = HeadersImpl;\n"]},"metadata":{},"sourceType":"script"}