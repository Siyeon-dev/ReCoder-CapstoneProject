{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst {\n  serializeURL\n} = require(\"whatwg-url\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  Canvas\n} = require(\"../../utils\");\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  constructor(...args) {\n    super(...args);\n    this._currentRequestState = \"unavailable\";\n  }\n\n  _attrModified(name, value, oldVal) {\n    // TODO: handle crossorigin\n    if (name === \"src\" || (name === \"srcset\" || name === \"width\" || name === \"sizes\") && value !== oldVal) {\n      this._updateTheImageData();\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) : this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) : this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n\n  get complete() {\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    return srcAttributeValue === null || srcAttributeValue === \"\" || this._currentRequestState === \"broken\" || this._currentRequestState === \"completely available\";\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  } // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data\n\n\n  _updateTheImageData() {\n    const document = this._ownerDocument;\n\n    if (!document._defaultView) {\n      return;\n    }\n\n    if (!Canvas) {\n      return;\n    }\n\n    if (!this._image) {\n      this._image = new Canvas.Image();\n    }\n\n    this._currentSrc = null;\n    this._currentRequestState = \"unavailable\";\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    let urlString = null;\n\n    if (srcAttributeValue !== null && srcAttributeValue !== \"\") {\n      const urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);\n\n      if (urlRecord === null) {\n        return;\n      }\n\n      urlString = serializeURL(urlRecord);\n    }\n\n    if (urlString !== null) {\n      const resourceLoader = document._resourceLoader;\n      let request;\n\n      const onLoadImage = data => {\n        const {\n          response\n        } = request;\n\n        if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n          throw new Error(\"Status code: \" + response.statusCode);\n        }\n\n        let error = null;\n\n        this._image.onerror = function (err) {\n          error = err;\n        };\n\n        this._image.src = data;\n\n        if (error) {\n          throw new Error(error);\n        }\n\n        this._currentSrc = srcAttributeValue;\n        this._currentRequestState = \"completely available\";\n      };\n\n      request = resourceLoader.fetch(urlString, {\n        element: this,\n        onLoad: onLoadImage,\n        onError: () => {\n          this._currentRequestState = \"broken\";\n        }\n      });\n    } else {\n      this._image.src = \"\";\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/HTMLImageElement-impl.js"],"names":["conversions","require","serializeURL","HTMLElementImpl","implementation","Canvas","parseURLToResultingURLRecord","HTMLImageElementImpl","constructor","args","_currentRequestState","_attrModified","name","value","oldVal","_updateTheImageData","_accept","height","hasAttributeNS","getAttributeNS","naturalHeight","V","setAttributeNS","String","width","naturalWidth","_image","complete","srcAttributeValue","currentSrc","_currentSrc","document","_ownerDocument","_defaultView","Image","urlString","urlRecord","resourceLoader","_resourceLoader","request","onLoadImage","data","response","statusCode","undefined","Error","error","onerror","err","src","fetch","element","onLoad","onError","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst conversions = require(\"webidl-conversions\");\nconst { serializeURL } = require(\"whatwg-url\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { Canvas } = require(\"../../utils\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  constructor(...args) {\n    super(...args);\n    this._currentRequestState = \"unavailable\";\n  }\n\n  _attrModified(name, value, oldVal) {\n    // TODO: handle crossorigin\n    if (name === \"src\" || ((name === \"srcset\" || name === \"width\" || name === \"sizes\") && value !== oldVal)) {\n      this._updateTheImageData();\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) :\n           this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) :\n           this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n\n  get complete() {\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    return srcAttributeValue === null ||\n      srcAttributeValue === \"\" ||\n      this._currentRequestState === \"broken\" ||\n      this._currentRequestState === \"completely available\";\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  }\n\n  // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data\n  _updateTheImageData() {\n    const document = this._ownerDocument;\n\n    if (!document._defaultView) {\n      return;\n    }\n\n    if (!Canvas) {\n      return;\n    }\n\n    if (!this._image) {\n      this._image = new Canvas.Image();\n    }\n    this._currentSrc = null;\n    this._currentRequestState = \"unavailable\";\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    let urlString = null;\n    if (srcAttributeValue !== null && srcAttributeValue !== \"\") {\n      const urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);\n      if (urlRecord === null) {\n        return;\n      }\n      urlString = serializeURL(urlRecord);\n    }\n    if (urlString !== null) {\n      const resourceLoader = document._resourceLoader;\n      let request;\n\n      const onLoadImage = data => {\n        const { response } = request;\n\n        if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n          throw new Error(\"Status code: \" + response.statusCode);\n        }\n        let error = null;\n        this._image.onerror = function (err) {\n          error = err;\n        };\n        this._image.src = data;\n        if (error) {\n          throw new Error(error);\n        }\n        this._currentSrc = srcAttributeValue;\n        this._currentRequestState = \"completely available\";\n      };\n\n      request = resourceLoader.fetch(urlString, {\n        element: this,\n        onLoad: onLoadImage,\n        onError: () => {\n          this._currentRequestState = \"broken\";\n        }\n      });\n    } else {\n      this._image.src = \"\";\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}