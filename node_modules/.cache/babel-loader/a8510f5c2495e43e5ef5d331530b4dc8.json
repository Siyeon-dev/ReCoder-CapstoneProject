{"ast":null,"code":"\"use strict\";\n\nclass QueueItem {\n  constructor(onLoad, onError, dependentItem) {\n    this.onLoad = onLoad;\n    this.onError = onError;\n    this.data = null;\n    this.error = null;\n    this.dependentItem = dependentItem;\n  }\n\n}\n/**\n * AsyncResourceQueue is the queue in charge of run the async scripts\n * and notify when they finish.\n */\n\n\nmodule.exports = class AsyncResourceQueue {\n  constructor() {\n    this.items = new Set();\n    this.dependentItems = new Set();\n  }\n\n  count() {\n    return this.items.size + this.dependentItems.size;\n  }\n\n  _notify() {\n    if (this._listener) {\n      this._listener();\n    }\n  }\n\n  _check(item) {\n    let promise;\n\n    if (item.onError && item.error) {\n      promise = item.onError(item.error);\n    } else if (item.onLoad && item.data) {\n      promise = item.onLoad(item.data);\n    }\n\n    promise.then(() => {\n      this.items.delete(item);\n      this.dependentItems.delete(item);\n\n      if (this.count() === 0) {\n        this._notify();\n      }\n    });\n  }\n\n  setListener(listener) {\n    this._listener = listener;\n  }\n\n  push(request, onLoad, onError, dependentItem) {\n    const q = this;\n    const item = new QueueItem(onLoad, onError, dependentItem);\n    q.items.add(item);\n    return request.then(data => {\n      item.data = data;\n\n      if (dependentItem && !dependentItem.finished) {\n        q.dependentItems.add(item);\n        return q.items.delete(item);\n      }\n\n      if (onLoad) {\n        return q._check(item);\n      }\n\n      q.items.delete(item);\n\n      if (q.count() === 0) {\n        q._notify();\n      }\n\n      return null;\n    }).catch(err => {\n      item.error = err;\n\n      if (dependentItem && !dependentItem.finished) {\n        q.dependentItems.add(item);\n        return q.items.delete(item);\n      }\n\n      if (onError) {\n        return q._check(item);\n      }\n\n      q.items.delete(item);\n\n      if (q.count() === 0) {\n        q._notify();\n      }\n\n      return null;\n    });\n  }\n\n  notifyItem(syncItem) {\n    for (const item of this.dependentItems) {\n      if (item.dependentItem === syncItem) {\n        this._check(item);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/browser/resources/async-resource-queue.js"],"names":["QueueItem","constructor","onLoad","onError","dependentItem","data","error","module","exports","AsyncResourceQueue","items","Set","dependentItems","count","size","_notify","_listener","_check","item","promise","then","delete","setListener","listener","push","request","q","add","finished","catch","err","notifyItem","syncItem"],"mappings":"AAAA;;AAEA,MAAMA,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,aAAlB,EAAiC;AAC1C,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKF,aAAL,GAAqBA,aAArB;AACD;;AAPa;AAUhB;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;AACxCR,EAAAA,WAAW,GAAG;AACZ,SAAKS,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,cAAL,GAAsB,IAAID,GAAJ,EAAtB;AACD;;AAEDE,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKH,KAAL,CAAWI,IAAX,GAAkB,KAAKF,cAAL,CAAoBE,IAA7C;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKC,SAAT,EAAoB;AAClB,WAAKA,SAAL;AACD;AACF;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,QAAIC,OAAJ;;AAEA,QAAID,IAAI,CAACf,OAAL,IAAgBe,IAAI,CAACZ,KAAzB,EAAgC;AAC9Ba,MAAAA,OAAO,GAAGD,IAAI,CAACf,OAAL,CAAae,IAAI,CAACZ,KAAlB,CAAV;AACD,KAFD,MAEO,IAAIY,IAAI,CAAChB,MAAL,IAAegB,IAAI,CAACb,IAAxB,EAA8B;AACnCc,MAAAA,OAAO,GAAGD,IAAI,CAAChB,MAAL,CAAYgB,IAAI,CAACb,IAAjB,CAAV;AACD;;AAEDc,IAAAA,OAAO,CACJC,IADH,CACQ,MAAM;AACV,WAAKV,KAAL,CAAWW,MAAX,CAAkBH,IAAlB;AACA,WAAKN,cAAL,CAAoBS,MAApB,CAA2BH,IAA3B;;AAEA,UAAI,KAAKL,KAAL,OAAiB,CAArB,EAAwB;AACtB,aAAKE,OAAL;AACD;AACF,KARH;AASD;;AAEDO,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,SAAKP,SAAL,GAAiBO,QAAjB;AACD;;AAEDC,EAAAA,IAAI,CAACC,OAAD,EAAUvB,MAAV,EAAkBC,OAAlB,EAA2BC,aAA3B,EAA0C;AAC5C,UAAMsB,CAAC,GAAG,IAAV;AAEA,UAAMR,IAAI,GAAG,IAAIlB,SAAJ,CAAcE,MAAd,EAAsBC,OAAtB,EAA+BC,aAA/B,CAAb;AAEAsB,IAAAA,CAAC,CAAChB,KAAF,CAAQiB,GAAR,CAAYT,IAAZ;AAEA,WAAOO,OAAO,CACXL,IADI,CACCf,IAAI,IAAI;AACZa,MAAAA,IAAI,CAACb,IAAL,GAAYA,IAAZ;;AAEA,UAAID,aAAa,IAAI,CAACA,aAAa,CAACwB,QAApC,EAA8C;AAC5CF,QAAAA,CAAC,CAACd,cAAF,CAAiBe,GAAjB,CAAqBT,IAArB;AACA,eAAOQ,CAAC,CAAChB,KAAF,CAAQW,MAAR,CAAeH,IAAf,CAAP;AACD;;AAED,UAAIhB,MAAJ,EAAY;AACV,eAAOwB,CAAC,CAACT,MAAF,CAASC,IAAT,CAAP;AACD;;AAEDQ,MAAAA,CAAC,CAAChB,KAAF,CAAQW,MAAR,CAAeH,IAAf;;AAEA,UAAIQ,CAAC,CAACb,KAAF,OAAc,CAAlB,EAAqB;AACnBa,QAAAA,CAAC,CAACX,OAAF;AACD;;AAED,aAAO,IAAP;AACD,KApBI,EAqBJc,KArBI,CAqBEC,GAAG,IAAI;AACZZ,MAAAA,IAAI,CAACZ,KAAL,GAAawB,GAAb;;AAEA,UAAI1B,aAAa,IAAI,CAACA,aAAa,CAACwB,QAApC,EAA8C;AAC5CF,QAAAA,CAAC,CAACd,cAAF,CAAiBe,GAAjB,CAAqBT,IAArB;AACA,eAAOQ,CAAC,CAAChB,KAAF,CAAQW,MAAR,CAAeH,IAAf,CAAP;AACD;;AAED,UAAIf,OAAJ,EAAa;AACX,eAAOuB,CAAC,CAACT,MAAF,CAASC,IAAT,CAAP;AACD;;AAEDQ,MAAAA,CAAC,CAAChB,KAAF,CAAQW,MAAR,CAAeH,IAAf;;AAEA,UAAIQ,CAAC,CAACb,KAAF,OAAc,CAAlB,EAAqB;AACnBa,QAAAA,CAAC,CAACX,OAAF;AACD;;AAED,aAAO,IAAP;AACD,KAxCI,CAAP;AAyCD;;AAEDgB,EAAAA,UAAU,CAACC,QAAD,EAAW;AACnB,SAAK,MAAMd,IAAX,IAAmB,KAAKN,cAAxB,EAAwC;AACtC,UAAIM,IAAI,CAACd,aAAL,KAAuB4B,QAA3B,EAAqC;AACnC,aAAKf,MAAL,CAAYC,IAAZ;AACD;AACF;AACF;;AAhGuC,CAA1C","sourcesContent":["\"use strict\";\n\nclass QueueItem {\n  constructor(onLoad, onError, dependentItem) {\n    this.onLoad = onLoad;\n    this.onError = onError;\n    this.data = null;\n    this.error = null;\n    this.dependentItem = dependentItem;\n  }\n}\n\n/**\n * AsyncResourceQueue is the queue in charge of run the async scripts\n * and notify when they finish.\n */\nmodule.exports = class AsyncResourceQueue {\n  constructor() {\n    this.items = new Set();\n    this.dependentItems = new Set();\n  }\n\n  count() {\n    return this.items.size + this.dependentItems.size;\n  }\n\n  _notify() {\n    if (this._listener) {\n      this._listener();\n    }\n  }\n\n  _check(item) {\n    let promise;\n\n    if (item.onError && item.error) {\n      promise = item.onError(item.error);\n    } else if (item.onLoad && item.data) {\n      promise = item.onLoad(item.data);\n    }\n\n    promise\n      .then(() => {\n        this.items.delete(item);\n        this.dependentItems.delete(item);\n\n        if (this.count() === 0) {\n          this._notify();\n        }\n      });\n  }\n\n  setListener(listener) {\n    this._listener = listener;\n  }\n\n  push(request, onLoad, onError, dependentItem) {\n    const q = this;\n\n    const item = new QueueItem(onLoad, onError, dependentItem);\n\n    q.items.add(item);\n\n    return request\n      .then(data => {\n        item.data = data;\n\n        if (dependentItem && !dependentItem.finished) {\n          q.dependentItems.add(item);\n          return q.items.delete(item);\n        }\n\n        if (onLoad) {\n          return q._check(item);\n        }\n\n        q.items.delete(item);\n\n        if (q.count() === 0) {\n          q._notify();\n        }\n\n        return null;\n      })\n      .catch(err => {\n        item.error = err;\n\n        if (dependentItem && !dependentItem.finished) {\n          q.dependentItems.add(item);\n          return q.items.delete(item);\n        }\n\n        if (onError) {\n          return q._check(item);\n        }\n\n        q.items.delete(item);\n\n        if (q.count() === 0) {\n          q._notify();\n        }\n\n        return null;\n      });\n  }\n\n  notifyItem(syncItem) {\n    for (const item of this.dependentItems) {\n      if (item.dependentItem === syncItem) {\n        this._check(item);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}