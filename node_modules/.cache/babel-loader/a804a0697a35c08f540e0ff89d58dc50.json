{"ast":null,"code":"\"use strict\";\n\nconst {\n  isASCIIHex\n} = require(\"./infra\");\n\nconst {\n  utf8Encode\n} = require(\"./encoding\"); // https://url.spec.whatwg.org/#percent-encode\n\n\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n\n  return \"%\" + hex;\n} // https://url.spec.whatwg.org/#percent-decode\n\n\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n\n    if (byte !== 0x25) {\n      output[outputIndex++] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex++] = byte;\n    } else {\n      const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      output[outputIndex++] = bytePoint;\n      i += 2;\n    }\n  } // TODO: remove the Buffer.from in the next major version; it's only needed for back-compat, and sticking to standard\n  // typed arrays is nicer and simpler.\n  // See https://github.com/jsdom/data-urls/issues/17 for background.\n\n\n  return Buffer.from(output.slice(0, outputIndex));\n} // https://url.spec.whatwg.org/#string-percent-decode\n\n\nfunction percentDecodeString(input) {\n  const bytes = utf8Encode(input);\n  return percentDecodeBytes(bytes);\n} // https://url.spec.whatwg.org/#c0-control-percent-encode-set\n\n\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n} // https://url.spec.whatwg.org/#fragment-percent-encode-set\n\n\nconst extraFragmentPercentEncodeSet = new Set([32, 34, 60, 62, 96]);\n\nfunction isFragmentPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n} // https://url.spec.whatwg.org/#query-percent-encode-set\n\n\nconst extraQueryPercentEncodeSet = new Set([32, 34, 35, 60, 62]);\n\nfunction isQueryPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n} // https://url.spec.whatwg.org/#special-query-percent-encode-set\n\n\nfunction isSpecialQueryPercentEncode(c) {\n  return isQueryPercentEncode(c) || c === 39;\n} // https://url.spec.whatwg.org/#path-percent-encode-set\n\n\nconst extraPathPercentEncodeSet = new Set([63, 96, 123, 125]);\n\nfunction isPathPercentEncode(c) {\n  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n} // https://url.spec.whatwg.org/#userinfo-percent-encode-set\n\n\nconst extraUserinfoPercentEncodeSet = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\n\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n} // https://url.spec.whatwg.org/#component-percent-encode-set\n\n\nconst extraComponentPercentEncodeSet = new Set([36, 37, 38, 43, 44]);\n\nfunction isComponentPercentEncode(c) {\n  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n} // https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\n\n\nconst extraURLEncodedPercentEncodeSet = new Set([33, 39, 40, 41, 126]);\n\nfunction isURLEncodedPercentEncode(c) {\n  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n} // https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\n\n\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n  const bytes = utf8Encode(codePoint);\n  let output = \"\";\n\n  for (const byte of bytes) {\n    // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n    if (!percentEncodePredicate(byte)) {\n      output += String.fromCharCode(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n\n  return output;\n}\n\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n} // https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\n\n\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\n  let output = \"\";\n\n  for (const codePoint of input) {\n    if (spaceAsPlus && codePoint === \" \") {\n      output += \"+\";\n    } else {\n      output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  isC0ControlPercentEncode,\n  isFragmentPercentEncode,\n  isQueryPercentEncode,\n  isSpecialQueryPercentEncode,\n  isPathPercentEncode,\n  isUserinfoPercentEncode,\n  isURLEncodedPercentEncode,\n  percentDecodeString,\n  percentDecodeBytes,\n  utf8PercentEncodeString,\n  utf8PercentEncodeCodePoint\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/whatwg-url/dist/percent-encoding.js"],"names":["isASCIIHex","require","utf8Encode","percentEncode","c","hex","toString","toUpperCase","length","percentDecodeBytes","input","output","Uint8Array","byteLength","outputIndex","i","byte","bytePoint","parseInt","String","fromCodePoint","Buffer","from","slice","percentDecodeString","bytes","isC0ControlPercentEncode","extraFragmentPercentEncodeSet","Set","isFragmentPercentEncode","has","extraQueryPercentEncodeSet","isQueryPercentEncode","isSpecialQueryPercentEncode","extraPathPercentEncodeSet","isPathPercentEncode","extraUserinfoPercentEncodeSet","isUserinfoPercentEncode","extraComponentPercentEncodeSet","isComponentPercentEncode","extraURLEncodedPercentEncodeSet","isURLEncodedPercentEncode","utf8PercentEncodeCodePointInternal","codePoint","percentEncodePredicate","fromCharCode","utf8PercentEncodeCodePoint","utf8PercentEncodeString","spaceAsPlus","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { isASCIIHex } = require(\"./infra\");\nconst { utf8Encode } = require(\"./encoding\");\n\n// https://url.spec.whatwg.org/#percent-encode\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n\n  return \"%\" + hex;\n}\n\n// https://url.spec.whatwg.org/#percent-decode\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n    if (byte !== 0x25) {\n      output[outputIndex++] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex++] = byte;\n    } else {\n      const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      output[outputIndex++] = bytePoint;\n      i += 2;\n    }\n  }\n\n  // TODO: remove the Buffer.from in the next major version; it's only needed for back-compat, and sticking to standard\n  // typed arrays is nicer and simpler.\n  // See https://github.com/jsdom/data-urls/issues/17 for background.\n  return Buffer.from(output.slice(0, outputIndex));\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\nfunction percentDecodeString(input) {\n  const bytes = utf8Encode(input);\n  return percentDecodeBytes(bytes);\n}\n\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\n\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst extraFragmentPercentEncodeSet = new Set([32, 34, 60, 62, 96]);\nfunction isFragmentPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#query-percent-encode-set\nconst extraQueryPercentEncodeSet = new Set([32, 34, 35, 60, 62]);\nfunction isQueryPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\nfunction isSpecialQueryPercentEncode(c) {\n  return isQueryPercentEncode(c) || c === 39;\n}\n\n// https://url.spec.whatwg.org/#path-percent-encode-set\nconst extraPathPercentEncodeSet = new Set([63, 96, 123, 125]);\nfunction isPathPercentEncode(c) {\n  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\nconst extraUserinfoPercentEncodeSet =\n  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#component-percent-encode-set\nconst extraComponentPercentEncodeSet = new Set([36, 37, 38, 43, 44]);\nfunction isComponentPercentEncode(c) {\n  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\nconst extraURLEncodedPercentEncodeSet = new Set([33, 39, 40, 41, 126]);\nfunction isURLEncodedPercentEncode(c) {\n  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n  const bytes = utf8Encode(codePoint);\n  let output = \"\";\n  for (const byte of bytes) {\n    // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n    if (!percentEncodePredicate(byte)) {\n      output += String.fromCharCode(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n\n  return output;\n}\n\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n}\n\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\n  let output = \"\";\n  for (const codePoint of input) {\n    if (spaceAsPlus && codePoint === \" \") {\n      output += \"+\";\n    } else {\n      output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n    }\n  }\n  return output;\n}\n\nmodule.exports = {\n  isC0ControlPercentEncode,\n  isFragmentPercentEncode,\n  isQueryPercentEncode,\n  isSpecialQueryPercentEncode,\n  isPathPercentEncode,\n  isUserinfoPercentEncode,\n  isURLEncodedPercentEncode,\n  percentDecodeString,\n  percentDecodeBytes,\n  utf8PercentEncodeString,\n  utf8PercentEncodeCodePoint\n};\n"]},"metadata":{},"sourceType":"script"}