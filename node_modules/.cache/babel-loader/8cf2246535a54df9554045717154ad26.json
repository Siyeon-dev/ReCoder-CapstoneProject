{"ast":null,"code":"\"use strict\";\n\nconst {\n  parseIntoDocument\n} = require(\"../../browser/parser\");\n\nconst Document = require(\"../generated/Document\");\n\nexports.implementation = class DOMParserImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\":\n        {\n          return this.createScriptingDisabledDocument(\"html\", contentType, string);\n        }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\":\n        {\n          try {\n            return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n          } catch (error) {\n            const document = this.createScriptingDisabledDocument(\"xml\", contentType);\n            const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n            element.textContent = error.message;\n            document.appendChild(element);\n            return document;\n          }\n        }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n\n  createScriptingDisabledDocument(parsingMode, contentType, string) {\n    const document = Document.createImpl(this._globalObject, [], {\n      options: {\n        parsingMode,\n        encoding: \"UTF-8\",\n        contentType,\n        readyState: \"complete\",\n        scriptingDisabled: true // TODO: somehow set URL to active document's URL\n\n      }\n    });\n\n    if (string !== undefined) {\n      parseIntoDocument(string, document);\n    }\n\n    return document;\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser-impl.js"],"names":["parseIntoDocument","require","Document","exports","implementation","DOMParserImpl","constructor","globalObject","_globalObject","parseFromString","string","contentType","String","createScriptingDisabledDocument","error","document","element","createElementNS","textContent","message","appendChild","TypeError","parsingMode","createImpl","options","encoding","readyState","scriptingDisabled","undefined"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAwBC,OAAO,CAAC,sBAAD,CAArC;;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAD,CAAxB;;AAEAE,OAAO,CAACC,cAAR,GAAyB,MAAMC,aAAN,CAAoB;AAC3CC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB,SAAKC,aAAL,GAAqBD,YAArB;AACD;;AAEDE,EAAAA,eAAe,CAACC,MAAD,EAASC,WAAT,EAAsB;AACnC,YAAQC,MAAM,CAACD,WAAD,CAAd;AACE,WAAK,WAAL;AAAkB;AAChB,iBAAO,KAAKE,+BAAL,CAAqC,MAArC,EAA6CF,WAA7C,EAA0DD,MAA1D,CAAP;AACD;;AAED,WAAK,UAAL;AACA,WAAK,iBAAL;AACA,WAAK,uBAAL;AACA,WAAK,eAAL;AAAsB;AACpB,cAAI;AACF,mBAAO,KAAKG,+BAAL,CAAqC,KAArC,EAA4CF,WAA5C,EAAyDD,MAAzD,CAAP;AACD,WAFD,CAEE,OAAOI,KAAP,EAAc;AACd,kBAAMC,QAAQ,GAAG,KAAKF,+BAAL,CAAqC,KAArC,EAA4CF,WAA5C,CAAjB;AACA,kBAAMK,OAAO,GAAGD,QAAQ,CAACE,eAAT,CAAyB,sDAAzB,EAAiF,aAAjF,CAAhB;AAEAD,YAAAA,OAAO,CAACE,WAAR,GAAsBJ,KAAK,CAACK,OAA5B;AAEAJ,YAAAA,QAAQ,CAACK,WAAT,CAAqBJ,OAArB;AACA,mBAAOD,QAAP;AACD;AACF;;AAED;AACE,cAAM,IAAIM,SAAJ,CAAc,qBAAd,CAAN;AAvBJ;AAyBD;;AAEDR,EAAAA,+BAA+B,CAACS,WAAD,EAAcX,WAAd,EAA2BD,MAA3B,EAAmC;AAChE,UAAMK,QAAQ,GAAGb,QAAQ,CAACqB,UAAT,CAAoB,KAAKf,aAAzB,EAAwC,EAAxC,EAA4C;AAC3DgB,MAAAA,OAAO,EAAE;AACPF,QAAAA,WADO;AAEPG,QAAAA,QAAQ,EAAE,OAFH;AAGPd,QAAAA,WAHO;AAIPe,QAAAA,UAAU,EAAE,UAJL;AAKPC,QAAAA,iBAAiB,EAAE,IALZ,CAMP;;AANO;AADkD,KAA5C,CAAjB;;AAWA,QAAIjB,MAAM,KAAKkB,SAAf,EAA0B;AACxB5B,MAAAA,iBAAiB,CAACU,MAAD,EAASK,QAAT,CAAjB;AACD;;AAED,WAAOA,QAAP;AACD;;AAlD0C,CAA7C","sourcesContent":["\"use strict\";\n\nconst { parseIntoDocument } = require(\"../../browser/parser\");\n\nconst Document = require(\"../generated/Document\");\n\nexports.implementation = class DOMParserImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\": {\n        return this.createScriptingDisabledDocument(\"html\", contentType, string);\n      }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\": {\n        try {\n          return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n        } catch (error) {\n          const document = this.createScriptingDisabledDocument(\"xml\", contentType);\n          const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n\n          element.textContent = error.message;\n\n          document.appendChild(element);\n          return document;\n        }\n      }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n\n  createScriptingDisabledDocument(parsingMode, contentType, string) {\n    const document = Document.createImpl(this._globalObject, [], {\n      options: {\n        parsingMode,\n        encoding: \"UTF-8\",\n        contentType,\n        readyState: \"complete\",\n        scriptingDisabled: true\n        // TODO: somehow set URL to active document's URL\n      }\n    });\n\n    if (string !== undefined) {\n      parseIntoDocument(string, document);\n    }\n\n    return document;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}