{"ast":null,"code":"\"use strict\";\n\nconst {\n  appendAttribute\n} = require(\"./attributes\");\n\nconst NODE_TYPE = require(\"./node-type\");\n\nconst orderedSetParse = require(\"./helpers/ordered-set\").parse;\n\nconst {\n  createElement\n} = require(\"./helpers/create-element\");\n\nconst {\n  HTML_NS,\n  XMLNS_NS\n} = require(\"./helpers/namespaces\");\n\nconst {\n  cloningSteps,\n  domSymbolTree\n} = require(\"./helpers/internal-constants\");\n\nconst {\n  asciiCaseInsensitiveMatch,\n  asciiLowercase\n} = require(\"./helpers/strings\");\n\nconst HTMLCollection = require(\"./generated/HTMLCollection\");\n\nexports.clone = (node, document, cloneChildren) => {\n  if (document === undefined) {\n    document = node._ownerDocument;\n  }\n\n  let copy;\n\n  switch (node.nodeType) {\n    case NODE_TYPE.DOCUMENT_NODE:\n      // Can't use a simple `Document.createImpl` because of circular dependency issues :-/\n      copy = node._cloneDocument();\n      break;\n\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      copy = document.implementation.createDocumentType(node.name, node.publicId, node.systemId);\n      break;\n\n    case NODE_TYPE.ELEMENT_NODE:\n      copy = createElement(document, node._localName, node._namespaceURI, node._prefix, node._isValue, false);\n\n      for (const attribute of node._attributeList) {\n        appendAttribute(copy, exports.clone(attribute, document));\n      }\n\n      break;\n\n    case NODE_TYPE.ATTRIBUTE_NODE:\n      copy = document._createAttribute({\n        namespace: node._namespace,\n        namespacePrefix: node._namespacePrefix,\n        localName: node._localName,\n        value: node._value\n      });\n      break;\n\n    case NODE_TYPE.TEXT_NODE:\n      copy = document.createTextNode(node._data);\n      break;\n\n    case NODE_TYPE.CDATA_SECTION_NODE:\n      copy = document.createCDATASection(node._data);\n      break;\n\n    case NODE_TYPE.COMMENT_NODE:\n      copy = document.createComment(node._data);\n      break;\n\n    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      copy = document.createProcessingInstruction(node.target, node._data);\n      break;\n\n    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      copy = document.createDocumentFragment();\n      break;\n  }\n\n  if (node[cloningSteps]) {\n    node[cloningSteps](copy, node, document, cloneChildren);\n  }\n\n  if (cloneChildren) {\n    for (const child of domSymbolTree.childrenIterator(node)) {\n      const childCopy = exports.clone(child, document, true);\n\n      copy._append(childCopy);\n    }\n  }\n\n  return copy;\n}; // For the following, memoization is not applied here since the memoized results are stored on `this`.\n\n\nexports.listOfElementsWithClassNames = (classNames, root) => {\n  // https://dom.spec.whatwg.org/#concept-getElementsByClassName\n  const classes = orderedSetParse(classNames);\n\n  if (classes.size === 0) {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => []\n    });\n  }\n\n  return HTMLCollection.createImpl(root._globalObject, [], {\n    element: root,\n    query: () => {\n      const isQuirksMode = root._ownerDocument.compatMode === \"BackCompat\";\n      return domSymbolTree.treeToArray(root, {\n        filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          const {\n            classList\n          } = node;\n\n          if (isQuirksMode) {\n            for (const className of classes) {\n              if (!classList.tokenSet.some(cur => asciiCaseInsensitiveMatch(cur, className))) {\n                return false;\n              }\n            }\n          } else {\n            for (const className of classes) {\n              if (!classList.tokenSet.contains(className)) {\n                return false;\n              }\n            }\n          }\n\n          return true;\n        }\n\n      });\n    }\n  });\n};\n\nexports.listOfElementsWithQualifiedName = (qualifiedName, root) => {\n  // https://dom.spec.whatwg.org/#concept-getelementsbytagname\n  if (qualifiedName === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter: node => node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root\n      })\n    });\n  }\n\n  if (root._ownerDocument._parsingMode === \"html\") {\n    const lowerQualifiedName = asciiLowercase(qualifiedName);\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          if (node._namespaceURI === HTML_NS) {\n            return node._qualifiedName === lowerQualifiedName;\n          }\n\n          return node._qualifiedName === qualifiedName;\n        }\n\n      })\n    });\n  }\n\n  return HTMLCollection.createImpl(root._globalObject, [], {\n    element: root,\n    query: () => domSymbolTree.treeToArray(root, {\n      filter(node) {\n        if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n          return false;\n        }\n\n        return node._qualifiedName === qualifiedName;\n      }\n\n    })\n  });\n};\n\nexports.listOfElementsWithNamespaceAndLocalName = (namespace, localName, root) => {\n  // https://dom.spec.whatwg.org/#concept-getelementsbytagnamens\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  if (namespace === \"*\" && localName === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter: node => node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root\n      })\n    });\n  }\n\n  if (namespace === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          return node._localName === localName;\n        }\n\n      })\n    });\n  }\n\n  if (localName === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          return node._namespaceURI === namespace;\n        }\n\n      })\n    });\n  }\n\n  return HTMLCollection.createImpl(root._globalObject, [], {\n    element: root,\n    query: () => domSymbolTree.treeToArray(root, {\n      filter(node) {\n        if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n          return false;\n        }\n\n        return node._localName === localName && node._namespaceURI === namespace;\n      }\n\n    })\n  });\n}; // https://dom.spec.whatwg.org/#converting-nodes-into-a-node\n// create a fragment (or just return a node for one item)\n\n\nexports.convertNodesIntoNode = (document, nodes) => {\n  if (nodes.length === 1) {\n    // note: I'd prefer to check instanceof Node rather than string\n    return typeof nodes[0] === \"string\" ? document.createTextNode(nodes[0]) : nodes[0];\n  }\n\n  const fragment = document.createDocumentFragment();\n\n  for (let i = 0; i < nodes.length; i++) {\n    fragment._append(typeof nodes[i] === \"string\" ? document.createTextNode(nodes[i]) : nodes[i]);\n  }\n\n  return fragment;\n}; // https://dom.spec.whatwg.org/#locate-a-namespace-prefix\n\n\nexports.locateNamespacePrefix = (element, namespace) => {\n  if (element._namespaceURI === namespace && element._prefix !== null) {\n    return element._prefix;\n  }\n\n  for (const attribute of element._attributeList) {\n    if (attribute._namespacePrefix === \"xmlns\" && attribute._value === namespace) {\n      return attribute._localName;\n    }\n  }\n\n  if (element.parentElement !== null) {\n    return exports.locateNamespacePrefix(element.parentElement, namespace);\n  }\n\n  return null;\n}; // https://dom.spec.whatwg.org/#locate-a-namespace\n\n\nexports.locateNamespace = (node, prefix) => {\n  switch (node.nodeType) {\n    case NODE_TYPE.ELEMENT_NODE:\n      {\n        if (node._namespaceURI !== null && node._prefix === prefix) {\n          return node._namespaceURI;\n        }\n\n        if (prefix === null) {\n          for (const attribute of node._attributeList) {\n            if (attribute._namespace === XMLNS_NS && attribute._namespacePrefix === null && attribute._localName === \"xmlns\") {\n              return attribute._value !== \"\" ? attribute._value : null;\n            }\n          }\n        } else {\n          for (const attribute of node._attributeList) {\n            if (attribute._namespace === XMLNS_NS && attribute._namespacePrefix === \"xmlns\" && attribute._localName === prefix) {\n              return attribute._value !== \"\" ? attribute._value : null;\n            }\n          }\n        }\n\n        if (node.parentElement === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node.parentElement, prefix);\n      }\n\n    case NODE_TYPE.DOCUMENT_NODE:\n      {\n        if (node.documentElement === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node.documentElement, prefix);\n      }\n\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      {\n        return null;\n      }\n\n    case NODE_TYPE.ATTRIBUTE_NODE:\n      {\n        if (node._element === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node._element, prefix);\n      }\n\n    default:\n      {\n        if (node.parentElement === null) {\n          return null;\n        }\n\n        return exports.locateNamespace(node.parentElement, prefix);\n      }\n  }\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/node.js"],"names":["appendAttribute","require","NODE_TYPE","orderedSetParse","parse","createElement","HTML_NS","XMLNS_NS","cloningSteps","domSymbolTree","asciiCaseInsensitiveMatch","asciiLowercase","HTMLCollection","exports","clone","node","document","cloneChildren","undefined","_ownerDocument","copy","nodeType","DOCUMENT_NODE","_cloneDocument","DOCUMENT_TYPE_NODE","implementation","createDocumentType","name","publicId","systemId","ELEMENT_NODE","_localName","_namespaceURI","_prefix","_isValue","attribute","_attributeList","ATTRIBUTE_NODE","_createAttribute","namespace","_namespace","namespacePrefix","_namespacePrefix","localName","value","_value","TEXT_NODE","createTextNode","_data","CDATA_SECTION_NODE","createCDATASection","COMMENT_NODE","createComment","PROCESSING_INSTRUCTION_NODE","createProcessingInstruction","target","DOCUMENT_FRAGMENT_NODE","createDocumentFragment","child","childrenIterator","childCopy","_append","listOfElementsWithClassNames","classNames","root","classes","size","createImpl","_globalObject","element","query","isQuirksMode","compatMode","treeToArray","filter","classList","className","tokenSet","some","cur","contains","listOfElementsWithQualifiedName","qualifiedName","_parsingMode","lowerQualifiedName","_qualifiedName","listOfElementsWithNamespaceAndLocalName","convertNodesIntoNode","nodes","length","fragment","i","locateNamespacePrefix","parentElement","locateNamespace","prefix","documentElement","_element"],"mappings":"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","sourcesContent":["\"use strict\";\nconst { appendAttribute } = require(\"./attributes\");\nconst NODE_TYPE = require(\"./node-type\");\n\nconst orderedSetParse = require(\"./helpers/ordered-set\").parse;\nconst { createElement } = require(\"./helpers/create-element\");\nconst { HTML_NS, XMLNS_NS } = require(\"./helpers/namespaces\");\nconst { cloningSteps, domSymbolTree } = require(\"./helpers/internal-constants\");\nconst { asciiCaseInsensitiveMatch, asciiLowercase } = require(\"./helpers/strings\");\n\nconst HTMLCollection = require(\"./generated/HTMLCollection\");\n\nexports.clone = (node, document, cloneChildren) => {\n  if (document === undefined) {\n    document = node._ownerDocument;\n  }\n\n  let copy;\n  switch (node.nodeType) {\n    case NODE_TYPE.DOCUMENT_NODE:\n      // Can't use a simple `Document.createImpl` because of circular dependency issues :-/\n      copy = node._cloneDocument();\n      break;\n\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      copy = document.implementation.createDocumentType(node.name, node.publicId, node.systemId);\n      break;\n\n    case NODE_TYPE.ELEMENT_NODE:\n      copy = createElement(\n        document,\n        node._localName,\n        node._namespaceURI,\n        node._prefix,\n        node._isValue,\n        false\n      );\n\n      for (const attribute of node._attributeList) {\n        appendAttribute(copy, exports.clone(attribute, document));\n      }\n      break;\n\n    case NODE_TYPE.ATTRIBUTE_NODE:\n      copy = document._createAttribute({\n        namespace: node._namespace,\n        namespacePrefix: node._namespacePrefix,\n        localName: node._localName,\n        value: node._value\n      });\n      break;\n\n    case NODE_TYPE.TEXT_NODE:\n      copy = document.createTextNode(node._data);\n      break;\n\n    case NODE_TYPE.CDATA_SECTION_NODE:\n      copy = document.createCDATASection(node._data);\n      break;\n\n    case NODE_TYPE.COMMENT_NODE:\n      copy = document.createComment(node._data);\n      break;\n\n    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      copy = document.createProcessingInstruction(node.target, node._data);\n      break;\n\n    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      copy = document.createDocumentFragment();\n      break;\n  }\n\n  if (node[cloningSteps]) {\n    node[cloningSteps](copy, node, document, cloneChildren);\n  }\n\n  if (cloneChildren) {\n    for (const child of domSymbolTree.childrenIterator(node)) {\n      const childCopy = exports.clone(child, document, true);\n      copy._append(childCopy);\n    }\n  }\n\n  return copy;\n};\n\n// For the following, memoization is not applied here since the memoized results are stored on `this`.\n\nexports.listOfElementsWithClassNames = (classNames, root) => {\n  // https://dom.spec.whatwg.org/#concept-getElementsByClassName\n\n  const classes = orderedSetParse(classNames);\n\n  if (classes.size === 0) {\n    return HTMLCollection.createImpl(root._globalObject, [], { element: root, query: () => [] });\n  }\n\n  return HTMLCollection.createImpl(root._globalObject, [], {\n    element: root,\n    query: () => {\n      const isQuirksMode = root._ownerDocument.compatMode === \"BackCompat\";\n\n      return domSymbolTree.treeToArray(root, { filter(node) {\n        if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n          return false;\n        }\n\n        const { classList } = node;\n        if (isQuirksMode) {\n          for (const className of classes) {\n            if (!classList.tokenSet.some(cur => asciiCaseInsensitiveMatch(cur, className))) {\n              return false;\n            }\n          }\n        } else {\n          for (const className of classes) {\n            if (!classList.tokenSet.contains(className)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      } });\n    }\n  });\n};\n\nexports.listOfElementsWithQualifiedName = (qualifiedName, root) => {\n  // https://dom.spec.whatwg.org/#concept-getelementsbytagname\n\n  if (qualifiedName === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter: node => node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root\n      })\n    });\n  }\n\n  if (root._ownerDocument._parsingMode === \"html\") {\n    const lowerQualifiedName = asciiLowercase(qualifiedName);\n\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          if (node._namespaceURI === HTML_NS) {\n            return node._qualifiedName === lowerQualifiedName;\n          }\n\n          return node._qualifiedName === qualifiedName;\n        }\n      })\n    });\n  }\n\n  return HTMLCollection.createImpl(root._globalObject, [], {\n    element: root,\n    query: () => domSymbolTree.treeToArray(root, {\n      filter(node) {\n        if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n          return false;\n        }\n\n        return node._qualifiedName === qualifiedName;\n      }\n    })\n  });\n};\n\nexports.listOfElementsWithNamespaceAndLocalName = (namespace, localName, root) => {\n  // https://dom.spec.whatwg.org/#concept-getelementsbytagnamens\n\n  if (namespace === \"\") {\n    namespace = null;\n  }\n\n  if (namespace === \"*\" && localName === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter: node => node.nodeType === NODE_TYPE.ELEMENT_NODE && node !== root\n      })\n    });\n  }\n\n  if (namespace === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          return node._localName === localName;\n        }\n      })\n    });\n  }\n\n  if (localName === \"*\") {\n    return HTMLCollection.createImpl(root._globalObject, [], {\n      element: root,\n      query: () => domSymbolTree.treeToArray(root, {\n        filter(node) {\n          if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n            return false;\n          }\n\n          return node._namespaceURI === namespace;\n        }\n      })\n    });\n  }\n\n  return HTMLCollection.createImpl(root._globalObject, [], {\n    element: root,\n    query: () => domSymbolTree.treeToArray(root, {\n      filter(node) {\n        if (node.nodeType !== NODE_TYPE.ELEMENT_NODE || node === root) {\n          return false;\n        }\n\n        return node._localName === localName && node._namespaceURI === namespace;\n      }\n    })\n  });\n};\n\n// https://dom.spec.whatwg.org/#converting-nodes-into-a-node\n// create a fragment (or just return a node for one item)\nexports.convertNodesIntoNode = (document, nodes) => {\n  if (nodes.length === 1) { // note: I'd prefer to check instanceof Node rather than string\n    return typeof nodes[0] === \"string\" ? document.createTextNode(nodes[0]) : nodes[0];\n  }\n  const fragment = document.createDocumentFragment();\n  for (let i = 0; i < nodes.length; i++) {\n    fragment._append(typeof nodes[i] === \"string\" ? document.createTextNode(nodes[i]) : nodes[i]);\n  }\n  return fragment;\n};\n\n// https://dom.spec.whatwg.org/#locate-a-namespace-prefix\nexports.locateNamespacePrefix = (element, namespace) => {\n  if (element._namespaceURI === namespace && element._prefix !== null) {\n    return element._prefix;\n  }\n\n  for (const attribute of element._attributeList) {\n    if (attribute._namespacePrefix === \"xmlns\" && attribute._value === namespace) {\n      return attribute._localName;\n    }\n  }\n\n  if (element.parentElement !== null) {\n    return exports.locateNamespacePrefix(element.parentElement, namespace);\n  }\n\n  return null;\n};\n\n// https://dom.spec.whatwg.org/#locate-a-namespace\nexports.locateNamespace = (node, prefix) => {\n  switch (node.nodeType) {\n    case NODE_TYPE.ELEMENT_NODE: {\n      if (node._namespaceURI !== null && node._prefix === prefix) {\n        return node._namespaceURI;\n      }\n\n      if (prefix === null) {\n        for (const attribute of node._attributeList) {\n          if (attribute._namespace === XMLNS_NS &&\n              attribute._namespacePrefix === null &&\n              attribute._localName === \"xmlns\") {\n            return attribute._value !== \"\" ? attribute._value : null;\n          }\n        }\n      } else {\n        for (const attribute of node._attributeList) {\n          if (attribute._namespace === XMLNS_NS &&\n              attribute._namespacePrefix === \"xmlns\" &&\n              attribute._localName === prefix) {\n            return attribute._value !== \"\" ? attribute._value : null;\n          }\n        }\n      }\n\n      if (node.parentElement === null) {\n        return null;\n      }\n\n      return exports.locateNamespace(node.parentElement, prefix);\n    }\n\n    case NODE_TYPE.DOCUMENT_NODE: {\n      if (node.documentElement === null) {\n        return null;\n      }\n\n      return exports.locateNamespace(node.documentElement, prefix);\n    }\n\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n    case NODE_TYPE.DOCUMENT_FRAGMENT_NODE: {\n      return null;\n    }\n\n    case NODE_TYPE.ATTRIBUTE_NODE: {\n      if (node._element === null) {\n        return null;\n      }\n\n      return exports.locateNamespace(node._element, prefix);\n    }\n\n    default: {\n      if (node.parentElement === null) {\n        return null;\n      }\n\n      return exports.locateNamespace(node.parentElement, prefix);\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}