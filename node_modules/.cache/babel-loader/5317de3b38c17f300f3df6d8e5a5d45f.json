{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst attributes = require(\"../attributes.js\");\n\nconst {\n  HTML_NS\n} = require(\"../helpers/namespaces\");\n\nexports.implementation = class NamedNodeMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._element = privateData.element;\n    this._globalObject = globalObject;\n  }\n\n  get _attributeList() {\n    return this._element._attributeList;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this._attributeList.keys();\n  }\n\n  get length() {\n    return this._attributeList.length;\n  }\n\n  item(index) {\n    if (index >= this._attributeList.length) {\n      return null;\n    }\n\n    return this._attributeList[index];\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    const names = new Set(this._attributeList.map(a => a._qualifiedName));\n    const el = this._element;\n\n    if (el._namespaceURI === HTML_NS && el._ownerDocument._parsingMode === \"html\") {\n      for (const name of names) {\n        const lowercaseName = name.toLowerCase();\n\n        if (lowercaseName !== name) {\n          names.delete(name);\n        }\n      }\n    }\n\n    return names;\n  }\n\n  getNamedItem(qualifiedName) {\n    return attributes.getAttributeByName(this._element, qualifiedName);\n  }\n\n  getNamedItemNS(namespace, localName) {\n    return attributes.getAttributeByNameNS(this._element, namespace, localName);\n  }\n\n  setNamedItem(attr) {\n    // eslint-disable-next-line no-restricted-properties\n    return attributes.setAttribute(this._element, attr);\n  }\n\n  setNamedItemNS(attr) {\n    // eslint-disable-next-line no-restricted-properties\n    return attributes.setAttribute(this._element, attr);\n  }\n\n  removeNamedItem(qualifiedName) {\n    const attr = attributes.removeAttributeByName(this._element, qualifiedName);\n\n    if (attr === null) {\n      throw DOMException.create(this._globalObject, [\"Tried to remove an attribute that was not present\", \"NotFoundError\"]);\n    }\n\n    return attr;\n  }\n\n  removeNamedItemNS(namespace, localName) {\n    const attr = attributes.removeAttributeByNameNS(this._element, namespace, localName);\n\n    if (attr === null) {\n      throw DOMException.create(this._globalObject, [\"Tried to remove an attribute that was not present\", \"NotFoundError\"]);\n    }\n\n    return attr;\n  }\n\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/attributes/NamedNodeMap-impl.js"],"names":["DOMException","require","idlUtils","attributes","HTML_NS","exports","implementation","NamedNodeMapImpl","constructor","globalObject","args","privateData","_element","element","_globalObject","_attributeList","supportedPropertyIndices","keys","length","item","index","supportedPropertyNames","names","Set","map","a","_qualifiedName","el","_namespaceURI","_ownerDocument","_parsingMode","name","lowercaseName","toLowerCase","delete","getNamedItem","qualifiedName","getAttributeByName","getNamedItemNS","namespace","localName","getAttributeByNameNS","setNamedItem","attr","setAttribute","setNamedItemNS","removeNamedItem","removeAttributeByName","create","removeNamedItemNS","removeAttributeByNameNS"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAC,uBAAD,CAA3B;;AAEAI,OAAO,CAACC,cAAR,GAAyB,MAAMC,gBAAN,CAAuB;AAC9CC,EAAAA,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;AAC3C,SAAKC,QAAL,GAAgBD,WAAW,CAACE,OAA5B;AAEA,SAAKC,aAAL,GAAqBL,YAArB;AACD;;AACiB,MAAdM,cAAc,GAAG;AACnB,WAAO,KAAKH,QAAL,CAAcG,cAArB;AACD;;AAEqC,OAAjCb,QAAQ,CAACc,wBAAwB,IAAI;AACxC,WAAO,KAAKD,cAAL,CAAoBE,IAApB,EAAP;AACD;;AACS,MAANC,MAAM,GAAG;AACX,WAAO,KAAKH,cAAL,CAAoBG,MAA3B;AACD;;AACDC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AACV,QAAIA,KAAK,IAAI,KAAKL,cAAL,CAAoBG,MAAjC,EAAyC;AACvC,aAAO,IAAP;AACD;;AACD,WAAO,KAAKH,cAAL,CAAoBK,KAApB,CAAP;AACD;;AAEmC,OAA/BlB,QAAQ,CAACmB,sBAAsB,IAAI;AACtC,UAAMC,KAAK,GAAG,IAAIC,GAAJ,CAAQ,KAAKR,cAAL,CAAoBS,GAApB,CAAwBC,CAAC,IAAIA,CAAC,CAACC,cAA/B,CAAR,CAAd;AACA,UAAMC,EAAE,GAAG,KAAKf,QAAhB;;AACA,QAAIe,EAAE,CAACC,aAAH,KAAqBxB,OAArB,IAAgCuB,EAAE,CAACE,cAAH,CAAkBC,YAAlB,KAAmC,MAAvE,EAA+E;AAC7E,WAAK,MAAMC,IAAX,IAAmBT,KAAnB,EAA0B;AACxB,cAAMU,aAAa,GAAGD,IAAI,CAACE,WAAL,EAAtB;;AACA,YAAID,aAAa,KAAKD,IAAtB,EAA4B;AAC1BT,UAAAA,KAAK,CAACY,MAAN,CAAaH,IAAb;AACD;AACF;AACF;;AACD,WAAOT,KAAP;AACD;;AACDa,EAAAA,YAAY,CAACC,aAAD,EAAgB;AAC1B,WAAOjC,UAAU,CAACkC,kBAAX,CAA8B,KAAKzB,QAAnC,EAA6CwB,aAA7C,CAAP;AACD;;AACDE,EAAAA,cAAc,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACnC,WAAOrC,UAAU,CAACsC,oBAAX,CAAgC,KAAK7B,QAArC,EAA+C2B,SAA/C,EAA0DC,SAA1D,CAAP;AACD;;AACDE,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjB;AACA,WAAOxC,UAAU,CAACyC,YAAX,CAAwB,KAAKhC,QAA7B,EAAuC+B,IAAvC,CAAP;AACD;;AACDE,EAAAA,cAAc,CAACF,IAAD,EAAO;AACnB;AACA,WAAOxC,UAAU,CAACyC,YAAX,CAAwB,KAAKhC,QAA7B,EAAuC+B,IAAvC,CAAP;AACD;;AACDG,EAAAA,eAAe,CAACV,aAAD,EAAgB;AAC7B,UAAMO,IAAI,GAAGxC,UAAU,CAAC4C,qBAAX,CAAiC,KAAKnC,QAAtC,EAAgDwB,aAAhD,CAAb;;AACA,QAAIO,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAM3C,YAAY,CAACgD,MAAb,CAAoB,KAAKlC,aAAzB,EAAwC,CAC5C,mDAD4C,EAE5C,eAF4C,CAAxC,CAAN;AAID;;AACD,WAAO6B,IAAP;AACD;;AACDM,EAAAA,iBAAiB,CAACV,SAAD,EAAYC,SAAZ,EAAuB;AACtC,UAAMG,IAAI,GAAGxC,UAAU,CAAC+C,uBAAX,CAAmC,KAAKtC,QAAxC,EAAkD2B,SAAlD,EAA6DC,SAA7D,CAAb;;AACA,QAAIG,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAM3C,YAAY,CAACgD,MAAb,CAAoB,KAAKlC,aAAzB,EAAwC,CAC5C,mDAD4C,EAE5C,eAF4C,CAAxC,CAAN;AAID;;AACD,WAAO6B,IAAP;AACD;;AArE6C,CAAhD","sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst idlUtils = require(\"../generated/utils.js\");\nconst attributes = require(\"../attributes.js\");\nconst { HTML_NS } = require(\"../helpers/namespaces\");\n\nexports.implementation = class NamedNodeMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._element = privateData.element;\n\n    this._globalObject = globalObject;\n  }\n  get _attributeList() {\n    return this._element._attributeList;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this._attributeList.keys();\n  }\n  get length() {\n    return this._attributeList.length;\n  }\n  item(index) {\n    if (index >= this._attributeList.length) {\n      return null;\n    }\n    return this._attributeList[index];\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    const names = new Set(this._attributeList.map(a => a._qualifiedName));\n    const el = this._element;\n    if (el._namespaceURI === HTML_NS && el._ownerDocument._parsingMode === \"html\") {\n      for (const name of names) {\n        const lowercaseName = name.toLowerCase();\n        if (lowercaseName !== name) {\n          names.delete(name);\n        }\n      }\n    }\n    return names;\n  }\n  getNamedItem(qualifiedName) {\n    return attributes.getAttributeByName(this._element, qualifiedName);\n  }\n  getNamedItemNS(namespace, localName) {\n    return attributes.getAttributeByNameNS(this._element, namespace, localName);\n  }\n  setNamedItem(attr) {\n    // eslint-disable-next-line no-restricted-properties\n    return attributes.setAttribute(this._element, attr);\n  }\n  setNamedItemNS(attr) {\n    // eslint-disable-next-line no-restricted-properties\n    return attributes.setAttribute(this._element, attr);\n  }\n  removeNamedItem(qualifiedName) {\n    const attr = attributes.removeAttributeByName(this._element, qualifiedName);\n    if (attr === null) {\n      throw DOMException.create(this._globalObject, [\n        \"Tried to remove an attribute that was not present\",\n        \"NotFoundError\"\n      ]);\n    }\n    return attr;\n  }\n  removeNamedItemNS(namespace, localName) {\n    const attr = attributes.removeAttributeByNameNS(this._element, namespace, localName);\n    if (attr === null) {\n      throw DOMException.create(this._globalObject, [\n        \"Tried to remove an attribute that was not present\",\n        \"NotFoundError\"\n      ]);\n    }\n    return attr;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}