{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  childrenByLocalName\n} = require(\"../helpers/traversal\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nclass HTMLTableSectionElementImpl extends HTMLElementImpl {\n  get rows() {\n    if (!this._rows) {\n      this._rows = HTMLCollection.createImpl(this._globalObject, [], {\n        element: this,\n        query: () => childrenByLocalName(this, \"tr\")\n      });\n    }\n\n    return this._rows;\n  }\n\n  insertRow(index) {\n    if (index < -1 || index > this.rows.length) {\n      throw DOMException.create(this._globalObject, [\"Cannot insert a row at an index that is less than -1 or greater than the number of existing rows\", \"IndexSizeError\"]);\n    }\n\n    const tr = this._ownerDocument.createElement(\"tr\");\n\n    if (index === -1 || index === this.rows.length) {\n      this._append(tr);\n    } else {\n      const beforeTR = this.rows.item(index);\n\n      this._insert(tr, beforeTR);\n    }\n\n    return tr;\n  }\n\n  deleteRow(index) {\n    if (index < -1 || index >= this.rows.length) {\n      throw DOMException.create(this._globalObject, [`Cannot delete a row at index ${index}, where no row exists`, \"IndexSizeError\"]);\n    }\n\n    if (index === -1) {\n      if (this.rows.length > 0) {\n        const tr = this.rows.item(this.rows.length - 1);\n\n        this._remove(tr);\n      }\n    } else {\n      const tr = this.rows.item(index);\n\n      this._remove(tr);\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLTableSectionElementImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableSectionElement-impl.js"],"names":["HTMLElementImpl","require","implementation","childrenByLocalName","HTMLCollection","DOMException","HTMLTableSectionElementImpl","rows","_rows","createImpl","_globalObject","element","query","insertRow","index","length","create","tr","_ownerDocument","createElement","_append","beforeTR","item","_insert","deleteRow","_remove","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BF,OAAO,CAAC,sBAAD,CAAvC;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,6BAAD,CAA9B;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,gCAAD,CAA5B;;AAEA,MAAMK,2BAAN,SAA0CN,eAA1C,CAA0D;AAChD,MAAJO,IAAI,GAAG;AACT,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAaJ,cAAc,CAACK,UAAf,CAA0B,KAAKC,aAA/B,EAA8C,EAA9C,EAAkD;AAC7DC,QAAAA,OAAO,EAAE,IADoD;AAE7DC,QAAAA,KAAK,EAAE,MAAMT,mBAAmB,CAAC,IAAD,EAAO,IAAP;AAF6B,OAAlD,CAAb;AAID;;AACD,WAAO,KAAKK,KAAZ;AACD;;AAEDK,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,QAAIA,KAAK,GAAG,CAAC,CAAT,IAAcA,KAAK,GAAG,KAAKP,IAAL,CAAUQ,MAApC,EAA4C;AAC1C,YAAMV,YAAY,CAACW,MAAb,CAAoB,KAAKN,aAAzB,EAAwC,CAC5C,kGAD4C,EAE5C,gBAF4C,CAAxC,CAAN;AAID;;AAED,UAAMO,EAAE,GAAG,KAAKC,cAAL,CAAoBC,aAApB,CAAkC,IAAlC,CAAX;;AAEA,QAAIL,KAAK,KAAK,CAAC,CAAX,IAAgBA,KAAK,KAAK,KAAKP,IAAL,CAAUQ,MAAxC,EAAgD;AAC9C,WAAKK,OAAL,CAAaH,EAAb;AACD,KAFD,MAEO;AACL,YAAMI,QAAQ,GAAG,KAAKd,IAAL,CAAUe,IAAV,CAAeR,KAAf,CAAjB;;AACA,WAAKS,OAAL,CAAaN,EAAb,EAAiBI,QAAjB;AACD;;AAED,WAAOJ,EAAP;AACD;;AAEDO,EAAAA,SAAS,CAACV,KAAD,EAAQ;AACf,QAAIA,KAAK,GAAG,CAAC,CAAT,IAAcA,KAAK,IAAI,KAAKP,IAAL,CAAUQ,MAArC,EAA6C;AAC3C,YAAMV,YAAY,CAACW,MAAb,CAAoB,KAAKN,aAAzB,EAAwC,CAC3C,gCAA+BI,KAAM,uBADM,EAE5C,gBAF4C,CAAxC,CAAN;AAID;;AAED,QAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,UAAI,KAAKP,IAAL,CAAUQ,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAME,EAAE,GAAG,KAAKV,IAAL,CAAUe,IAAV,CAAe,KAAKf,IAAL,CAAUQ,MAAV,GAAmB,CAAlC,CAAX;;AACA,aAAKU,OAAL,CAAaR,EAAb;AACD;AACF,KALD,MAKO;AACL,YAAMA,EAAE,GAAG,KAAKV,IAAL,CAAUe,IAAV,CAAeR,KAAf,CAAX;;AACA,WAAKW,OAAL,CAAaR,EAAb;AACD;AACF;;AAhDuD;;AAmD1DS,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,cAAc,EAAEI;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { childrenByLocalName } = require(\"../helpers/traversal\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nclass HTMLTableSectionElementImpl extends HTMLElementImpl {\n  get rows() {\n    if (!this._rows) {\n      this._rows = HTMLCollection.createImpl(this._globalObject, [], {\n        element: this,\n        query: () => childrenByLocalName(this, \"tr\")\n      });\n    }\n    return this._rows;\n  }\n\n  insertRow(index) {\n    if (index < -1 || index > this.rows.length) {\n      throw DOMException.create(this._globalObject, [\n        \"Cannot insert a row at an index that is less than -1 or greater than the number of existing rows\",\n        \"IndexSizeError\"\n      ]);\n    }\n\n    const tr = this._ownerDocument.createElement(\"tr\");\n\n    if (index === -1 || index === this.rows.length) {\n      this._append(tr);\n    } else {\n      const beforeTR = this.rows.item(index);\n      this._insert(tr, beforeTR);\n    }\n\n    return tr;\n  }\n\n  deleteRow(index) {\n    if (index < -1 || index >= this.rows.length) {\n      throw DOMException.create(this._globalObject, [\n        `Cannot delete a row at index ${index}, where no row exists`,\n        \"IndexSizeError\"\n      ]);\n    }\n\n    if (index === -1) {\n      if (this.rows.length > 0) {\n        const tr = this.rows.item(this.rows.length - 1);\n        this._remove(tr);\n      }\n    } else {\n      const tr = this.rows.item(index);\n      this._remove(tr);\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableSectionElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}