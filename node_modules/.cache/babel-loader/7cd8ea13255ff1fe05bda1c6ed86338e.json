{"ast":null,"code":"\"use strict\";\n\nconst parse = require(\"./parser.js\");\n\nconst serialize = require(\"./serializer.js\");\n\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n\n    this._type = value;\n  }\n\n  get subtype() {\n    return this._subtype;\n  }\n\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n\n    this._subtype = value;\n  }\n\n  get parameters() {\n    return this._parameters;\n  }\n\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n\n  isJavaScript({\n    allowParameters = false\n  } = {}) {\n    switch (this._type) {\n      case \"text\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"javascript1.0\":\n            case \"javascript1.1\":\n            case \"javascript1.2\":\n            case \"javascript1.3\":\n            case \"javascript1.4\":\n            case \"javascript1.5\":\n            case \"jscript\":\n            case \"livescript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return allowParameters || this._parameters.size === 0;\n              }\n\n            default:\n              {\n                return false;\n              }\n          }\n        }\n\n      case \"application\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return allowParameters || this._parameters.size === 0;\n              }\n\n            default:\n              {\n                return false;\n              }\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n  }\n\n  isXML() {\n    return this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\") || this._subtype.endsWith(\"+xml\");\n  }\n\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n\n};\n\nclass MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` + `valid.`);\n    }\n\n    return this._map.set(name, value);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n\n}","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/whatwg-mimetype/lib/mime-type.js"],"names":["parse","require","serialize","asciiLowercase","solelyContainsHTTPTokenCodePoints","soleyContainsHTTPQuotedStringTokenCodePoints","module","exports","MIMEType","constructor","string","String","result","Error","_type","type","_subtype","subtype","_parameters","MIMETypeParameters","parameters","e","essence","value","length","toString","isJavaScript","allowParameters","size","isXML","endsWith","isHTML","map","_map","get","name","has","set","clear","delete","forEach","callbackFn","thisArg","keys","values","entries","Symbol","iterator"],"mappings":"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","sourcesContent":["\"use strict\";\nconst parse = require(\"./parser.js\");\nconst serialize = require(\"./serializer.js\");\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n\n    this._type = value;\n  }\n\n  get subtype() {\n    return this._subtype;\n  }\n\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n\n    this._subtype = value;\n  }\n\n  get parameters() {\n    return this._parameters;\n  }\n\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n\n  isJavaScript({ allowParameters = false } = {}) {\n    switch (this._type) {\n      case \"text\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"javascript1.0\":\n          case \"javascript1.1\":\n          case \"javascript1.2\":\n          case \"javascript1.3\":\n          case \"javascript1.4\":\n          case \"javascript1.5\":\n          case \"jscript\":\n          case \"livescript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return allowParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      case \"application\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return allowParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  isXML() {\n    return (this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\")) ||\n           this._subtype.endsWith(\"+xml\");\n  }\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n};\n\nclass MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` +\n                      `valid.`);\n    }\n\n    return this._map.set(name, value);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}