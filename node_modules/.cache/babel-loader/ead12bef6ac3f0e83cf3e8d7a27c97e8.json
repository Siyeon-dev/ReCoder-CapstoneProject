{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  cloningSteps\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  isDisabled,\n  normalizeToCRLF,\n  getLabelsForLabelable,\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nclass HTMLTextAreaElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._rawValue = \"\";\n    this._dirtyValue = false;\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _formReset() {\n    this._rawValue = childTextContent(this);\n    this._dirtyValue = false;\n  }\n\n  _getAPIValue() {\n    return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#textarea-wrapping-transformation\n\n\n  _getValue() {\n    // Hard-wrapping omitted, for now.\n    return normalizeToCRLF(this._rawValue);\n  }\n\n  _childTextContentChangeSteps() {\n    super._childTextContentChangeSteps();\n\n    if (this._dirtyValue === false) {\n      this._rawValue = childTextContent(this);\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get defaultValue() {\n    return childTextContent(this);\n  }\n\n  set defaultValue(val) {\n    this.textContent = val;\n  }\n\n  get value() {\n    return this._getAPIValue();\n  }\n\n  set value(val) {\n    // https://html.spec.whatwg.org/multipage/form-elements.html#dom-textarea-value\n    const oldAPIValue = this._getAPIValue();\n\n    this._rawValue = val;\n    this._dirtyValue = true;\n\n    if (oldAPIValue !== this._getAPIValue()) {\n      this._selectionStart = this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n    }\n  }\n\n  get textLength() {\n    return this.value.length; // code unit length (16 bit)\n  }\n\n  get type() {\n    return \"textarea\";\n  }\n\n  _dispatchSelectEvent() {\n    fireAnEvent(\"select\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    });\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n    this.value = val.slice(0, start) + repl + val.slice(end);\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else {\n      // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  get cols() {\n    if (!this.hasAttributeNS(null, \"cols\")) {\n      return 20;\n    }\n\n    return parseInt(this.getAttributeNS(null, \"cols\"));\n  }\n\n  set cols(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    this.setAttributeNS(null, \"cols\", String(value));\n  }\n\n  get rows() {\n    if (!this.hasAttributeNS(null, \"rows\")) {\n      return 2;\n    }\n\n    return parseInt(this.getAttributeNS(null, \"rows\"));\n  }\n\n  set rows(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    this.setAttributeNS(null, \"rows\", String(value));\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  }\n\n  get _mutable() {\n    return !isDisabled(this) && !this.hasAttributeNS(null, \"readonly\");\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n\n\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => this.hasAttributeNS(null, \"required\") && this._mutable && this.value === \"\"\n      };\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._dirtyValue = node._dirtyValue;\n    copy._rawValue = node._rawValue;\n  }\n\n}\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTextAreaElement-impl.js"],"names":["HTMLElementImpl","require","implementation","DefaultConstraintValidationImpl","ValidityState","mixin","DOMException","cloningSteps","isDisabled","normalizeToCRLF","getLabelsForLabelable","formOwner","childTextContent","fireAnEvent","HTMLTextAreaElementImpl","constructor","globalObject","args","privateData","_selectionStart","_selectionEnd","_selectionDirection","_rawValue","_dirtyValue","_customValidityErrorMessage","_labels","_formReset","_getAPIValue","replace","_getValue","_childTextContentChangeSteps","labels","form","defaultValue","val","textContent","value","oldAPIValue","_getValueLength","textLength","length","type","_dispatchSelectEvent","undefined","bubbles","cancelable","select","selectionStart","start","setSelectionRange","Math","max","selectionEnd","end","selectionDirection","dir","min","setRangeText","repl","selectionMode","arguments","create","_globalObject","selStart","selEnd","slice","newEnd","delta","cols","hasAttributeNS","parseInt","getAttributeNS","setAttributeNS","String","rows","_barredFromConstraintValidationSpecialization","_mutable","validity","_validity","state","valueMissing","createImpl","element","copy","node","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst ValidityState = require(\"../generated/ValidityState\");\nconst { mixin } = require(\"../../utils\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { cloningSteps } = require(\"../helpers/internal-constants\");\nconst { isDisabled, normalizeToCRLF, getLabelsForLabelable, formOwner } = require(\"../helpers/form-controls\");\nconst { childTextContent } = require(\"../helpers/text\");\nconst { fireAnEvent } = require(\"../helpers/events\");\n\nclass HTMLTextAreaElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._rawValue = \"\";\n    this._dirtyValue = false;\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    this._rawValue = childTextContent(this);\n    this._dirtyValue = false;\n  }\n\n  _getAPIValue() {\n    return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#textarea-wrapping-transformation\n  _getValue() {\n    // Hard-wrapping omitted, for now.\n    return normalizeToCRLF(this._rawValue);\n  }\n\n  _childTextContentChangeSteps() {\n    super._childTextContentChangeSteps();\n\n    if (this._dirtyValue === false) {\n      this._rawValue = childTextContent(this);\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get defaultValue() {\n    return childTextContent(this);\n  }\n\n  set defaultValue(val) {\n    this.textContent = val;\n  }\n\n  get value() {\n    return this._getAPIValue();\n  }\n\n  set value(val) {\n    // https://html.spec.whatwg.org/multipage/form-elements.html#dom-textarea-value\n    const oldAPIValue = this._getAPIValue();\n    this._rawValue = val;\n    this._dirtyValue = true;\n\n    if (oldAPIValue !== this._getAPIValue()) {\n      this._selectionStart = this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n    }\n  }\n\n  get textLength() {\n    return this.value.length; // code unit length (16 bit)\n  }\n\n  get type() {\n    return \"textarea\";\n  }\n\n  _dispatchSelectEvent() {\n    fireAnEvent(\"select\", this, undefined, { bubbles: true, cancelable: true });\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n\n    this.value = val.slice(0, start) + repl + val.slice(end);\n\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else { // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  get cols() {\n    if (!this.hasAttributeNS(null, \"cols\")) {\n      return 20;\n    }\n    return parseInt(this.getAttributeNS(null, \"cols\"));\n  }\n\n  set cols(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    this.setAttributeNS(null, \"cols\", String(value));\n  }\n\n  get rows() {\n    if (!this.hasAttributeNS(null, \"rows\")) {\n      return 2;\n    }\n    return parseInt(this.getAttributeNS(null, \"rows\"));\n  }\n\n  set rows(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    this.setAttributeNS(null, \"rows\", String(value));\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  }\n\n  get _mutable() {\n    return !isDisabled(this) && !this.hasAttributeNS(null, \"readonly\");\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => this.hasAttributeNS(null, \"required\") && this._mutable && this.value === \"\"\n      };\n\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._dirtyValue = node._dirtyValue;\n    copy._rawValue = node._rawValue;\n  }\n}\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};\n"]},"metadata":{},"sourceType":"script"}