{"ast":null,"code":"\"use strict\";\n\nconst {\n  parseFragment\n} = require(\"../../browser/parser\");\n\nconst {\n  fragmentSerialization\n} = require(\"../domparsing/serialization.js\");\n\nconst {\n  nodeRoot\n} = require(\"../helpers/node\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst DocumentFragment = require(\"./DocumentFragment-impl\").implementation;\n\nconst DocumentOrShadowRootImpl = require(\"./DocumentOrShadowRoot-impl\").implementation;\n\nclass ShadowRootImpl extends DocumentFragment {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    const {\n      mode\n    } = privateData;\n    this._mode = mode;\n  }\n\n  _getTheParent(event) {\n    if (!event.composed && this === nodeRoot(event._path[0].item)) {\n      return null;\n    }\n\n    return this._host;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get host() {\n    return this._host;\n  } // https://w3c.github.io/DOM-Parsing/#dfn-innerhtml\n\n\n  get innerHTML() {\n    return fragmentSerialization(this, {\n      requireWellFormed: true,\n      globalObject: this._globalObject\n    });\n  }\n\n  set innerHTML(markup) {\n    const fragment = parseFragment(markup, this._host);\n\n    this._replaceAll(fragment);\n  }\n\n}\n\nmixin(ShadowRootImpl.prototype, DocumentOrShadowRootImpl.prototype);\nmodule.exports = {\n  implementation: ShadowRootImpl\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/nodes/ShadowRoot-impl.js"],"names":["parseFragment","require","fragmentSerialization","nodeRoot","mixin","DocumentFragment","implementation","DocumentOrShadowRootImpl","ShadowRootImpl","constructor","globalObject","args","privateData","mode","_mode","_getTheParent","event","composed","_path","item","_host","host","innerHTML","requireWellFormed","_globalObject","markup","fragment","_replaceAll","prototype","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA4BD,OAAO,CAAC,gCAAD,CAAzC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAeF,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAYH,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,yBAAD,CAAP,CAAmCK,cAA5D;;AACA,MAAMC,wBAAwB,GAAGN,OAAO,CAAC,6BAAD,CAAP,CAAuCK,cAAxE;;AAEA,MAAME,cAAN,SAA6BH,gBAA7B,CAA8C;AAC5CI,EAAAA,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;AAC3C,UAAMF,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAWD,WAAjB;AACA,SAAKE,KAAL,GAAaD,IAAb;AACD;;AAEDE,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,QAAI,CAACA,KAAK,CAACC,QAAP,IAAmB,SAASd,QAAQ,CAACa,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeC,IAAhB,CAAxC,EAA+D;AAC7D,aAAO,IAAP;AACD;;AAED,WAAO,KAAKC,KAAZ;AACD;;AAEO,MAAJP,IAAI,GAAG;AACT,WAAO,KAAKC,KAAZ;AACD;;AAEO,MAAJO,IAAI,GAAG;AACT,WAAO,KAAKD,KAAZ;AACD,GAtB2C,CAwB5C;;;AACa,MAATE,SAAS,GAAG;AACd,WAAOpB,qBAAqB,CAAC,IAAD,EAAO;AACjCqB,MAAAA,iBAAiB,EAAE,IADc;AAEjCb,MAAAA,YAAY,EAAE,KAAKc;AAFc,KAAP,CAA5B;AAID;;AACY,MAATF,SAAS,CAACG,MAAD,EAAS;AACpB,UAAMC,QAAQ,GAAG1B,aAAa,CAACyB,MAAD,EAAS,KAAKL,KAAd,CAA9B;;AACA,SAAKO,WAAL,CAAiBD,QAAjB;AACD;;AAlC2C;;AAqC9CtB,KAAK,CAACI,cAAc,CAACoB,SAAhB,EAA2BrB,wBAAwB,CAACqB,SAApD,CAAL;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfxB,EAAAA,cAAc,EAAEE;AADD,CAAjB","sourcesContent":["\"use strict\";\n\nconst { parseFragment } = require(\"../../browser/parser\");\nconst { fragmentSerialization } = require(\"../domparsing/serialization.js\");\nconst { nodeRoot } = require(\"../helpers/node\");\nconst { mixin } = require(\"../../utils\");\n\nconst DocumentFragment = require(\"./DocumentFragment-impl\").implementation;\nconst DocumentOrShadowRootImpl = require(\"./DocumentOrShadowRoot-impl\").implementation;\n\nclass ShadowRootImpl extends DocumentFragment {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    const { mode } = privateData;\n    this._mode = mode;\n  }\n\n  _getTheParent(event) {\n    if (!event.composed && this === nodeRoot(event._path[0].item)) {\n      return null;\n    }\n\n    return this._host;\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  // https://w3c.github.io/DOM-Parsing/#dfn-innerhtml\n  get innerHTML() {\n    return fragmentSerialization(this, {\n      requireWellFormed: true,\n      globalObject: this._globalObject\n    });\n  }\n  set innerHTML(markup) {\n    const fragment = parseFragment(markup, this._host);\n    this._replaceAll(fragment);\n  }\n}\n\nmixin(ShadowRootImpl.prototype, DocumentOrShadowRootImpl.prototype);\n\nmodule.exports = {\n  implementation: ShadowRootImpl\n};\n"]},"metadata":{},"sourceType":"script"}