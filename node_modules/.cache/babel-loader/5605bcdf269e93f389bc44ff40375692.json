{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"./internal-constants\");\n\nconst reportException = require(\"./runtime-script-errors\");\n\nconst Event = require(\"../generated/Event\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst MutationRecord = require(\"../generated/MutationRecord\");\n\nconst MUTATION_TYPE = {\n  ATTRIBUTES: \"attributes\",\n  CHARACTER_DATA: \"characterData\",\n  CHILD_LIST: \"childList\"\n}; // Note:\n// Since jsdom doesn't currently implement the concept of \"unit of related similar-origin browsing contexts\"\n// (https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts)\n// we will approximate that the following properties are global for now.\n// https://dom.spec.whatwg.org/#mutation-observer-compound-microtask-queued-flag\n\nlet mutationObserverMicrotaskQueueFlag = false; // Non-spec compliant: List of all the mutation observers with mutation records enqueued. It's a replacement for\n// mutation observer list (https://dom.spec.whatwg.org/#mutation-observer-list) but without leaking since it's empty\n// before notifying the mutation observers.\n\nconst activeMutationObservers = new Set(); // https://dom.spec.whatwg.org/#signal-slot-list\n\nconst signalSlotList = []; // https://dom.spec.whatwg.org/#queue-a-mutation-record\n\nfunction queueMutationRecord(type, target, name, namespace, oldValue, addedNodes, removedNodes, previousSibling, nextSibling) {\n  const interestedObservers = new Map();\n  const nodes = domSymbolTree.ancestorsToArray(target);\n\n  for (const node of nodes) {\n    for (const registered of node._registeredObserverList) {\n      const {\n        options,\n        observer: mo\n      } = registered;\n\n      if (!(node !== target && options.subtree === false) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributes !== true) && !(type === MUTATION_TYPE.ATTRIBUTES && options.attributeFilter && !options.attributeFilter.some(value => value === name || value === namespace)) && !(type === MUTATION_TYPE.CHARACTER_DATA && options.characterData !== true) && !(type === MUTATION_TYPE.CHILD_LIST && options.childList === false)) {\n        if (!interestedObservers.has(mo)) {\n          interestedObservers.set(mo, null);\n        }\n\n        if (type === MUTATION_TYPE.ATTRIBUTES && options.attributeOldValue === true || type === MUTATION_TYPE.CHARACTER_DATA && options.characterDataOldValue === true) {\n          interestedObservers.set(mo, oldValue);\n        }\n      }\n    }\n  }\n\n  for (const [observer, mappedOldValue] of interestedObservers.entries()) {\n    const record = MutationRecord.createImpl(target._globalObject, [], {\n      type,\n      target,\n      attributeName: name,\n      attributeNamespace: namespace,\n      oldValue: mappedOldValue,\n      addedNodes,\n      removedNodes,\n      previousSibling,\n      nextSibling\n    });\n\n    observer._recordQueue.push(record);\n\n    activeMutationObservers.add(observer);\n  }\n\n  queueMutationObserverMicrotask();\n} // https://dom.spec.whatwg.org/#queue-a-tree-mutation-record\n\n\nfunction queueTreeMutationRecord(target, addedNodes, removedNodes, previousSibling, nextSibling) {\n  queueMutationRecord(MUTATION_TYPE.CHILD_LIST, target, null, null, null, addedNodes, removedNodes, previousSibling, nextSibling);\n} // https://dom.spec.whatwg.org/#queue-an-attribute-mutation-record\n\n\nfunction queueAttributeMutationRecord(target, name, namespace, oldValue) {\n  queueMutationRecord(MUTATION_TYPE.ATTRIBUTES, target, name, namespace, oldValue, [], [], null, null);\n} // https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask\n\n\nfunction queueMutationObserverMicrotask() {\n  if (mutationObserverMicrotaskQueueFlag) {\n    return;\n  }\n\n  mutationObserverMicrotaskQueueFlag = true;\n  Promise.resolve().then(() => {\n    notifyMutationObservers();\n  });\n} // https://dom.spec.whatwg.org/#notify-mutation-observers\n\n\nfunction notifyMutationObservers() {\n  mutationObserverMicrotaskQueueFlag = false;\n  const notifyList = [...activeMutationObservers].sort((a, b) => a._id - b._id);\n  activeMutationObservers.clear();\n  const signalList = [...signalSlotList];\n  signalSlotList.splice(0, signalSlotList.length);\n\n  for (const mo of notifyList) {\n    const records = [...mo._recordQueue];\n    mo._recordQueue = [];\n\n    for (const node of mo._nodeList) {\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n        return registeredObserver.source !== mo;\n      });\n\n      if (records.length) {\n        try {\n          mo._callback(records.map(idlUtils.wrapperForImpl), idlUtils.wrapperForImpl(mo));\n        } catch (e) {\n          const {\n            target\n          } = records[0];\n          const window = target._ownerDocument._defaultView;\n          reportException(window, e);\n        }\n      }\n    }\n  }\n\n  for (const slot of signalList) {\n    const slotChangeEvent = Event.createImpl(slot._globalObject, [\"slotchange\", {\n      bubbles: true\n    }], {\n      isTrusted: true\n    });\n\n    slot._dispatch(slotChangeEvent);\n  }\n}\n\nmodule.exports = {\n  MUTATION_TYPE,\n  queueMutationRecord,\n  queueTreeMutationRecord,\n  queueAttributeMutationRecord,\n  queueMutationObserverMicrotask,\n  signalSlotList\n};","map":{"version":3,"sources":["/Library/WebServer/Documents/capstone/capstone-project-re-coder/node_modules/jsdom/lib/jsdom/living/helpers/mutation-observers.js"],"names":["domSymbolTree","require","reportException","Event","idlUtils","MutationRecord","MUTATION_TYPE","ATTRIBUTES","CHARACTER_DATA","CHILD_LIST","mutationObserverMicrotaskQueueFlag","activeMutationObservers","Set","signalSlotList","queueMutationRecord","type","target","name","namespace","oldValue","addedNodes","removedNodes","previousSibling","nextSibling","interestedObservers","Map","nodes","ancestorsToArray","node","registered","_registeredObserverList","options","observer","mo","subtree","attributes","attributeFilter","some","value","characterData","childList","has","set","attributeOldValue","characterDataOldValue","mappedOldValue","entries","record","createImpl","_globalObject","attributeName","attributeNamespace","_recordQueue","push","add","queueMutationObserverMicrotask","queueTreeMutationRecord","queueAttributeMutationRecord","Promise","resolve","then","notifyMutationObservers","notifyList","sort","a","b","_id","clear","signalList","splice","length","records","_nodeList","filter","registeredObserver","source","_callback","map","wrapperForImpl","e","window","_ownerDocument","_defaultView","slot","slotChangeEvent","bubbles","isTrusted","_dispatch","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { domSymbolTree } = require(\"./internal-constants\");\nconst reportException = require(\"./runtime-script-errors\");\n\nconst Event = require(\"../generated/Event\");\nconst idlUtils = require(\"../generated/utils\");\nconst MutationRecord = require(\"../generated/MutationRecord\");\n\nconst MUTATION_TYPE = {\n  ATTRIBUTES: \"attributes\",\n  CHARACTER_DATA: \"characterData\",\n  CHILD_LIST: \"childList\"\n};\n\n// Note:\n// Since jsdom doesn't currently implement the concept of \"unit of related similar-origin browsing contexts\"\n// (https://html.spec.whatwg.org/multipage/browsers.html#unit-of-related-similar-origin-browsing-contexts)\n// we will approximate that the following properties are global for now.\n\n// https://dom.spec.whatwg.org/#mutation-observer-compound-microtask-queued-flag\nlet mutationObserverMicrotaskQueueFlag = false;\n\n// Non-spec compliant: List of all the mutation observers with mutation records enqueued. It's a replacement for\n// mutation observer list (https://dom.spec.whatwg.org/#mutation-observer-list) but without leaking since it's empty\n// before notifying the mutation observers.\nconst activeMutationObservers = new Set();\n\n// https://dom.spec.whatwg.org/#signal-slot-list\nconst signalSlotList = [];\n\n// https://dom.spec.whatwg.org/#queue-a-mutation-record\nfunction queueMutationRecord(\n  type,\n  target,\n  name,\n  namespace,\n  oldValue,\n  addedNodes,\n  removedNodes,\n  previousSibling,\n  nextSibling\n) {\n  const interestedObservers = new Map();\n\n  const nodes = domSymbolTree.ancestorsToArray(target);\n\n  for (const node of nodes) {\n    for (const registered of node._registeredObserverList) {\n      const { options, observer: mo } = registered;\n\n      if (\n        !(node !== target && options.subtree === false) &&\n        !(type === MUTATION_TYPE.ATTRIBUTES && options.attributes !== true) &&\n        !(type === MUTATION_TYPE.ATTRIBUTES && options.attributeFilter &&\n          !options.attributeFilter.some(value => value === name || value === namespace)) &&\n        !(type === MUTATION_TYPE.CHARACTER_DATA && options.characterData !== true) &&\n        !(type === MUTATION_TYPE.CHILD_LIST && options.childList === false)\n      ) {\n        if (!interestedObservers.has(mo)) {\n          interestedObservers.set(mo, null);\n        }\n\n        if (\n          (type === MUTATION_TYPE.ATTRIBUTES && options.attributeOldValue === true) ||\n          (type === MUTATION_TYPE.CHARACTER_DATA && options.characterDataOldValue === true)\n        ) {\n          interestedObservers.set(mo, oldValue);\n        }\n      }\n    }\n  }\n\n  for (const [observer, mappedOldValue] of interestedObservers.entries()) {\n    const record = MutationRecord.createImpl(target._globalObject, [], {\n      type,\n      target,\n      attributeName: name,\n      attributeNamespace: namespace,\n      oldValue: mappedOldValue,\n      addedNodes,\n      removedNodes,\n      previousSibling,\n      nextSibling\n    });\n\n    observer._recordQueue.push(record);\n    activeMutationObservers.add(observer);\n  }\n\n  queueMutationObserverMicrotask();\n}\n\n// https://dom.spec.whatwg.org/#queue-a-tree-mutation-record\nfunction queueTreeMutationRecord(target, addedNodes, removedNodes, previousSibling, nextSibling) {\n  queueMutationRecord(\n    MUTATION_TYPE.CHILD_LIST,\n    target,\n    null,\n    null,\n    null,\n    addedNodes,\n    removedNodes,\n    previousSibling,\n    nextSibling\n  );\n}\n\n// https://dom.spec.whatwg.org/#queue-an-attribute-mutation-record\nfunction queueAttributeMutationRecord(target, name, namespace, oldValue) {\n  queueMutationRecord(\n    MUTATION_TYPE.ATTRIBUTES,\n    target,\n    name,\n    namespace,\n    oldValue,\n    [],\n    [],\n    null,\n    null\n  );\n}\n\n// https://dom.spec.whatwg.org/#queue-a-mutation-observer-compound-microtask\nfunction queueMutationObserverMicrotask() {\n  if (mutationObserverMicrotaskQueueFlag) {\n    return;\n  }\n\n  mutationObserverMicrotaskQueueFlag = true;\n\n  Promise.resolve().then(() => {\n    notifyMutationObservers();\n  });\n}\n\n// https://dom.spec.whatwg.org/#notify-mutation-observers\nfunction notifyMutationObservers() {\n  mutationObserverMicrotaskQueueFlag = false;\n\n  const notifyList = [...activeMutationObservers].sort((a, b) => a._id - b._id);\n  activeMutationObservers.clear();\n\n  const signalList = [...signalSlotList];\n  signalSlotList.splice(0, signalSlotList.length);\n\n  for (const mo of notifyList) {\n    const records = [...mo._recordQueue];\n    mo._recordQueue = [];\n\n    for (const node of mo._nodeList) {\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n        return registeredObserver.source !== mo;\n      });\n\n      if (records.length) {\n        try {\n          mo._callback(\n            records.map(idlUtils.wrapperForImpl),\n            idlUtils.wrapperForImpl(mo)\n          );\n        } catch (e) {\n          const { target } = records[0];\n          const window = target._ownerDocument._defaultView;\n\n          reportException(window, e);\n        }\n      }\n    }\n  }\n\n  for (const slot of signalList) {\n    const slotChangeEvent = Event.createImpl(\n      slot._globalObject,\n      [\n        \"slotchange\",\n        { bubbles: true }\n      ],\n      { isTrusted: true }\n    );\n\n    slot._dispatch(slotChangeEvent);\n  }\n}\n\nmodule.exports = {\n  MUTATION_TYPE,\n\n  queueMutationRecord,\n  queueTreeMutationRecord,\n  queueAttributeMutationRecord,\n\n  queueMutationObserverMicrotask,\n\n  signalSlotList\n};\n"]},"metadata":{},"sourceType":"script"}